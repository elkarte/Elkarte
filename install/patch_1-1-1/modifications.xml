<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.elkarte.net/site/modification">
<modification xmlns="http://www.elkarte.net/site/modification" xmlns:elk="http://www.elkarte.net/">

	<id>Elkarte Contributors:ElkArte_111_patch</id>
	<version>1.0</version>
	<file name="BOARDDIR/SSI.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[// $ssi_guest_access = false;

// We are in Elk, but from the side-entrance.
const ELK = 'SSI';

require_once(dirname(__FILE__) . '/bootstrap.php');

// Have the ability to easily add functions to SSI.
call_integration_hook('integrate_SSI');]]></search>
			<add><![CDATA[// $ssi_guest_access = false;

// We are in Elk, but from the side-entrance.
if (!defined('ELKBOOT'))
{
	define('ELK', 'SSI');

	require_once(dirname(__FILE__) . '/bootstrap.php');
	$bootstrap = new Bootstrap();
}

// The globals that were created during the bootstrap process
global $time_start, $maintenance, $msubject, $mmessage, $mbname, $language;
global $boardurl, $webmaster_email, $cookiename;
global $db_type, $db_server, $db_name, $db_user, $db_prefix, $db_persist, $db_error_send;
global $modSettings, $context, $sc, $user_info, $topic, $board, $txt;
global $ssi_db_user, $scripturl, $ssi_db_passwd, $db_passwd;
global $boarddir, $sourcedir, $db_show_debug, $ssi_error_reporting;

// Have the ability to easily add functions to SSI.
call_integration_hook('integrate_SSI');]]></add>
		</operation>
	</file>
	<file name="BOARDDIR/index.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */

$time_start = microtime(true);

// The software version
const FORUM_VERSION = 'ElkArte 1.1';

// First things first, but not necessarily in that order.
const ELK = '1';

// Shortcut for the browser cache stale
const CACHE_STALE = '?R110';

// Report errors but not depreciated ones
error_reporting(E_ALL | E_STRICT & ~8192);

// Directional only script time usage for display
// getrusage is missing in php < 7 on Windows
if (function_exists('getrusage'))
{
	$rusage_start = getrusage();
}
else
{
	$rusage_start = array();
}

// Turn on output buffering if it isn't already on (via php.ini for example)
if (!ob_get_level())
	ob_start();

$db_show_debug = false;

// We don't need no globals. (a bug in "old" versions of PHP)
foreach (array('db_character_set', 'cachedir') as $variable)
{
	if (isset($GLOBALS[$variable]))
	{
		unset($GLOBALS[$variable], $GLOBALS[$variable]);
	}
}

// Where the Settings.php file is located
$settings_loc = __DIR__ . '/Settings.php';

// First thing: if the install dir exists, just send anybody there
// The ignore_install_dir var is for developers only. Do not add it on production sites
if (file_exists('install'))
{
	if (file_exists($settings_loc))
	{
		require_once($settings_loc);
	}

	if (empty($ignore_install_dir))
	{
		// No install_time defined or finished the installing in the last 2 minutes
		if (empty($install_time) || $install_time - time() < 120)
		{
			$redirec_file = 'install.php';
		}
		else
		{
			$redirec_file = 'upgrade.php';
		}

		header('Location: http' . (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) === 'on' ? 's' : '') . '://' . (empty($_SERVER['HTTP_HOST']) ? $_SERVER['SERVER_NAME'] . (empty($_SERVER['SERVER_PORT']) || $_SERVER['SERVER_PORT'] === '80' ? '' : ':' . $_SERVER['SERVER_PORT']) : $_SERVER['HTTP_HOST']) . (strtr(dirname($_SERVER['PHP_SELF']), '\\', '/') == '/' ? '' : strtr(dirname($_SERVER['PHP_SELF']), '\\', '/')) . '/install/' . $redirec_file);
		die();
	}
}
else
{
	require_once($settings_loc);
}

// Make sure the paths are correct... at least try to fix them.
if (!file_exists($boarddir) && file_exists(__DIR__ . '/agreement.txt'))
{
	$boarddir = __DIR__;
}
if (!file_exists($sourcedir . '/SiteDispatcher.class.php') && file_exists($boarddir . '/sources'))
{
	$sourcedir = $boarddir . '/sources';
}

// Check that directories which didn't exist in past releases are initialized.
if ((empty($cachedir) || !file_exists($cachedir)) && file_exists($boarddir . '/cache'))
{
	$cachedir = $boarddir . '/cache';
}

if ((empty($extdir) || !file_exists($extdir)) && file_exists($sourcedir . '/ext'))
{
	$extdir = $sourcedir . '/ext';
}

if ((empty($languagedir) || !file_exists($languagedir)) && file_exists($boarddir . '/themes/default/languages'))
{
	$languagedir = $boarddir . '/themes/default/languages';
}

// Time to forget about variables and go with constants!
DEFINE('BOARDDIR', $boarddir);
DEFINE('CACHEDIR', $cachedir);
DEFINE('EXTDIR', $extdir);
DEFINE('LANGUAGEDIR', $languagedir);
DEFINE('SOURCEDIR', $sourcedir);
DEFINE('ADMINDIR', $sourcedir . '/admin');
DEFINE('CONTROLLERDIR', $sourcedir . '/controllers');
DEFINE('SUBSDIR', $sourcedir . '/subs');
DEFINE('ADDONSDIR', $boarddir . '/addons');
unset($boarddir, $cachedir, $sourcedir, $languagedir, $extdir);

// Files we cannot live without.
require_once(SOURCEDIR . '/QueryString.php');
require_once(SOURCEDIR . '/Session.php');
require_once(SOURCEDIR . '/Subs.php');
require_once(SOURCEDIR . '/Logging.php');
require_once(SOURCEDIR . '/Load.php');
require_once(SOURCEDIR . '/Security.php');
require_once(SUBSDIR . '/Cache.subs.php');

// Initialize the class Autoloader
require(SOURCEDIR . '/Autoloader.class.php');
$autoloder = Elk_Autoloader::instance();
$autoloder->setupAutoloader(array(SOURCEDIR, SUBSDIR, CONTROLLERDIR, ADMINDIR, ADDONSDIR));
$autoloder->register(SOURCEDIR, '\\ElkArte');
$autoloder->register(SOURCEDIR . '/subs/BBC', '\\BBC');

// Show lots of debug information below the page, not for production sites
if ($db_show_debug === true)
{
	Debug::instance()->rusage('start', $rusage_start);
}

// Forum in extended maintenance mode? Our trip ends here with a bland message.
if (!empty($maintenance) && $maintenance == 2)
{
	Errors::instance()->display_maintenance_message();
}

// Clean the request.
cleanRequest();

// Initiate the database connection and define some database functions to use.
loadDatabase();

// Let's set up our shiny new hooks handler.
Hooks::init(database(), Debug::instance());

// It's time for settings loaded from the database.
reloadSettings();

// Our good ole' contextual array, which will hold everything
if (!isset($context))
{
	$context = array();
}

// Seed the random generator.
elk_seed_generator();

// Before we get carried away, are we doing a scheduled task? If so save CPU cycles by jumping out!
if (isset($_GET['scheduled']))
{]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */

// Bootstrap the system
require_once(dirname(__FILE__) . '/bootstrap.php');
new Bootstrap(false);

// Turn on output buffering if it isn't already on (via php.ini for example)
if (!ob_get_level())
	ob_start();

// Before we get carried away, are we doing a scheduled task? If so save CPU cycles by jumping out!
if (isset($_GET['scheduled']))
{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	$dispatcher->dispatch();
}]]></search>
			<add><![CDATA[	}

	$dispatcher->dispatch();
}]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/SiteCombiner.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 */

/**]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 */

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Save the hive, or a nest, or a conglomeration. Like it was grown
		$this->_archive_name = 'hive-' . sha1($this->_archive_filenames) . $type;

		// Create a unique cache stale for this hive ?12345
		if (!empty($this->_stales))
			$this->_archive_stale = '?' . hash('crc32', implode(' ', $this->_stales));
	}

	/**]]></search>
			<add><![CDATA[		// Save the hive, or a nest, or a conglomeration. Like it was grown
		$this->_archive_name = 'hive-' . sha1($this->_archive_filenames) . $type;

		// Create a unique cache stale for this hive ?x12345
		if (!empty($this->_stales))
			$this->_archive_stale = '?x' . hash('crc32b', implode(' ', $this->_stales));
	}

	/**]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/SiteDispatcher.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $modSettings;

		if (
			!empty($modSettings['front_page'])
			&& is_callable(array($modSettings['front_page'], 'frontPageHook'))
		) {
			$modSettings['default_forum_action'] = '?action=forum;';
			call_user_func_array(array($modSettings['front_page'], 'frontPageHook'), array(&$this->_default_action));
		}
		else
		{
			$modSettings['default_forum_action'] = '';
		}
		return $this->_default_action;
	}
]]></search>
			<add><![CDATA[	{
		global $modSettings;

		$modSettings['default_forum_action'] = '';

		// Let's integrate front pages from 1.0.x for old time's sake.
		$default_action = array(
			'controller' => 'BoardIndex_Controller',
			'function' => 'action_boardindex'
		);

		// Reminder: hooks need to account for multiple addons setting this hook.
		call_integration_hook('integrate_action_frontpage', array(&$default_action));

		if ($this->_default_action == $default_action)
		{
			$modSettings['default_forum_action'] = '?action=forum;';
			$this->_default_action = $default_action;
		}

		if (!empty($modSettings['front_page'])
			&& is_callable(array($modSettings['front_page'], 'frontPageHook')))
		{
			$modSettings['default_forum_action'] = '?action=forum;';
			call_user_func_array(array($modSettings['front_page'], 'frontPageHook'), array(&$this->_default_action));
		}

		return $this->_default_action;
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	protected function determineAction()
	{
		// Allow to extend or change $actionArray through a hook
		// Format:
		// $_GET['action'] => array($class, $method)
		call_integration_hook('integrate_actions', array(&$this->actionArray));

		// Is it in the action list?
		if (isset($this->actionArray[$this->action]))
		{
			$this->_controller_name = $this->actionArray[$this->action][0];

			// If the method is coded in, use it]]></search>
			<add><![CDATA[	 */
	protected function determineAction()
	{
		// To try to stay backwards compatible...
		$adminActions = array();

		// Allow to extend or change $actionArray through a hook
		// Format:
		// $_GET['action'] => array($class, $method)
		call_integration_hook('integrate_actions', array(&$this->actionArray, &$adminActions));

		// Is it in the action list?
		if (isset($this->actionArray[$this->action]))
		{
			// Compatibility with 1.0.x.
			if (isset($this->actionArray[$this->action][2]))
			{
				$path = in_array($_GET['action'], $adminActions) ? ADMINDIR : CONTROLLERDIR;
				require_once($path . '/' . $this->actionArray[$this->action][0]);
				array_shift($this->actionArray[$this->action]);
			}

			$this->_controller_name = $this->actionArray[$this->action][0];

			// If the method is coded in, use it]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// The file and function weren't found yet?
		if (empty($this->_controller_name) || empty($this->_function_name))
		{
			// We still haven't found what we're looking for...
			$this->_controller_name = $this->_default_action['controller'];
			$this->_function_name = $this->_default_action['function'];]]></search>
			<add><![CDATA[		// The file and function weren't found yet?
		if (empty($this->_controller_name) || empty($this->_function_name))
		{
			// Support legacy integrations.
			if (isset($this->_default_action['file']))
			{
				require_once($this->_default_action['file']);
			}
			// We still haven't found what we're looking for...
			$this->_controller_name = $this->_default_action['controller'];
			$this->_function_name = $this->_default_action['function'];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			$this->_controller_name = $this->_default_action['controller'];
			$this->_function_name = $this->_default_action['function'];
		}
	}
]]></search>
			<add><![CDATA[		{
			$this->_controller_name = $this->_default_action['controller'];
			$this->_function_name = $this->_default_action['function'];
			// Support legacy integrations.
			if (isset($this->_default_action['file']))
			{
				require_once($this->_default_action['file']);
			}
		}
	}
]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageAttachments.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			checkSession();

			// Changing the attachment upload directory
			if (isset($this->_req->post->attachmentUploadDir))
			{
				if (!empty($this->_req->post->attachmentUploadDir) && $modSettings['attachmentUploadDir'] != $this->_req->post->attachmentUploadDir)
					rename($modSettings['attachmentUploadDir'], $this->_req->post->attachmentUploadDir);

				$modSettings['attachmentUploadDir'] = array(1 => $this->_req->post->attachmentUploadDir);]]></search>
			<add><![CDATA[		{
			checkSession();

			if (!empty($this->_req->post->attachmentEnable))
			{
				enableModules('attachments', array('post'));
			}
			else
			{
				disableModules('attachments', array('post'));
			}

			// Changing the attachment upload directory
			if (isset($this->_req->post->attachmentUploadDir))
			{
				if (!empty($this->_req->post->attachmentUploadDir) && file_exists($modSettings['attachmentUploadDir']) && $modSettings['attachmentUploadDir'] != $this->_req->post->attachmentUploadDir)
					rename($modSettings['attachmentUploadDir'], $this->_req->post->attachmentUploadDir);

				$modSettings['attachmentUploadDir'] = array(1 => $this->_req->post->attachmentUploadDir);]]></add>
		</operation>
	</file>
	<file name="ADMINDIR/ManageFeatures.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			call_integration_hook('integrate_save_modify_mention_settings');

			if (empty($this->_req->post->notifications))
			{
				$notification_methods = serialize(array());]]></search>
			<add><![CDATA[
			call_integration_hook('integrate_save_modify_mention_settings');

			if (!empty($this->_req->post->mentions_enabled))
			{
				enableModules('mentions', array('post', 'display'));
			}
			else
			{
				disableModules('mentions', array('post', 'display'));
			}

			if (empty($this->_req->post->notifications))
			{
				$notification_methods = serialize(array());]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Announce.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Get the subject of the topic we're about to announce.
		$topic_info = getTopicInfo($topic, 'message');
		$context['topic_subject'] = $topic_info['subject'];
		$context['announce_topic']['subject'] = censor($context['announce_topic']['subject']);

		// Prepare for the template
		$context['move'] = isset($this->_req->query->move) ? 1 : 0;]]></search>
			<add><![CDATA[		// Get the subject of the topic we're about to announce.
		$topic_info = getTopicInfo($topic, 'message');
		$context['topic_subject'] = $topic_info['subject'];
		$context['topic_subject'] = censor($context['topic_subject']);

		// Prepare for the template
		$context['move'] = isset($this->_req->query->move) ? 1 : 0;]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Attachment.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					{
						$resp_data = array(
							'name' => $val['name'],
							'attachid' => $attachID,
							'size' => $val['size']
						);
					}]]></search>
			<add><![CDATA[					{
						$resp_data = array(
							'name' => $val['name'],
							'attachid' => $val['public_attachid'],
							'size' => $val['size']
						);
					}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			{
				require_once(SUBSDIR . '/Attachments.subs.php');

				$result = removeTempAttachById($this->_req->post->attachid);
				if ($result === true)
				{
					$context['json_data'] = array('result' => true);]]></search>
			<add><![CDATA[			{
				require_once(SUBSDIR . '/Attachments.subs.php');

				$attachId = getAttachmentIdFromPublic($this->_req->post->attachid);

				$result = removeTempAttachById($attachId);
				if ($result === true)
				{
					$context['json_data'] = array('result' => true);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		require_once(SUBSDIR . '/Attachments.subs.php');

		// Temporary attachment, special case...
		if (isset($this->_req->query->attach) && strpos($this->_req->query->attach, 'post_tmp_' . $user_info['id']) !== false)
		{
			$this->action_tmpattach();
			return;]]></search>
			<add><![CDATA[		require_once(SUBSDIR . '/Attachments.subs.php');

		// Temporary attachment, special case...
		if (isset($this->_req->query->attach) && strpos($this->_req->query->attach, 'post_tmp_' . $user_info['id'] . '_') !== false)
		{
			$this->action_tmpattach();
			return;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$eTag = '"' . substr($id_attach . $real_filename . @filemtime($filename), 0, 64) . '"';
		$use_compression = !empty($modSettings['enableCompressedOutput']) && @filesize($filename) <= 4194304 && in_array($file_ext, array('txt', 'html', 'htm', 'js', 'doc', 'docx', 'rtf', 'css', 'php', 'log', 'xml', 'sql', 'c', 'java'));
		$disposition = !isset($this->_req->query->image) ? 'attachment' : 'inline';
		$do_cache = false === (!isset($this->_req->query->image) && in_array($file_ext, array('gif', 'jpg', 'bmp', 'png', 'jpeg', 'tiff')));

		// Make sure the mime type warrants an inline display.
		if (isset($this->_req->query->image) && !empty($mime_type) && strpos($mime_type, 'image/') !== 0)]]></search>
			<add><![CDATA[		$eTag = '"' . substr($id_attach . $real_filename . @filemtime($filename), 0, 64) . '"';
		$use_compression = !empty($modSettings['enableCompressedOutput']) && @filesize($filename) <= 4194304 && in_array($file_ext, array('txt', 'html', 'htm', 'js', 'doc', 'docx', 'rtf', 'css', 'php', 'log', 'xml', 'sql', 'c', 'java'));
		$disposition = !isset($this->_req->query->image) ? 'attachment' : 'inline';
		$do_cache = false === (!isset($this->_req->query->image) && getValidMimeImageType($file_ext) !== '');

		// Make sure the mime type warrants an inline display.
		if (isset($this->_req->query->image) && !empty($mime_type) && strpos($mime_type, 'image/') !== 0)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$mime_type = '';
		}
		// Does this have a mime type?
		elseif (empty($mime_type) || !(isset($this->_req->query->image) || !in_array($file_ext, array('jpg', 'gif', 'jpeg', 'x-ms-bmp', 'png', 'psd', 'tiff', 'iff'))))
		{
			$mime_type = '';
			if (isset($this->_req->query->image))]]></search>
			<add><![CDATA[			$mime_type = '';
		}
		// Does this have a mime type?
		elseif (empty($mime_type) || !(isset($this->_req->query->image) || getValidMimeImageType($file_ext) === ''))
		{
			$mime_type = '';
			if (isset($this->_req->query->image))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$eTag = '"' . substr($id_attach . $real_filename . filemtime($filename), 0, 64) . '"';
		$use_compression = !empty($modSettings['enableCompressedOutput']) && @filesize($filename) <= 4194304 && in_array($file_ext, array('txt', 'html', 'htm', 'js', 'doc', 'docx', 'rtf', 'css', 'php', 'log', 'xml', 'sql', 'c', 'java'));
		$do_cache = false === (!isset($this->_req->query->image) && in_array($file_ext, array('gif', 'jpg', 'bmp', 'png', 'jpeg', 'tiff')));

		$this->_send_headers($filename, $eTag, $mime_type, $use_compression, 'inline', $real_filename, $do_cache);]]></search>
			<add><![CDATA[		$eTag = '"' . substr($id_attach . $real_filename . filemtime($filename), 0, 64) . '"';
		$use_compression = !empty($modSettings['enableCompressedOutput']) && @filesize($filename) <= 4194304 && in_array($file_ext, array('txt', 'html', 'htm', 'js', 'doc', 'docx', 'rtf', 'css', 'php', 'log', 'xml', 'sql', 'c', 'java'));
		$do_cache = false === (!isset($this->_req->query->image) && getValidMimeImageType($file_ext) !== '');

		$this->_send_headers($filename, $eTag, $mime_type, $use_compression, 'inline', $real_filename, $do_cache);]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Display.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$message['subject'] = censor($message['subject']);

		// Run BBC interpreter on the message.
		$bbc_wrapper = \BBC\ParserWrapper::instance();
		$message['body'] = $bbc_wrapper->parseMessage($message['body'], $message['smileys_enabled']);
]]></search>
			<add><![CDATA[		$message['subject'] = censor($message['subject']);

		// Run BBC interpreter on the message.
		$context['id_msg'] = $message['id_msg'];
		$bbc_wrapper = \BBC\ParserWrapper::instance();
		$message['body'] = $bbc_wrapper->parseMessage($message['body'], $message['smileys_enabled']);
]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/Profile.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
				saveProfileFields($fields['fields'], $fields['hook']);
			}
			else
			{
				// @todo yes this is also ugly, but saveProfileChanges needs to be updated first
				$_POST = (array) $this->_req->post;]]></search>
			<add><![CDATA[
				saveProfileFields($fields['fields'], $fields['hook']);
			}
			elseif (empty($post_errors))
			{
				// @todo yes this is also ugly, but saveProfileChanges needs to be updated first
				$_POST = (array) $this->_req->post;]]></add>
		</operation>
	</file>
	<file name="CONTROLLERDIR/ProfileAccount.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		elseif (!allowedTo('profile_remove_any'))
			isAllowedTo('profile_remove_own');

		if (isset($this->_req->post->save))
		{
			return $this->action_deleteaccount2();
		}
		// Permissions for removing stuff...
		$context['can_delete_posts'] = !$context['user']['is_owner'] && allowedTo('moderate_forum');
]]></search>
			<add><![CDATA[		elseif (!allowedTo('profile_remove_any'))
			isAllowedTo('profile_remove_own');

		// Permissions for removing stuff...
		$context['can_delete_posts'] = !$context['user']['is_owner'] && allowedTo('moderate_forum');
]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/Load.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$array_form = json_decode($variable, true);

	// decoding failed, let's try with unserialize
	if ($array_form === null)
	{
		$array_form = Util::unserialize($variable);

		// If unserialize fails as well, let's just store an empty array
		if ($array_form === false)]]></search>
			<add><![CDATA[	$array_form = json_decode($variable, true);

	// decoding failed, let's try with unserialize
	if (!is_array($array_form))
	{
		try
		{
			$array_form = Util::unserialize($variable);
		}
		catch (\Exception $e)
		{
			$array_form = false;
		}

		// If unserialize fails as well, let's just store an empty array
		if ($array_form === false)]]></add>
		</operation>
	</file>
	<file name="SOURCEDIR/modules/Attachments/AttachmentsPostModule.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				{
					foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
					{
						if (strpos($attachID, 'post_tmp_' . $user_info['id']) !== false)
							@unlink($attachment['tmp_name']);
					}
					$this->_attach_errors->addError('temp_attachments_gone');]]></search>
			<add><![CDATA[				{
					foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
					{
						if (strpos($attachID, 'post_tmp_' . $user_info['id'] . '_') !== false)
						{
							@unlink($attachment['tmp_name']);
						}
					}
					$this->_attach_errors->addError('temp_attachments_gone');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						// See if any files still exist before showing the warning message and the files attached.
						foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
						{
							if (strpos($attachID, 'post_tmp_' . $user_info['id']) === false)
								continue;

							if (file_exists($attachment['tmp_name']))]]></search>
			<add><![CDATA[						// See if any files still exist before showing the warning message and the files attached.
						foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
						{
							if (strpos($attachID, 'post_tmp_' . $user_info['id'] . '_') === false)
								continue;

							if (file_exists($attachment['tmp_name']))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						// Compile a list of the files to show the user.
						$file_list = array();
						foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
							if (strpos($attachID, 'post_tmp_' . $user_info['id']) !== false)
								$file_list[] = $attachment['name'];

						$_SESSION['temp_attachments']['post']['files'] = $file_list;]]></search>
			<add><![CDATA[						// Compile a list of the files to show the user.
						$file_list = array();
						foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
							if (strpos($attachID, 'post_tmp_' . $user_info['id'] . '_') !== false)
								$file_list[] = $attachment['name'];

						$_SESSION['temp_attachments']['post']['files'] = $file_list;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						break;

					// Initial errors (such as missing directory), we can recover
					if ($attachID != 'initial_error' && strpos($attachID, 'post_tmp_' . $user_info['id']) === false)
						continue;

					if ($attachID === 'initial_error')]]></search>
			<add><![CDATA[						break;

					// Initial errors (such as missing directory), we can recover
					if ($attachID != 'initial_error' && strpos($attachID, 'post_tmp_' . $user_info['id'] . '_') === false)
						continue;

					if ($attachID === 'initial_error')]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// First check to see if they are trying to delete any current attachments.
		if (isset($_POST['attach_del']))
		{
			$keep_temp = array();
			$keep_ids = array();
			foreach ($_POST['attach_del'] as $dummy)
			{
				if (strpos($dummy, 'post_tmp_' . $user_info['id']) !== false)
					$keep_temp[] = $dummy;
				else
					$keep_ids[] = (int) $dummy;
			}

			if (isset($_SESSION['temp_attachments']))
			{
				foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
				{
					if ((isset($_SESSION['temp_attachments']['post']['files'], $attachment['name']) && in_array($attachment['name'], $_SESSION['temp_attachments']['post']['files'])) || in_array($attachID, $keep_temp) || strpos($attachID, 'post_tmp_' . $user_info['id']) === false)
						continue;

					unset($_SESSION['temp_attachments'][$attachID]);]]></search>
			<add><![CDATA[		// First check to see if they are trying to delete any current attachments.
		if (isset($_POST['attach_del']))
		{
			require_once(SUBSDIR . '/Attachments.subs.php');
			$keep_temp = array();
			$keep_ids = array();

			foreach ($_POST['attach_del'] as $dummy)
			{
				$attachID = getAttachmentIdFromPublic($dummy);

				if (strpos($attachID, 'post_tmp_' . $user_info['id'] . '_') !== false)
					$keep_temp[] = $attachID;
				else
					$keep_ids[] = (int) $attachID;
			}

			if (isset($_SESSION['temp_attachments']))
			{
				foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
				{
					if ((isset($_SESSION['temp_attachments']['post']['files'], $attachment['name']) && in_array($attachment['name'], $_SESSION['temp_attachments']['post']['files'])) || in_array($attachID, $keep_temp) || strpos($attachID, 'post_tmp_' . $user_info['id'] . '_') === false)
						continue;

					unset($_SESSION['temp_attachments'][$attachID]);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
			{
				if ($attachID !== 'initial_error' && strpos($attachID, 'post_tmp_' . $user_info['id']) === false)
					continue;

				// If there was an initial error just show that message.]]></search>
			<add><![CDATA[
			foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
			{
				if ($attachID !== 'initial_error' && strpos($attachID, 'post_tmp_' . $user_info['id'] . '_') === false)
					continue;

				// If there was an initial error just show that message.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						if (!empty($attachmentOptions['thumb']))
							$this->_saved_attach_id[] = $attachmentOptions['thumb'];

						$msgOptions['body'] = str_replace('[attach]' . $attachID . '[/attach]', '[attach]' . $attachmentOptions['id'] . '[/attach]', $msgOptions['body']);
					}
				}
				// We have errors on this file, build out the issues for display to the user
				else
					@unlink($attachment['tmp_name']);
			}
			unset($_SESSION['temp_attachments']);
		}]]></search>
			<add><![CDATA[						if (!empty($attachmentOptions['thumb']))
							$this->_saved_attach_id[] = $attachmentOptions['thumb'];

						$msgOptions['body'] = preg_replace('~\[attach(.*?)\]' . $attachment['public_attachid'] . '\[\/attach\]~', '[attach$1]' . $attachmentOptions['id'] . '[/attach]', $msgOptions['body']);
					}
				}
				// We have errors on this file, build out the issues for display to the user
				else
				{
					@unlink($attachment['tmp_name']);
				}
			}
			unset($_SESSION['temp_attachments']);
		}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Admin.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 * This file contains functions that are specifically done by administrators.
 *]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 * This file contains functions that are specifically done by administrators.
 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		readFileVersions($version_info, array('file_versions' => BOARDDIR), 'SSI.php');

	// Do the paid subscriptions handler?
	if (!empty($versionOptions['include_subscriptions']) && file_exists(BOARDDIR . '/subscriptions.php'))
		readFileVersions($version_info, array('file_versions' => BOARDDIR), 'subscriptions.php');

	// Load all the files in the sources and its sub directory's
	$directories = array(
		'file_versions' => SOURCEDIR,
		'file_versions_admin' => ADMINDIR,
		'file_versions_controllers' => CONTROLLERDIR,
		'file_versions_database' => SOURCEDIR . '/database',
		'file_versions_subs' => SUBSDIR,
		'file_versions_lib' => EXTDIR
	);
	readFileVersions($version_info, $directories, '.php');

	// Load all the files in the default template directory - and the current theme if applicable.
	$directories = array('default_template_versions' => $settings['default_theme_dir']);
	if ($settings['theme_id'] != 1)
		$directories += array('template_versions' => $settings['theme_dir']);
	readFileVersions($version_info, $directories, 'template.php');

	// Load up all the files in the default language directory and sort by language.
	// @todo merge this loop into readFileVersions]]></search>
			<add><![CDATA[		readFileVersions($version_info, array('file_versions' => BOARDDIR), 'SSI.php');

	// Do the paid subscriptions handler?
	if (!empty($versionOptions['include_subscriptions']))
	{
		foreach (array(
			'subscriptions.php',
			'bootstrap.php',
			'email_imap_cron.php',
			'emailpost.php',
			'emailtopic.php') as $file)
		{
			if (file_exists(BOARDDIR . '/' . $file))
			{
				readFileVersions($version_info, array('file_versions' => BOARDDIR), $file);
			}
		}
	}

	// Load all the files in the sources and its sub directories
	$directories = array(
		'file_versions' => SOURCEDIR,
		'file_versions_admin' => ADMINDIR,
		'file_versions_controllers' => CONTROLLERDIR,
		'file_versions_database' => SOURCEDIR . '/database',
		'file_versions_lib' => EXTDIR
	);
	readFileVersions($version_info, $directories, '.php');
	$directories = array(
		'file_versions_subs' => SUBSDIR,
		'file_versions_modules' => SOURCEDIR . '/modules',
	);
	readFileVersions($tmp_version_info, $directories, '.php', true);

	foreach ($tmp_version_info['file_versions_subs'] as $key => $val)
	{
		$version_info['file_versions_subs'][str_replace($directories['file_versions_subs'] . DIRECTORY_SEPARATOR, 'subs', $key)] = $val;
	}
	foreach ($tmp_version_info['file_versions_modules'] as $key => $val)
	{
		$version_info['file_versions_modules'][str_replace($directories['file_versions_modules'], 'modules', $key)] = $val;
	}
	// Load all the files in the default template directory - and the current theme if applicable.
	$directories = array('default_template_versions' => $settings['default_theme_dir']);
	if ($settings['theme_id'] != 1)
		$directories += array('template_versions' => $settings['theme_dir']);
	readFileVersions($version_info, $directories, 'template.php');
	readFileVersions($version_info, $directories, 'Theme.php');

	// Load up all the files in the default language directory and sort by language.
	// @todo merge this loop into readFileVersions]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * @param mixed[] $version_info -
 * @param string[] $directories - an array of directories to loop
 * @param string $pattern - how the name of the files should end
 */
function readFileVersions(&$version_info, $directories, $pattern)
{
	// The comment looks roughly like... that.
	$version_regex = '~\*\s@version\s+(.+)[\s]{2}~i';]]></search>
			<add><![CDATA[ * @param mixed[] $version_info -
 * @param string[] $directories - an array of directories to loop
 * @param string $pattern - how the name of the files should end
 * @param bool $recursive - if scan recursively the directories
 */
function readFileVersions(&$version_info, $directories, $pattern, $recursive = false)
{
	// The comment looks roughly like... that.
	$version_regex = '~\*\s@version\s+(.+)[\s]{2}~i';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	foreach ($directories as $type => $dirname)
	{
		$this_dir = dir($dirname);
		while ($entry = $this_dir->read())
		{
			if (substr($entry, $ext_offset) == $pattern && !is_dir($dirname . '/' . $entry))
			{
				if (!is_writable($dirname . '/' . $entry))
				{
					continue;
				}
				// Read the first 768 bytes from the file.... enough for the header.
				$header = file_get_contents($dirname . '/' . $entry, false, null, 0, 768);

				// Look for the version comment in the file header.
				if (preg_match($version_regex, $header, $match) == 1)
					$version_info[$type][$entry] = $match[1];
				// It wasn't found, but the file was... show a $unknown_version.
				else
					$version_info[$type][$entry] = $unknown_version;
			}
		}
		$this_dir->close();
	}
}
]]></search>
			<add><![CDATA[
	foreach ($directories as $type => $dirname)
	{
		if ($recursive === true)
		{
			$iter = new RecursiveIteratorIterator(
				new RecursiveDirectoryIterator($dirname, RecursiveDirectoryIterator::SKIP_DOTS),
				RecursiveIteratorIterator::CHILD_FIRST,
				RecursiveIteratorIterator::CATCH_GET_CHILD // Ignore "Permission denied"
			);
		}
		else
		{
			$iter = new IteratorIterator(new DirectoryIterator($dirname));
		}

		foreach ($iter as $dir)
		{
			if ($dir->isDir())
			{
				continue;
			}
			$entry = $dir->getFilename();

			if (substr($entry, $ext_offset) == $pattern)
			{
				if ($dir->isWritable() === false)
				{
					continue;
				}
				// Read the first 768 bytes from the file.... enough for the header.
				$header = file_get_contents($dir->getPathname(), false, null, 0, 768);

				if ($recursive === true)
				{
					$entry_key = $dir->getPathname();
				}
				else
				{
					$entry_key = $entry;
				}

				// Look for the version comment in the file header.
				if (preg_match($version_regex, $header, $match) == 1)
					$version_info[$type][$entry_key] = $match[1];
				// It wasn't found, but the file was... show a $unknown_version.
				else
					$version_info[$type][$entry_key] = $unknown_version;
			}
		}
	}
}
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Attachments.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
			{
				if (strpos($attachID, 'post_tmp_' . $user_info['id']) !== false)
					@unlink($attachment['tmp_name']);
			}
]]></search>
			<add><![CDATA[		{
			foreach ($_SESSION['temp_attachments'] as $attachID => $attachment)
			{
				if (strpos($attachID, 'post_tmp_' . $user_info['id'] . '_') !== false)
					@unlink($attachment['tmp_name']);
			}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'name' => htmlspecialchars(basename($_FILES['attachment']['name'][$n]), ENT_COMPAT, 'UTF-8'),
				'tmp_name' => $destName,
				'attachid' => $attachID,
				'size' => $_FILES['attachment']['size'][$n],
				'type' => $_FILES['attachment']['type'][$n],
				'id_folder' => $modSettings['currentAttachmentUploadDir'],]]></search>
			<add><![CDATA[				'name' => htmlspecialchars(basename($_FILES['attachment']['name'][$n]), ENT_COMPAT, 'UTF-8'),
				'tmp_name' => $destName,
				'attachid' => $attachID,
				'public_attachid' => 'post_tmp_' . $user_info['id'] . '_' . md5(mt_rand()),
				'size' => $_FILES['attachment']['size'][$n],
				'type' => $_FILES['attachment']['type'][$n],
				'id_folder' => $modSettings['currentAttachmentUploadDir'],]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[{
	global $modSettings, $user_info;

	// The common name form is "post_tmp_123_0ac9a0b1fc18604e8704084656ed5f09"
	$id_attach = preg_replace('~[^0-9a-zA-Z_]~', '', $attach_id);

	// Permissions: only temporary attachments
	if (substr($id_attach, 0, 8) !== 'post_tmp')]]></search>
			<add><![CDATA[{
	global $modSettings, $user_info;

	$attach_real_id = null;

	if (empty($_SESSION['temp_attachments']))
	{
		throw new \Exception('no_access');
	}

	foreach ($_SESSION['temp_attachments'] as $attachID => $val)
	{
		if ($val['public_attachid'] === $attach_id)
		{
			$attach_real_id = $attachID;
			break;
		}
	}

	if (empty($attach_real_id))
	{
		throw new \Exception('no_access');
	}

	// The common name form is "post_tmp_123_0ac9a0b1fc18604e8704084656ed5f09"
	$id_attach = preg_replace('~[^0-9a-zA-Z_]~', '', $attach_real_id);

	// Permissions: only temporary attachments
	if (substr($id_attach, 0, 8) !== 'post_tmp')]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	$attach_dir = $dirs[$modSettings['currentAttachmentUploadDir']];

	if (file_exists($attach_dir . '/' . $attach_id) && isset($_SESSION['temp_attachments'][$attach_id]))
	{
		return $_SESSION['temp_attachments'][$attach_id];
	}

	throw new \Exception('no_access');]]></search>
			<add><![CDATA[
	$attach_dir = $dirs[$modSettings['currentAttachmentUploadDir']];

	if (file_exists($attach_dir . '/' . $attach_real_id) && isset($_SESSION['temp_attachments'][$attach_real_id]))
	{
		return $_SESSION['temp_attachments'][$attach_real_id];
	}

	throw new \Exception('no_access');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!empty($error))
		throw new Elk_Exception('attach_check_nag', 'debug', array($error));

	// These are the only valid image types.
	$validImageTypes = array(
		1 => 'gif',
		2 => 'jpeg',
		3 => 'png',
		5 => 'psd',
		6 => 'bmp',
		7 => 'tiff',
		8 => 'tiff',
		9 => 'jpeg',
		14 => 'iff'
	);

	// Just in case this slipped by the first checks, we stop it here and now
	if ($_SESSION['temp_attachments'][$attachID]['size'] == 0)
	{]]></search>
			<add><![CDATA[	if (!empty($error))
		throw new Elk_Exception('attach_check_nag', 'debug', array($error));

	// Just in case this slipped by the first checks, we stop it here and now
	if ($_SESSION['temp_attachments'][$attachID]['size'] == 0)
	{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	// First, the dreaded security check. Sorry folks, but this should't be avoided
	$size = elk_getimagesize($_SESSION['temp_attachments'][$attachID]['tmp_name']);

	if (isset($validImageTypes[$size[2]]))
	{
		require_once(SUBSDIR . '/Graphics.subs.php');
		if (!checkImageContents($_SESSION['temp_attachments'][$attachID]['tmp_name'], !empty($modSettings['attachment_image_paranoid'])))]]></search>
			<add><![CDATA[
	// First, the dreaded security check. Sorry folks, but this should't be avoided
	$size = elk_getimagesize($_SESSION['temp_attachments'][$attachID]['tmp_name']);
	$valid_mime = getValidMimeImageType($size[2]);

	if ($valid_mime !== '')
	{
		require_once(SUBSDIR . '/Graphics.subs.php');
		if (!checkImageContents($_SESSION['temp_attachments'][$attachID]['tmp_name'], !empty($modSettings['attachment_image_paranoid'])))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			if (!(empty($size)) && ($size[2] !== $old_format))
			{
				if (isset($validImageTypes[$size[2]]))
				{
					$_SESSION['temp_attachments'][$attachID]['type'] = 'image/' . $validImageTypes[$size[2]];
				}
			}
		}]]></search>
			<add><![CDATA[
			if (!(empty($size)) && ($size[2] !== $old_format))
			{
				$valid_mime = getValidMimeImageType($size[2]);
				if ($valid_mime !== '')
				{
					$_SESSION['temp_attachments'][$attachID]['type'] = $valid_mime;
				}
			}
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	require_once(SUBSDIR . '/Graphics.subs.php');

	// These are the only valid image types.
	$validImageTypes = array(
		1 => 'gif',
		2 => 'jpeg',
		3 => 'png',
		5 => 'psd',
		6 => 'bmp',
		7 => 'tiff',
		8 => 'tiff',
		9 => 'jpeg',
		14 => 'iff'
	);

	// If this is an image we need to set a few additional parameters.
	$size = elk_getimagesize($attachmentOptions['tmp_name']);
	list ($attachmentOptions['width'], $attachmentOptions['height']) = $size;]]></search>
			<add><![CDATA[
	require_once(SUBSDIR . '/Graphics.subs.php');

	// If this is an image we need to set a few additional parameters.
	$size = elk_getimagesize($attachmentOptions['tmp_name']);
	list ($attachmentOptions['width'], $attachmentOptions['height']) = $size;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		// Got a proper mime type?
		if (!empty($size['mime']))
			$attachmentOptions['mime_type'] = $size['mime'];
		// Otherwise a valid one?
		elseif (isset($validImageTypes[$size[2]]))
			$attachmentOptions['mime_type'] = 'image/' . $validImageTypes[$size[2]];
	}

	// It is possible we might have a MIME type that isn't actually an image but still have a size.]]></search>
			<add><![CDATA[	{
		// Got a proper mime type?
		if (!empty($size['mime']))
		{
			$attachmentOptions['mime_type'] = $size['mime'];
		}
		// Otherwise a valid one?
		else
		{
			$attachmentOptions['mime_type'] = getValidMimeImageType($size[2]);
		}
	}

	// It is possible we might have a MIME type that isn't actually an image but still have a size.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			list ($thumb_width, $thumb_height) = $size;

			if (!empty($size['mime']))
				$thumb_mime = $size['mime'];
			elseif (isset($validImageTypes[$size[2]]))
				$thumb_mime = 'image/' . $validImageTypes[$size[2]];
			// Lord only knows how this happened...
			else
				$thumb_mime = '';

			$thumb_filename = $attachmentOptions['name'] . '_thumb';
			$thumb_size = filesize($attachmentOptions['destination'] . '_thumb');]]></search>
			<add><![CDATA[			list ($thumb_width, $thumb_height) = $size;

			if (!empty($size['mime']))
			{
				$thumb_mime = $size['mime'];
			}
			else
			{
				$thumb_mime = getValidMimeImageType($size[2]);
			}

			$thumb_filename = $attachmentOptions['name'] . '_thumb';
			$thumb_size = filesize($attachmentOptions['destination'] . '_thumb');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	$attachmentData = array();
	if ($db->num_rows($request) != 0)
		$attachmentData = $db->fetch_row($request);
	$db->free_result($request);

	return $attachmentData;]]></search>
			<add><![CDATA[
	$attachmentData = array();
	if ($db->num_rows($request) != 0)
	{
		$attachmentData = $db->fetch_row($request);
	}
	$db->free_result($request);

	return $attachmentData;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// Make sure this attachment is on this board.
	$request = $db->query('', '
		SELECT th.id_folder, th.filename, th.file_hash, th.fileext, th.id_attach, th.attachment_type, th.mime_type,
		 	a.approved, m.id_member
		FROM {db_prefix}attachments AS a
			INNER JOIN {db_prefix}messages AS m ON (m.id_msg = a.id_msg AND m.id_topic = {int:current_topic})]]></search>
			<add><![CDATA[	// Make sure this attachment is on this board.
	$request = $db->query('', '
		SELECT th.id_folder, th.filename, th.file_hash, th.fileext, th.id_attach, th.attachment_type, th.mime_type,
			a.id_folder AS attach_id_folder, a.filename AS attach_filename,
			a.file_hash AS attach_file_hash, a.fileext AS attach_fileext,
			a.id_attach AS attach_id_attach, a.attachment_type AS attach_attachment_type,
			a.mime_type AS attach_mime_type,
		 	a.approved, m.id_member
		FROM {db_prefix}attachments AS a
			INNER JOIN {db_prefix}messages AS m ON (m.id_msg = a.id_msg AND m.id_topic = {int:current_topic})]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$attachmentData = array();
	if ($db->num_rows($request) != 0)
	{
		$attachmentData = $db->fetch_row($request);
	}
	$db->free_result($request);
]]></search>
			<add><![CDATA[	$attachmentData = array();
	if ($db->num_rows($request) != 0)
	{
		$fetch = $db->fetch_assoc($request);

		// If there is a hash then the thumbnail exists
		if (!empty($fetch['file_hash']))
		{
			$attachmentData = array(
				$fetch['id_folder'],
				$fetch['filename'],
				$fetch['file_hash'],
				$fetch['fileext'],
				$fetch['id_attach'],
				$fetch['attachment_type'],
				$fetch['mime_type'],
				$fetch['approved'],
				$fetch['id_member'],
			);
		}
		// otherwise $modSettings['attachmentThumbnails'] may be (or was) off, so original file
		elseif (getValidMimeImageType($fetch['attach_mime_type']) !== '')
		{
			$attachmentData = array(
				$fetch['attach_id_folder'],
				$fetch['attach_filename'],
				$fetch['attach_file_hash'],
				$fetch['attach_fileext'],
				$fetch['attach_id_attach'],
				$fetch['attach_attachment_type'],
				$fetch['attach_mime_type'],
				$fetch['approved'],
				$fetch['id_member'],
			);
		}
	}
	$db->free_result($request);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (rename($tempName, $destName))
		{
			list ($width, $height) = elk_getimagesize($destName);
			$mime_type = 'image/' . $ext;

			// Write filesize in the database.
			$db->query('', ']]></search>
			<add><![CDATA[		if (rename($tempName, $destName))
		{
			list ($width, $height) = elk_getimagesize($destName);
			$mime_type = getValidMimeImageType($ext);

			// Write filesize in the database.
			$db->query('', ']]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$extension = substr(strrchr($line, '.'), 1);

		// Make sure it is an image.
		if (strcasecmp($extension, 'gif') != 0 && strcasecmp($extension, 'jpg') != 0 && strcasecmp($extension, 'jpeg') != 0 && strcasecmp($extension, 'png') != 0 && strcasecmp($extension, 'bmp') != 0)
			continue;

		$result[] = array(]]></search>
			<add><![CDATA[		$extension = substr(strrchr($line, '.'), 1);

		// Make sure it is an image.
		if (getValidMimeImageType($extension) === '')
			continue;

		$result[] = array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		list ($attachment['thumb_width'], $attachment['thumb_height']) = $size;
		$thumb_size = filesize($filename . '_thumb');

		// These are the only valid image types.
		$validImageTypes = array(1 => 'gif', 2 => 'jpeg', 3 => 'png', 5 => 'psd', 6 => 'bmp', 7 => 'tiff', 8 => 'tiff', 9 => 'jpeg', 14 => 'iff');

		// What about the extension?
		$thumb_ext = isset($validImageTypes[$size[2]]) ? $validImageTypes[$size[2]] : '';

		// Figure out the mime type.
		if (!empty($size['mime']))
			$thumb_mime = $size['mime'];
		else
			$thumb_mime = 'image/' . $thumb_ext;

		$thumb_filename = $filename . '_thumb';
		$thumb_hash = getAttachmentFilename($thumb_filename, 0, null, true);]]></search>
			<add><![CDATA[		list ($attachment['thumb_width'], $attachment['thumb_height']) = $size;
		$thumb_size = filesize($filename . '_thumb');

		// Figure out the mime type.
		if (!empty($size['mime']))
		{
			$thumb_mime = $size['mime'];
		}
		else
		{
			$thumb_mime = getValidMimeImageType($size[2]);
		}
		$thumb_ext = substr($thumb_mime, strpos($thumb_mime, '/') + 1);

		$thumb_filename = $filename . '_thumb';
		$thumb_hash = getAttachmentFilename($thumb_filename, 0, null, true);]]></add>
		</operation>
		<operation>
			<search position="end" />
			<add><![CDATA[

/**
 * Finds in $_SESSION['temp_attachments'] an attachment id from its public id
 *
 * @param string $public_attachid
 *
 * @return string
 */
function getAttachmentIdFromPublic($public_attachid)
{
	if (empty($_SESSION['temp_attachments']))
	{
		return $public_attachid;
	}

	foreach ($_SESSION['temp_attachments'] as $key => $val)
	{
		if (isset($val['public_attachid']) && $val['public_attachid'] === $public_attachid)
		{
			return $key;
		}
	}
	return $public_attachid;
}

/**
 * From either a mime type, an extension or an IMAGETYPE_* constant
 * returns a valid image mime type
 *
 * @param string $mime
 *
 * @return string
 */
function getValidMimeImageType($mime)
{
	// These are the only valid image types.
	static $validImageTypes = array(
		-1 => 'jpg',
		// Starting from here are the IMAGETYPE_* constants
		1 => 'gif',
		2 => 'jpeg',
		3 => 'png',
		5 => 'psd',
		6 => 'bmp',
		7 => 'tiff',
		8 => 'tiff',
		9 => 'jpeg',
		14 => 'iff'
	);

	if ((int) $mime > 0)
	{
		$ext = isset($validImageTypes[$mime]) ? $validImageTypes[$mime] : '';
	}
	elseif (strpos($mime, '/'))
	{
		$ext = substr($mime, strpos($mime, '/') + 1);
	}
	else
	{
		$ext = $mime;
	}
	$ext = strtolower($ext);

	foreach ($validImageTypes as $valid_ext)
	{
		if ($valid_ext === $ext)
		{
			return 'image/' . $ext;
		}
	}

	return '';
}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/BBC/Codes.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	/**
	 * Set the tags that will be parsed
	 *
	 * @param $parse_tags]]></search>
			<add><![CDATA[	}

	/**
	 * Restore a disabled tag
	 *
	 * @param $tag
	 *
	 * @return bool
	 */
	public function restore($tag)
	{
		if (isset($this->disabled[$tag]))
		{
			unset($this->disabled[$tag]);
		}

		return !isset($this->disabled[$tag]);
	}

	/**
	 * Set the tags that will be parsed
	 *
	 * @param $parse_tags]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/BBC/HtmlParser.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$diff = substr_count($data, '&lt;' . $tag . '&gt;') - substr_count($data, '&lt;/' . $tag . '&gt;');
			$data = strtr($data, array('&lt;' . $tag . '&gt;' => '<' . $tag . '>', '&lt;/' . $tag . '&gt;' => '</' . $tag . '>'));

			if ($diff > 0)
			{
				$data = substr($data, 0, -1) . str_repeat('</' . $tag . '>', $diff) . substr($data, -1);
			}
		}
]]></search>
			<add><![CDATA[			$diff = substr_count($data, '&lt;' . $tag . '&gt;') - substr_count($data, '&lt;/' . $tag . '&gt;');
			$data = strtr($data, array('&lt;' . $tag . '&gt;' => '<' . $tag . '>', '&lt;/' . $tag . '&gt;' => '</' . $tag . '>'));

			// Stray open tags, close them all!
			if ($diff > 0)
			{
				$data = $data . str_repeat('</' . $tag . '>', $diff);
			}
		}
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/BBC/ParserWrapper.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			$additional_bbc = array();
			call_integration_hook('integrate_additional_bbc', array(&$additional_bbc));
			$this->codes = new Codes($additional_bbc, $this->disabled);
		}

		return $this->codes;]]></search>
			<add><![CDATA[		{
			$additional_bbc = array();
			call_integration_hook('integrate_additional_bbc', array(&$additional_bbc));
			$this->codes = new Codes($additional_bbc, array_keys($this->disabled));
		}

		return $this->codes;]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/BBC/PreparseCode.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:    BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:    BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Font tags with multiple fonts (copy&paste in the WYSIWYG by some browsers).
		$this->message = preg_replace_callback('~\[font=([^\]]*)\](.*?(?:\[/font\]))~s', array($this, '_preparsecode_font_callback'), $this->message);

		// Put it back together!
		$this->_restoreCodeBlocks();
]]></search>
			<add><![CDATA[		// Font tags with multiple fonts (copy&paste in the WYSIWYG by some browsers).
		$this->message = preg_replace_callback('~\[font=([^\]]*)\](.*?(?:\[/font\]))~s', array($this, '_preparsecode_font_callback'), $this->message);

		// Allow integration to do further processing on protected code block message
		call_integration_hook('integrate_preparse_tokenized_code', array(&$this->message, $previewing, $this->code_blocks));

		// Put it back together!
		$this->_restoreCodeBlocks();
]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Emailpost.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	foreach ($attachments as $attachID => $attachment)
	{
		// If there were any errors we just skip that file
		if (($attachID != 'initial_error' && strpos($attachID, 'post_tmp_' . $pbe['profile']['id_member']) === false) || ($attachID == 'initial_error' || !empty($attachment['errors'])))
		{
			@unlink($attachment['tmp_name']);
			continue;]]></search>
			<add><![CDATA[	foreach ($attachments as $attachID => $attachment)
	{
		// If there were any errors we just skip that file
		if (($attachID != 'initial_error' && strpos($attachID, 'post_tmp_' . $pbe['profile']['id_member'] . '_') === false) || ($attachID == 'initial_error' || !empty($attachment['errors'])))
		{
			@unlink($attachment['tmp_name']);
			continue;]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Errors/ErrorHandler.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Showing the errors, lets make it look decent
		if ($db_show_debug === true && allowedTo('admin_forum'))
		{
			$msg = 'PHP Fatal error:  Uncaught exception \'%s\' with message \'%s\' in %s:%s<br />Stack trace:<br />%s<br />  thrown in %s on line %s';

			// write tracelines into main template
			return sprintf(
				$msg,
				get_class($exception),
				$exception->getMessage(),
				$exception->getFile(),]]></search>
			<add><![CDATA[		// Showing the errors, lets make it look decent
		if ($db_show_debug === true && allowedTo('admin_forum'))
		{
			$msg = '<strong>%s</strong><br />PHP Fatal error:  Uncaught exception \'%s\' with message \'%s\' in %s:%s<br />Stack trace:<br />%s<br />  thrown in %s on line %s';

			// write tracelines into main template
			return sprintf(
				$msg,
				$this->error_string,
				get_class($exception),
				$exception->getMessage(),
				$exception->getFile(),]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Graphics.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * @param int $max_width The maximum allowed width
 * @param int $max_height The maximum allowed height
 * @param int $preferred_format Used by Imagick/resizeImage
 * @param bool $strip Allow IM to remove exif data as GD always will
 *
 * @return boolean Whether the thumbnail creation was successful.
 */
function resizeImageFile($source, $destination, $max_width, $max_height, $preferred_format = 0, $strip = false)
{
	// Nothing to do without GD or IM
	if (!checkGD() && !checkImagick())
		return false;

	if (!file_exists($source))
	{
		return false;
	}]]></search>
			<add><![CDATA[ * @param int $max_width The maximum allowed width
 * @param int $max_height The maximum allowed height
 * @param int $preferred_format Used by Imagick/resizeImage
 * @param bool $force_resize Always resize the image (force scale up)
 * @param bool $strip Allow IM to remove exif data as GD always will
 *
 * @return boolean Whether the thumbnail creation was successful.
 */
function resizeImageFile($source, $destination, $max_width, $max_height, $preferred_format = 0, $strip = false, $force_resize = true)
{
	// Nothing to do without GD or IM
	if (!checkGD() && !checkImagick())
		return false;

	if (!file_exists($source) && substr($source, 0, 7) !== 'http://' && substr($source, 0, 8) !== 'https://')
	{
		return false;
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// A known and supported format?
	if (checkImagick() && isset($default_formats[$sizes[2]]))
	{
		return resizeImage(null, $destination, null, null, $max_width, $max_height, true, $preferred_format, $strip);
	}
	elseif (checkGD() && isset($default_formats[$sizes[2]]) && function_exists('imagecreatefrom' . $default_formats[$sizes[2]]))
	{
		$imagecreatefrom = 'imagecreatefrom' . $default_formats[$sizes[2]];
		if ($src_img = @$imagecreatefrom($destination))
		{
			return resizeImage($src_img, $destination, imagesx($src_img), imagesy($src_img), $max_width === null ? imagesx($src_img) : $max_width, $max_height === null ? imagesy($src_img) : $max_height, true, $preferred_format);
		}
	}
]]></search>
			<add><![CDATA[	// A known and supported format?
	if (checkImagick() && isset($default_formats[$sizes[2]]))
	{
		return resizeImage(null, $destination, null, null, $max_width, $max_height, $force_resize, $preferred_format, $strip);
	}
	elseif (checkGD() && isset($default_formats[$sizes[2]]) && function_exists('imagecreatefrom' . $default_formats[$sizes[2]]))
	{
		$imagecreatefrom = 'imagecreatefrom' . $default_formats[$sizes[2]];
		if ($src_img = @$imagecreatefrom($destination))
		{
			return resizeImage($src_img, $destination, imagesx($src_img), imagesy($src_img), $max_width === null ? imagesx($src_img) : $max_width, $max_height === null ? imagesy($src_img) : $max_height, $force_resize, $preferred_format, $strip);
		}
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$src_height = empty($src_height) ? $imagick->getImageHeight() : $src_height;

			// The behavior of bestfit changed in Imagick 3.0.0 and it will now scale up, we prevent that
			$dest_width = empty($max_width) ? $src_width : min($max_width, $src_width);
			$dest_height = empty($max_height) ? $src_height : min($max_height, $src_height);

			// Set jpeg image quality to 80
			if ($default_formats[$preferred_format] === 'jpeg')]]></search>
			<add><![CDATA[			$src_height = empty($src_height) ? $imagick->getImageHeight() : $src_height;

			// The behavior of bestfit changed in Imagick 3.0.0 and it will now scale up, we prevent that
			$dest_width = empty($max_width) ? $src_width : ($force_resize ? $max_width : min($max_width, $src_width));
			$dest_height = empty($max_height) ? $src_height : ($force_resize ? $max_height :  min($max_height, $src_height));

			// Set jpeg image quality to 80
			if ($default_formats[$preferred_format] === 'jpeg')]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Ila.integrate.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		return array(
			array('integrate_additional_bbc', 'Ila_Integrate::integrate_additional_bbc'),
			array('integrate_before_prepare_display_context', 'Ila_Integrate::integrate_before_prepare_display_context'),
		);
	}
]]></search>
			<add><![CDATA[		return array(
			array('integrate_additional_bbc', 'Ila_Integrate::integrate_additional_bbc'),
			array('integrate_before_prepare_display_context', 'Ila_Integrate::integrate_before_prepare_display_context'),
			array('integrate_post_bbc_parser', 'Ila_Integrate::integrate_post_parser')
		);
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	/**
	 * - Adds in new BBC code tags for use with inline images
	 *
	 * @param mixed[] $additional_bbc]]></search>
			<add><![CDATA[	}

	/**
	 * After parse is done, we need to sub in the message id for proper lightbox navigation
	 *
	 * @param string $message
	 */
	public static function integrate_post_parser(&$message)
	{
		global $context;

		$lighbox_message = 'data-lightboxmessage="' . (!empty($context['id_msg']) ? $context['id_msg'] : '0') . '"';
		$message = str_replace('data-lightboxmessage="0"', $lighbox_message, $message);
	}

	/**
	 * - Adds in new BBC code tags for use with inline images
	 *
	 * @param mixed[] $additional_bbc]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'php' => 1,
		);

		// Want to see them in quotes eh?
		if (!empty($modSettings['attachment_inline_quotes']))
		{]]></search>
			<add><![CDATA[			'php' => 1,
		);

		// Why enable it to disable the tags, oh well
		$disabledBBC = empty($modSettings['disabledBBC']) ? array() : explode(',', $modSettings['disabledBBC']);
		$disableAttach = in_array('attach', $disabledBBC);

		// Want to see them in quotes eh?
		if (!empty($modSettings['attachment_inline_quotes']))
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						\BBC\Codes::PARAM_ATTR_MATCH => '(right|left|center)',
					),
				),
				\BBC\Codes::ATTR_CONTENT => '<a id="link_$1" data-lightboximage="$1" href="' . $scripturl . '?action=dlattach;attach=$1;image"><img src="' . $scripturl . '?action=dlattach;attach=$1{width}{height}" alt="" class="bbc_img {align}" /></a>',
				\BBC\Codes::ATTR_VALIDATE => self::validate_options(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,]]></search>
			<add><![CDATA[						\BBC\Codes::PARAM_ATTR_MATCH => '(right|left|center)',
					),
				),
				\BBC\Codes::ATTR_CONTENT => '<a id="link_$1" data-lightboximage="$1" data-lightboxmessage="0" href="' . $scripturl . '?action=dlattach;attach=$1;image"><img src="' . $scripturl . '?action=dlattach;attach=$1{width}{height}" alt="" class="bbc_img {align}" /></a>',
				\BBC\Codes::ATTR_VALIDATE => $disableAttach ? null : self::validate_options(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						\BBC\Codes::PARAM_ATTR_MATCH => '(right|left|center)',
					),
				),
				\BBC\Codes::ATTR_CONTENT => '<a id="link_$1" data-lightboximage="$1" href="' . $scripturl . '?action=dlattach;attach=$1;image"><img src="' . $scripturl . '?action=dlattach;attach=$1{height}{width}" alt="" class="bbc_img {align}" /></a>',
				\BBC\Codes::ATTR_VALIDATE => self::validate_options(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,]]></search>
			<add><![CDATA[						\BBC\Codes::PARAM_ATTR_MATCH => '(right|left|center)',
					),
				),
				\BBC\Codes::ATTR_CONTENT => '<a id="link_$1" data-lightboximage="$1" data-lightboxmessage="0" href="' . $scripturl . '?action=dlattach;attach=$1;image"><img src="' . $scripturl . '?action=dlattach;attach=$1{height}{width}" alt="" class="bbc_img {align}" /></a>',
				\BBC\Codes::ATTR_VALIDATE => $disableAttach ? null : self::validate_options(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						\BBC\Codes::PARAM_ATTR_MATCH => '(right|left|center)',
					),
				),
				\BBC\Codes::ATTR_CONTENT => '<a id="link_$1" data-lightboximage="$1" href="' . $scripturl . '?action=dlattach;attach=$1;image"><img src="' . $scripturl . '?action=dlattach;attach=$1;thumb" alt="" class="bbc_img {align}" /></a>',
				\BBC\Codes::ATTR_VALIDATE => self::validate_options(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,]]></search>
			<add><![CDATA[						\BBC\Codes::PARAM_ATTR_MATCH => '(right|left|center)',
					),
				),
				\BBC\Codes::ATTR_CONTENT => '<a id="link_$1" data-lightboximage="$1" data-lightboxmessage="0" href="' . $scripturl . '?action=dlattach;attach=$1;image"><img src="' . $scripturl . '?action=dlattach;attach=$1;thumb" alt="" class="bbc_img {align}" /></a>',
				\BBC\Codes::ATTR_VALIDATE => $disableAttach ? null : self::validate_options(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				\BBC\Codes::ATTR_TAG => 'attach',
				\BBC\Codes::ATTR_TYPE => \BBC\Codes::TYPE_UNPARSED_CONTENT,
				\BBC\Codes::ATTR_CONTENT => '$1',
				\BBC\Codes::ATTR_VALIDATE => self::validate_plain(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,]]></search>
			<add><![CDATA[				\BBC\Codes::ATTR_TAG => 'attach',
				\BBC\Codes::ATTR_TYPE => \BBC\Codes::TYPE_UNPARSED_CONTENT,
				\BBC\Codes::ATTR_CONTENT => '$1',
				\BBC\Codes::ATTR_VALIDATE => $disableAttach ? null : self::validate_plain(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				\BBC\Codes::ATTR_TYPE => \BBC\Codes::TYPE_UNPARSED_CONTENT,
				\BBC\Codes::ATTR_CONTENT => '$1',
				\BBC\Codes::ATTR_VALIDATE => self::validate_url(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => array('code' => 1, 'nobbc' => 1, 'php' => 1),
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,
				\BBC\Codes::ATTR_AUTOLINK => false,]]></search>
			<add><![CDATA[				\BBC\Codes::ATTR_TYPE => \BBC\Codes::TYPE_UNPARSED_CONTENT,
				\BBC\Codes::ATTR_CONTENT => '$1',
				\BBC\Codes::ATTR_VALIDATE => self::validate_url(),
				\BBC\Codes::ATTR_DISALLOW_PARENTS => $disallow,
				\BBC\Codes::ATTR_DISABLED_CONTENT => '<a href="' . $scripturl . '?action=dlattach;attach=$1">(' . $scripturl . '?action=dlattach;attach=$1)</a>',
				\BBC\Codes::ATTR_BLOCK_LEVEL => false,
				\BBC\Codes::ATTR_AUTOLINK => false,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public static function validate_url()
	{
		global $user_info, $scripturl;

		return function (&$tag, &$data, $disabled) use ($user_info, $scripturl)
		{
			global $context;

			$num = $data;
			$attachment = false;

			// Not a preview, then sanitize the attach id and determine the details
			if (strpos($data, 'post_tmp_' . $user_info['id']) === false)
			{
				require_once(SUBSDIR . '/Attachments.subs.php');
]]></search>
			<add><![CDATA[	 */
	public static function validate_url()
	{
		global $user_info, $scripturl, $context;

		return function (&$tag, &$data, $disabled) use ($user_info, $scripturl, &$context)
		{
			if (isset($disabled['attach']))
			{
				return $data;
			}

			$num = $data;
			$attachment = false;

			// Not a preview, then sanitize the attach id and determine the details
			if (strpos($data, 'post_tmp_' . $user_info['id'] . '_') === false)
			{
				require_once(SUBSDIR . '/Attachments.subs.php');
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public static function validate_plain()
	{
		global $user_info, $scripturl;

		return function (&$tag, &$data, $disabled) use ($user_info, $scripturl)
		{
			global $context;

			$num = $data;
			$is_image = array();
			$preview = strpos($data, 'post_tmp_' . $user_info['id']);

			// Not a preview, then sanitize the attach id and determine the actual type
			if ($preview === false)]]></search>
			<add><![CDATA[	 */
	public static function validate_plain()
	{
		global $user_info, $scripturl, $context;

		return function (&$tag, &$data, $disabled) use ($user_info, $scripturl, &$context)
		{
			if (isset($disabled['attach']))
			{
				return $data;
			}

			$num = $data;
			$is_image = array();
			$preview = strpos($data, 'post_tmp_' . $user_info['id'] . '_');

			// Not a preview, then sanitize the attach id and determine the actual type
			if ($preview === false)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// An image will get the light box treatment
			if (!empty($is_image['is_image']) || $preview !== false)
			{
				$data = '<a id="link_' . $num . '" data-lightboximage="' . $num . '" href="' . $scripturl . '?action=dlattach;attach=' . $num . ';image' . '"><img src="' . $scripturl . '?action=dlattach;attach=' . $num . ';thumb" alt="" class="bbc_img" /></a>';
			}
			else
			{]]></search>
			<add><![CDATA[			// An image will get the light box treatment
			if (!empty($is_image['is_image']) || $preview !== false)
			{
				$data = '<a id="link_' . $num . '" data-lightboximage="' . $num . '" data-lightboxmessage="0" href="' . $scripturl . '?action=dlattach;attach=' . $num . ';image' . '"><img src="' . $scripturl . '?action=dlattach;attach=' . $num . ';thumb" alt="" class="bbc_img" /></a>';
			}
			else
			{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public static function validate_options()
	{
		global $user_info;

		return function (&$tag, &$data, $disabled) use ($user_info)
		{
			global $context;

			// Not a preview, then sanitize the attach id
			if (strpos($data, 'post_tmp_' . $user_info['id']) === false)
			{
				$data = (int) $data;
			}]]></search>
			<add><![CDATA[	 */
	public static function validate_options()
	{
		global $user_info, $scripturl, $context;

		return function (&$tag, &$data, $disabled) use ($user_info, $scripturl, &$context)
		{
			// Not a preview, then sanitize the attach id
			if (strpos($data, 'post_tmp_' . $user_info['id'] . '_') === false)
			{
				$data = (int) $data;
			}]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/ManageAttachments.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	// Count the files with a glob, easier and less time consuming
	$glob = new GlobIterator($dir . '/*.elk', FilesystemIterator::SKIP_DOTS);
	$num_files = $glob->count();

	if ($num_files < $expected_files)
		return array('files_missing', true, $num_files);]]></search>
			<add><![CDATA[
	// Count the files with a glob, easier and less time consuming
	$glob = new GlobIterator($dir . '/*.elk', FilesystemIterator::SKIP_DOTS);
	try
	{
		$num_files = $glob->count();
	}
	catch (\LogicException $e)
	{
		$num_files = count(iterator_to_array($glob));
	}

	if ($num_files < $expected_files)
		return array('files_missing', true, $num_files);]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/ManageFeatures.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	$field = array();

	$request = $db->query('', '
		SELECT
			id_field, col_name, field_name, field_desc, field_type, field_length, field_options,
			show_reg, show_display, show_memberlist, show_profile, private, active, default_value, can_search,
			bbc, mask, enclose, placement, vieworder, rows, cols
		FROM {db_prefix}custom_fields
		WHERE id_field = {int:current_field}',
		array(]]></search>
			<add><![CDATA[
	$field = array();

	// The fully-qualified name for rows is here because it's a reserved word in Mariadb 10.2.4+ and quoting would be different for MySQL/Mariadb and PSQL
	$request = $db->query('', '
		SELECT
			id_field, col_name, field_name, field_desc, field_type, field_length, field_options,
			show_reg, show_display, show_memberlist, show_profile, private, active, default_value, can_search,
			bbc, mask, enclose, placement, vieworder, {db_prefix}custom_fields.rows, cols
		FROM {db_prefix}custom_fields
		WHERE id_field = {int:current_field}',
		array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[{
	$db = database();

	$db->query('', '
		UPDATE {db_prefix}custom_fields
		SET]]></search>
			<add><![CDATA[{
	$db = database();

	// The fully-qualified name for rows is here because it's a reserved word in Mariadb 10.2.4+ and quoting would be different for MySQL/Mariadb and PSQL
	$db->query('', '
		UPDATE {db_prefix}custom_fields
		SET]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			show_profile = {string:show_profile}, private = {int:private},
			active = {int:active}, default_value = {string:default_value},
			can_search = {int:can_search}, bbc = {int:bbc}, mask = {string:mask},
			enclose = {string:enclose}, placement = {int:placement}, rows = {int:rows},
			cols = {int:cols}
		WHERE id_field = {int:current_field}',
		array(]]></search>
			<add><![CDATA[			show_profile = {string:show_profile}, private = {int:private},
			active = {int:active}, default_value = {string:default_value},
			can_search = {int:can_search}, bbc = {int:bbc}, mask = {string:mask},
			enclose = {string:enclose}, placement = {int:placement}, {db_prefix}custom_fields.rows = {int:rows},
			cols = {int:cols}
		WHERE id_field = {int:current_field}',
		array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ *
 * What it does:
 *
 * - Scans controllerdir and addonsdir for .controller.php fils
 * - Checks if found files have a static frontPageOptions method
 *
 * @return array]]></search>
			<add><![CDATA[ *
 * What it does:
 *
 * - Scans controllerdir and addonsdir for .controller.php files
 * - Checks if found files have a static frontPageOptions method
 *
 * @return array]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Menu.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'like_stats' => array(
					'title' => $txt['like_post_stats'],
					'href' => $scripturl . '?action=likes;sa=likestats',
					'show' => allowedTo('like_posts_stats'),
				),
				'contact' => array(
					'title' => $txt['contact'],]]></search>
			<add><![CDATA[				'like_stats' => array(
					'title' => $txt['like_post_stats'],
					'href' => $scripturl . '?action=likes;sa=likestats',
					'show' => !empty($modSettings['likes_enabled']) && allowedTo('like_posts_stats'),
				),
				'contact' => array(
					'title' => $txt['contact'],]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Moderation.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}
	$db->free_result($request);

	$_SESSION['rc'] = array(
		'id' => $user_info['id'],
		'time' => time(),]]></search>
			<add><![CDATA[	}
	$db->free_result($request);

	if ($count_pms !== true)
	{
		$open_reports['pm'] = 0;
	}
	$_SESSION['rc'] = array(
		'id' => $user_info['id'],
		'time' => time(),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'pm_reports' => $open_reports['pm'],
	);

	$context['open_mod_reports'] = $open_reports['msg'];
	// Safety net, even though this (and the above)  should not be done here at all.
	if ($count_pms)
	{
		$context['open_pm_reports'] = $open_reports['pm'];
	}

	if ($flush)
	{
		Cache::instance()->remove('num_menu_errors');
	}

	return $count_pms ? $open_reports : $open_reports['msg'];
}

/**]]></search>
			<add><![CDATA[		'pm_reports' => $open_reports['pm'],
	);

	// Safety net, even though this (and the above)  should not be done here at all.
	$context['open_mod_reports'] = $open_reports['msg'];
	$context['open_pm_reports'] = $open_reports['pm'];

	if ($flush)
	{
		Cache::instance()->remove('num_menu_errors');
	}

	return $open_reports;
}

/**]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Modlog.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'id' => $row['id_action'],
			'ip' => $seeIP ? $row['ip'] : $txt['logged'],
			'position' => empty($row['real_name']) && empty($row['group_name']) ? $txt['guest'] : $row['group_name'],
			'moderator_link' => $row['id_member'] ? '<a href="' . $scripturl . '?action=profile;u=' . $row['id_member'] . '">' . $row['real_name'] . '</a>' : (empty($row['real_name']) ? ($txt['guest'] . (!empty($row['extra']['member_acted']) ? ' (' . $row['extra']['member_acted'] . ')' : '')) : $row['real_name']),
			'time' => standardTime($row['log_time']),
			'html_time' => htmlTime($row['log_time']),
			'timestamp' => forum_time(true, $row['log_time']),]]></search>
			<add><![CDATA[			'id' => $row['id_action'],
			'ip' => $seeIP ? $row['ip'] : $txt['logged'],
			'position' => empty($row['real_name']) && empty($row['group_name']) ? $txt['guest'] : $row['group_name'],
			'moderator_link' => $row['id_member'] && !empty($row['real_name']) ? '<a href="' . $scripturl . '?action=profile;u=' . $row['id_member'] . '">' . $row['real_name'] . '</a>' : (empty($row['real_name']) ? ($txt['guest'] . (!empty($row['extra']['member_acted']) ? ' (' . $row['extra']['member_acted'] . ')' : '')) : $row['real_name']),
			'time' => standardTime($row['log_time']),
			'html_time' => htmlTime($row['log_time']),
			'timestamp' => forum_time(true, $row['log_time']),]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Package.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			$ftp_file = strtr($dir, array($_SESSION['pack_ftp']['root'] => ''));

			if ($entryname->getPathname()->isWritable())
				$package_ftp->chmod($ftp_file, 0777);

			$package_ftp->unlink($ftp_file);]]></search>
			<add><![CDATA[		{
			$ftp_file = strtr($dir, array($_SESSION['pack_ftp']['root'] => ''));

			if (!is_writable($dir . '/'))
				$package_ftp->chmod($ftp_file, 0777);

			$package_ftp->unlink($ftp_file);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * @param string $url
 * @param string $post_data = ''
 * @param bool $keep_alive = false
 * @param int $redirection_level = 2
 * @return string
 */
function fetch_web_data($url, $post_data = '', $keep_alive = false, $redirection_level = 2)
{
	global $webmaster_email;
	static $keep_alive_dom = null, $keep_alive_fp = null;]]></search>
			<add><![CDATA[ * @param string $url
 * @param string $post_data = ''
 * @param bool $keep_alive = false
 * @param int $redirection_level = 3
 * @return string
 */
function fetch_web_data($url, $post_data = '', $keep_alive = false, $redirection_level = 3)
{
	global $webmaster_email;
	static $keep_alive_dom = null, $keep_alive_fp = null;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// I want this, from there, and I'm not going to be bothering you for more (probably.)
		if (empty($post_data))
		{
			fwrite($fp, 'GET ' . ($match[6] !== '/' ? str_replace(' ', '%20', $match[6]) : '') . ' HTTP/1.0' . "\r\n");
			fwrite($fp, 'Host: ' . $match[3] . (empty($match[5]) ? ($match[2] ? ':443' : '') : ':' . $match[5]) . "\r\n");
			fwrite($fp, 'User-Agent: PHP/ELK' . "\r\n");
			if ($keep_alive)]]></search>
			<add><![CDATA[		// I want this, from there, and I'm not going to be bothering you for more (probably.)
		if (empty($post_data))
		{
			fwrite($fp, 'GET ' . ($match[6] !== '/' ? str_replace(' ', '%20', $match[6]) : '/') . ' HTTP/1.1' . "\r\n");
			fwrite($fp, 'Host: ' . $match[3] . (empty($match[5]) ? ($match[2] ? ':443' : '') : ':' . $match[5]) . "\r\n");
			fwrite($fp, 'User-Agent: PHP/ELK' . "\r\n");
			if ($keep_alive)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		}
		else
		{
			fwrite($fp, 'POST ' . ($match[6] !== '/' ? $match[6] : '') . ' HTTP/1.0' . "\r\n");
			fwrite($fp, 'Host: ' . $match[3] . (empty($match[5]) ? ($match[2] ? ':443' : '') : ':' . $match[5]) . "\r\n");
			fwrite($fp, 'User-Agent: PHP/ELK' . "\r\n");
			if ($keep_alive)]]></search>
			<add><![CDATA[		}
		else
		{
			fwrite($fp, 'POST ' . ($match[6] !== '/' ? $match[6] : '') . ' HTTP/1.1' . "\r\n");
			fwrite($fp, 'Host: ' . $match[3] . (empty($match[5]) ? ($match[2] ? ':443' : '') : ':' . $match[5]) . "\r\n");
			fwrite($fp, 'User-Agent: PHP/ELK' . "\r\n");
			if ($keep_alive)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$response = fgets($fp, 768);

		// Redirect in case this location is permanently or temporarily moved.
		if ($redirection_level < 3 && preg_match('~^HTTP/\S+\s+30[127]~i', $response) === 1)
		{
			$location = '';
			while (!feof($fp) && trim($header = fgets($fp, 4096)) != '')]]></search>
			<add><![CDATA[		$response = fgets($fp, 768);

		// Redirect in case this location is permanently or temporarily moved.
		if ($redirection_level < 6 && preg_match('~^HTTP/\S+\s+30[127]~i', $response) === 1)
		{
			$location = '';
			while (!feof($fp) && trim($header = fgets($fp, 4096)) != '')]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Profile.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * This file contains code covered by:
 * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$where .= ' AND show_profile = {string:area}';

	// Load all the relevant fields - and data.
	$request = $db->query('', '
		SELECT
			col_name, field_name, field_desc, field_type, show_reg, field_length, field_options,
			default_value, bbc, enclose, placement, mask, vieworder, rows, cols
		FROM {db_prefix}custom_fields
		WHERE ' . $where . '
		ORDER BY vieworder ASC',]]></search>
			<add><![CDATA[		$where .= ' AND show_profile = {string:area}';

	// Load all the relevant fields - and data.
	// The fully-qualified name for rows is here because it's a reserved word in Mariadb 10.2.4+ and quoting would be different for MySQL/Mariadb and PSQL
	$request = $db->query('', '
		SELECT
			col_name, field_name, field_desc, field_type, show_reg, field_length, field_options,
			default_value, bbc, enclose, placement, mask, vieworder, {db_prefix}custom_fields.rows, cols
		FROM {db_prefix}custom_fields
		WHERE ' . $where . '
		ORDER BY vieworder ASC',]]></add>
		</operation>
	</file>
	<file name="SUBSDIR/Who.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'<a href="http://jqueryui.com/">JQuery UI</a> | &copy; jQuery Foundation and other contributors | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="https://github.com/tchwork/jsqueeze">Jsqueeze</a> &copy Nicolas Grekas| Licensed under <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>',
			'<a href="https://github.com/mailcheck">MailCheck</a> | &copy; Received Inc | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="http://www.openwall.com/phpass/">PH Pass</a> | Author: Solar Designer | Placed in the public domain</a>',
			'<a href="http://www.sceditor.com/">SCEditor</a> | &copy; Sam Clarke | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="http://sourceforge.net/projects/simplehtmldom/">Simple HTML DOM</a> | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="http://www.simplemachines.org/">Simple Machines</a> | &copy; Simple Machines | Licensed under <a href="http://www.simplemachines.org/about/smf/license.php">The BSD License</a>',]]></search>
			<add><![CDATA[			'<a href="http://jqueryui.com/">JQuery UI</a> | &copy; jQuery Foundation and other contributors | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="https://github.com/tchwork/jsqueeze">Jsqueeze</a> &copy Nicolas Grekas| Licensed under <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>',
			'<a href="https://github.com/mailcheck">MailCheck</a> | &copy; Received Inc | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="https://github.com/michelf/php-markdown">PHP Markdown Lib</a> | &copy; Michel Fortin | Licensed under <a href="https://github.com/michelf/php-markdown/blob/lib/License.md">BSD-style open source</a>',			'<a href="http://www.openwall.com/phpass/">PH Pass</a> | Author: Solar Designer | Placed in the public domain</a>',
			'<a href="http://www.sceditor.com/">SCEditor</a> | &copy; Sam Clarke | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="http://sourceforge.net/projects/simplehtmldom/">Simple HTML DOM</a> | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="http://www.simplemachines.org/">Simple Machines</a> | &copy; Simple Machines | Licensed under <a href="http://www.simplemachines.org/about/smf/license.php">The BSD License</a>',]]></add>
		</operation>
	</file>
	<file name="BOARDDIR/subscriptions.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */

// Start things rolling by getting the forum alive...
$ssi_guest_access = true;
if (!file_exists(dirname(__FILE__) . '/bootstrap.php'))
	die('Cannot find bootstrap.php');

// Need lots of help
require_once(dirname(__FILE__) . '/bootstrap.php');
require_once(SUBSDIR . '/PaidSubscriptions.subs.php');
require_once(SUBSDIR . '/Admin.subs.php');
require_once(SUBSDIR . '/Members.subs.php');]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */

// Start things rolling by getting the forum alive...
$ssi_guest_access = true;
if (!file_exists(dirname(__FILE__) . '/bootstrap.php'))
	die('Unable to initialize');

require_once(dirname(__FILE__) . '/bootstrap.php');
new Bootstrap();

global $txt, $modSettings, $context;

// Need lots of help
require_once(SUBSDIR . '/PaidSubscriptions.subs.php');
require_once(SUBSDIR . '/Admin.subs.php');
require_once(SUBSDIR . '/Members.subs.php');]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/Display.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[								<a href="#" ', !empty($options['use_click_menu']) ? '' : 'onclick="event.stopPropagation();return false;" ', 'class="linklevel1 post_options">', $txt['post_options'], '
							</a>';

		if ($message['can_modify'] || $message['can_remove'] || $context['can_follow_up'] || ($context['can_split'] && !empty($context['real_num_replies'])) || $context['can_restore_msg'] || $message['can_approve'] || $message['can_unapprove'] || $context['can_report_moderator'])
		{
			// Show them the other options they may have in a nice pulldown
			echo ']]></search>
			<add><![CDATA[								<a href="#" ', !empty($options['use_click_menu']) ? '' : 'onclick="event.stopPropagation();return false;" ', 'class="linklevel1 post_options">', $txt['post_options'], '
							</a>';

		if ($message['can_modify'] || $message['can_remove'] || !empty($context['can_follow_up']) || ($context['can_split'] && !empty($context['real_num_replies'])) || $context['can_restore_msg'] || $message['can_approve'] || $message['can_unapprove'] || $context['can_report_moderator'])
		{
			// Show them the other options they may have in a nice pulldown
			echo ']]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[									</li>';

			// Can they quote to a new topic? @todo - This needs rethinking for GUI layout.
			if ($context['can_follow_up'])
				echo '
									<li class="listlevel2">
										<a href="', $scripturl, '?action=post;board=', $context['current_board'], ';quote=', $message['id'], ';followup=', $message['id'], '" class="linklevel2 quotetonew_button">', $txt['quote_new'], '</a>]]></search>
			<add><![CDATA[									</li>';

			// Can they quote to a new topic? @todo - This needs rethinking for GUI layout.
			if (!empty($context['can_follow_up']))
				echo '
									<li class="listlevel2">
										<a href="', $scripturl, '?action=post;board=', $context['current_board'], ';quote=', $message['id'], ';followup=', $message['id'], '" class="linklevel2 quotetonew_button">', $txt['quote_new'], '</a>]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/Post.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		echo '
					<h3 id="postAdditionalOptionsHeader" class="category_header panel_toggle">
							<i id="postMoreExpand" class="chevricon i-chevron-', empty($context['minmax_preferences']['post']) ? 'up' : 'down', ' hide" title="', $txt['hide'], '"></i>
						<a href="#" id="postMoreExpandLink">', $context['attachments']['can']['post'] ? $txt['post_additionalopt_attach'] : $txt['post_additionalopt'], '</a>
					</h3>';

	echo '
					<div id="', empty($settings['additional_options_collapsible']) ? 'postAdditionalOptionsNC"' : 'postAdditionalOptions"', empty($settings['additional_options_collapsible']) || empty($context['minmax_preferences']['post']) ? '' : ' class="hide"', '>';

	// Is the user allowed to post or if this post already has attachments on it give them the boxes.
	if ($context['attachments']['can']['post'] || !empty($context['attachments']['current']))
		$context['attachments']['template']();

	// Display the check boxes for all the standard options - if they are available to the user!]]></search>
			<add><![CDATA[		echo '
					<h3 id="postAdditionalOptionsHeader" class="category_header panel_toggle">
							<i id="postMoreExpand" class="chevricon i-chevron-', empty($context['minmax_preferences']['post']) ? 'up' : 'down', ' hide" title="', $txt['hide'], '"></i>
						<a href="#" id="postMoreExpandLink">', !empty($context['attachments']) && $context['attachments']['can']['post'] ? $txt['post_additionalopt_attach'] : $txt['post_additionalopt'], '</a>
					</h3>';

	echo '
					<div id="', empty($settings['additional_options_collapsible']) ? 'postAdditionalOptionsNC"' : 'postAdditionalOptions"', empty($settings['additional_options_collapsible']) || empty($context['minmax_preferences']['post']) ? '' : ' class="hide"', '>';

	// Is the user allowed to post or if this post already has attachments on it give them the boxes.
	if (!empty($context['attachments']) && ($context['attachments']['can']['post'] || !empty($context['attachments']['current'])))
		$context['attachments']['template']();

	// Display the check boxes for all the standard options - if they are available to the user!]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				aSwapLinks: [
					{
						sId: \'postMoreExpandLink\',
						msgExpanded: ' . JavaScriptEscape($context['attachments']['can']['post'] ? $txt['post_additionalopt_attach'] : $txt['post_additionalopt']) . ',
						msgCollapsed: ' . JavaScriptEscape($context['attachments']['can']['post'] ? $txt['post_additionalopt_attach'] : $txt['post_additionalopt']) . '
					}
				],
				oThemeOptions: {]]></search>
			<add><![CDATA[				aSwapLinks: [
					{
						sId: \'postMoreExpandLink\',
						msgExpanded: ' . JavaScriptEscape(!empty($context['attachments']) && $context['attachments']['can']['post'] ? $txt['post_additionalopt_attach'] : $txt['post_additionalopt']) . ',
						msgCollapsed: ' . JavaScriptEscape(!empty($context['attachments']) && $context['attachments']['can']['post'] ? $txt['post_additionalopt_attach'] : $txt['post_additionalopt']) . '
					}
				],
				oThemeOptions: {]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/Theme.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:      BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:      BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// 1.0 backward compatibility: if you already put the icon in the theme dir
		// use that one, otherwise the default
		// @deprecated since 1.1
		if (file_exists($scripturl . '/mobile.png'))
		{
			$context['favicon'] = $scripturl . '/mobile.png';
		}]]></search>
			<add><![CDATA[		// 1.0 backward compatibility: if you already put the icon in the theme dir
		// use that one, otherwise the default
		// @deprecated since 1.1
		if (file_exists(BOARDDIR . '/mobile.png'))
		{
			$context['favicon'] = $scripturl . '/mobile.png';
		}]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/css/_light/index_light.css">
		<operation>
			<search position="replace"><![CDATA[	border-color: #CCCCCC;
}

.new_post_separator {
	display: block;
}]]></search>
			<add><![CDATA[	border-color: #CCCCCC;
}

#elk_lb_expand:before {
	color: #CCCCCC;
}

.new_post_separator {
	display: block;
}]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/css/icons_svg.css">
		<operation>
			<search position="replace"><![CDATA[	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='black' viewBox='0 0 32 32'%3E%3Cpath d='M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3z'/%3E%3Cpath d='M20.914 9.914l-2.83-2.83L9.172 16l8.915 8.913 2.828-2.828L14.827 16z'/%3E%3C/svg%3E");
}

.i-last::before, .i-last_post::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%2372b7d9' viewBox='0 0 32 32'%3E%3Cpath d='M28 4v24h-4V17L14 27V17L4 27V5l10 10V5l10 10V4z'/%3E%3Cpath d='M20.914 9.914l-2.83-2.83L9.172 16l8.915 8.913 2.828-2.828L14.827 16z'/%3E%3C/svg%3E");
}

/* Dots, these are simple SVG geometry icons and are not from any font set */]]></search>
			<add><![CDATA[	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='black' viewBox='0 0 32 32'%3E%3Cpath d='M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3z'/%3E%3Cpath d='M20.914 9.914l-2.83-2.83L9.172 16l8.915 8.913 2.828-2.828L14.827 16z'/%3E%3C/svg%3E");
}

/* From Font Awesome */
.i-last::before, .i-last_post::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%2372b7d9' viewBox='0 0 38 38'%3E%3Cpath d='M.8 29.5c-.4.4-.8.3-.8-.4V3c0-.8.4-1 .8-.5l12.7 12.7.2.3V3c0-.8.4-1 .8-.5l12.7 12.7.2.3v-12c0-.7.5-1.2 1.2-1.2H31c.5 0 1 .5 1 1v25.3c0 .6-.5 1-1 1h-2.4c-.7 0-1.2-.4-1.2-1v-12l-.2.2-12.7 12.7c-.4.4-.8.3-.8-.4V16.6s0 .2-.2.3z'/%3E%3C/svg%3E");
}

/* Dots, these are simple SVG geometry icons and are not from any font set */]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/css/index.css">
		<operation>
			<search position="replace"><![CDATA[#creator dt strong, .settings label,
.popup_heading {
	font-weight: 600;
	font-family: "Segoe UI Semibold", "Segoe UI", "Helvetica Neue Medium", "Helvetica Neue", serif;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}]]></search>
			<add><![CDATA[#creator dt strong, .settings label,
.popup_heading {
	font-weight: 600;
	font-family: "Segoe UI Semibold", "Segoe UI", "Helvetica Neue Medium", -apple-system, BlinkMacSystemFont, "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Droid Sans", "Helvetica Neue", "Trebuchet MS", Arial, sans-serif;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[/* Message index icons and topic status */
.topicicon:before {
	display: inline-block;
	width: 18px;
	height: 16px;
	content: "";
	vertical-align: middle;
}]]></search>
			<add><![CDATA[/* Message index icons and topic status */
.topicicon:before {
	display: inline-block;
	width: 1.3em;
	height: 1.15em;
	content: "";
	vertical-align: middle;
}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[}

.fred.i-profile::before {
	max-width: 12px;
}

/* sticky / locked icons for the upper right of the div */]]></search>
			<add><![CDATA[}

.fred.i-profile::before {
	max-width: .8em;
}

/* sticky / locked icons for the upper right of the div */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[.locked_row.sticky_row .topic_info .topic_name:before {
	display: block;
	float: right;
	margin-right: -16px;
	width: 16px;
	height: 16px;
	content: "";
}
]]></search>
			<add><![CDATA[.locked_row.sticky_row .topic_info .topic_name:before {
	display: block;
	float: right;
	margin-right: -1.15em;
	width: 1.15em;
	height: 1.15em;
	content: "";
}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[#elk_lb_expand:before {
	content: "\21D7";
	font-size: 2em;
	color: #CCCCCC;
}

.elk_lb_no_scrolling {]]></search>
			<add><![CDATA[#elk_lb_expand:before {
	content: "\21D7";
	font-size: 2em;
}

.elk_lb_no_scrolling {]]></add>
		</operation>
	</file>
	<file name="LANGUAGEDIR/english/LikePosts.english.php">
		<operation>
			<search position="replace"><![CDATA[<?php
// Version: 1.1; Like posts

global $txt;
]]></search>
			<add><![CDATA[<?php
// Version: 1.1; LikePosts

global $txt;
]]></add>
		</operation>
	</file>
	<file name="LANGUAGEDIR/english/Profile.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['trackEdit_action_id_group'] = 'Primary Membergroup';
$txt['trackEdit_action_additional_groups'] = 'Additional Membergroups';

$txt['otp_enabled_help'] = 'Enabling this will add a second factor (one time password) for authentication.';
$txt['otp_token_help'] = 'This generates a secret token for Time-based One-time Password apps such as Authy or Google Authenticator. Once the secret was generated use the your favorite authenticator app and scan the qrcode.<ul><li><a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en">Google Authenticator for Android</a></li><li><a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">Google Authenticator for IOS (Apple)</a></li></ul>';]]></search>
			<add><![CDATA[$txt['trackEdit_action_id_group'] = 'Primary Membergroup';
$txt['trackEdit_action_additional_groups'] = 'Additional Membergroups';

$txt['otp_enabled_help'] = 'Enabling this will add a second factor (one-time password) for authentication.';
$txt['otp_token_help'] = 'This generates a secret token for time-based one-time password  apps such as Authy or Google Authenticator. Once the secret was generated use your favorite authenticator app and scan the qrcode.<ul><li><a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en">Google Authenticator for Android</a></li><li><a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">Google Authenticator for IOS (Apple)</a></li></ul>';]]></add>
		</operation>
	</file>
	<file name="LANGUAGEDIR/english/UserNotifications.english.php">
		<operation>
			<search position="replace"><![CDATA[<?php
// Version: 1.1; notifications

$txt['usernotif_title'] = 'User Notifications Settings';
$txt['usernotif_desktop_enable'] = 'Enable desktop notifications';]]></search>
			<add><![CDATA[<?php
// Version: 1.1; UserNotifications

$txt['usernotif_title'] = 'User Notifications Settings';
$txt['usernotif_desktop_enable'] = 'Enable desktop notifications';]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/scripts/dropAttachments.js">
		<operation>
			<search position="replace"><![CDATA[		*/
		runAttachmentQueue = function() {
			if (attachmentQueue.length > 0 && uploadInProgress === false) {
				var currentData = attachmentQueue[0];

				uploadInProgress = true;
				sendFileToServer(currentData.formData, currentData.statusInstance, currentData.fileSize, currentData.fileName);
				attachmentQueue.splice(0, 1);
			}
		},
]]></search>
			<add><![CDATA[		*/
		runAttachmentQueue = function() {
			if (attachmentQueue.length > 0 && uploadInProgress === false) {
				setTimeout(function () {
					var currentData = attachmentQueue[0];

					uploadInProgress = true;
					sendFileToServer(currentData.formData, currentData.statusInstance, currentData.fileSize, currentData.fileName);
					attachmentQueue.splice(0, 1);
				}, 200);
			}
		},
]]></add>
		</operation>
	</file>
	<file name="THEMEDIR/scripts/topic.js">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 */

/**]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 */

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!XMLDoc || !XMLDoc.getElementsByTagName('elk')[0])
	{
		// Mozilla will nicely tell us what's wrong.
		if (XMLDoc.childNodes.length > 0 && XMLDoc.firstChild.nodeName === 'parsererror')
		{
			oErrordiv = document.getElementById('error_box');
			oErrordiv.innerHTML = XMLDoc.firstChild.textContent;]]></search>
			<add><![CDATA[	if (!XMLDoc || !XMLDoc.getElementsByTagName('elk')[0])
	{
		// Mozilla will nicely tell us what's wrong.
		if (typeof XMLDoc.childNodes !== 'undefined' &&  XMLDoc.childNodes.length > 0 && XMLDoc.firstChild.nodeName === 'parsererror')
		{
			oErrordiv = document.getElementById('error_box');
			oErrordiv.innerHTML = XMLDoc.firstChild.textContent;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	var link = document.getElementById('link_' + thumbID),
		siblings = $('a[data-lightboxmessage="' + messageID + '"]'),
		navigation = [],
		$elk_expand_icon = $('<span id="elk_lb_expand"></span>'),
		$elk_lightbox = $('#elk_lightbox'),
		$elk_lb_content = $('#elk_lb_content'),]]></search>
			<add><![CDATA[	var link = document.getElementById('link_' + thumbID),
		siblings = $('a[data-lightboxmessage="' + messageID + '"]'),
		navigation = [],
		xDown = null,
		yDown = null,
		$elk_expand_icon = $('<span id="elk_lb_expand"></span>'),
		$elk_lightbox = $('#elk_lightbox'),
		$elk_lb_content = $('#elk_lb_content'),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$('html, body').removeClass('elk_lb_no_scrolling');
			$(window).off('resize.lb');
			$(window).off('keydown.lb');
		},
		openLightbox = function () {
			// Load and open an image in the lightbox]]></search>
			<add><![CDATA[			$('html, body').removeClass('elk_lb_no_scrolling');
			$(window).off('resize.lb');
			$(window).off('keydown.lb');
			$(window).off('touchstart.lb');
			$(window).off('touchmove.lb');
		},
		openLightbox = function () {
			// Load and open an image in the lightbox]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				});
				$('#elk_lb_img').removeAttr('style');
				$elk_expand_icon.hide();
			});
		};
]]></search>
			<add><![CDATA[				});
				$('#elk_lb_img').removeAttr('style');
				$elk_expand_icon.hide();
				$(window).off('keydown.lb');
				$(window).off('touchmove.lb');
			});
		};
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		navigation[navigation.length] = $(this).data('lightboximage');
	});

	// Load and show the initial lightbox container div
	ajaxIndicatorOn();
	$elk_lightbox.fadeIn(200);]]></search>
			<add><![CDATA[		navigation[navigation.length] = $(this).data('lightboximage');
	});

	// We should always have at least the thumbID
	if (navigation.length === 0) {
		navigation[navigation.length] = thumbID;
	}

	// Load and show the initial lightbox container div
	ajaxIndicatorOn();
	$elk_lightbox.fadeIn(200);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$('#elk_lb_img').css({'max-height': window.innerHeight * 0.9, 'max-width': window.innerWidth * 0.8});
	});

	return false;
}
]]></search>
			<add><![CDATA[			$('#elk_lb_img').css({'max-height': window.innerHeight * 0.9, 'max-width': window.innerWidth * 0.8});
	});

	// Swipe navigation start, record press x/y
	$(window).on('touchstart.lb', function (event) {
		xDown = event.originalEvent.touches[0].clientX;
		yDown = event.originalEvent.touches[0].clientY;
	});

	// Swipe navigation left / right detection
	$(window).on('touchmove.lb', function(event) {
		// No known start point ?
		if (!xDown || !yDown)
			return;

		// Where are we now
		var xUp = event.originalEvent.touches[0].clientX,
			yUp = event.originalEvent.touches[0].clientY,
			xDiff = xDown - xUp,
			yDiff = yDown - yUp;

		// Moved enough to know what direction they are swiping
		if (Math.abs(xDiff) > Math.abs(yDiff)) {
			if (xDiff > 0) {
				// Swipe left
				prevNav();
				navLightbox();
			} else {
				// Swipe right
				nextNav();
				navLightbox();
			}
		}

		// Reset values
		xDown = null;
		yDown = null;
	});

	return false;
}
]]></add>
		</operation>
	</file>
</modification>