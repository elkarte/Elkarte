<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "https://www.elkarte.net/site/modification">
<modification xmlns="https://www.elkarte.net/site/modification" xmlns:elk="https://www.elkarte.net/">

	<id>Elkarte Contributors:ElkArte_117_patch</id>
	<version>1.1.7</version>
	
	<!-- 1.1.7 updates for SSI.php -->		
	<file name="BOARDDIR/SSI.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			WHERE
				m.id_topic IN ({array_int:topic_list})
				AND (m.id_msg > COALESCE(lt.id_msg, lmr.id_msg, 0))
			GROUP BY m.id_topic',
			array(
				'current_member' => $user_info['id'],
				'topic_list' => $topic_list]]></search>
			<add><![CDATA[			WHERE
				m.id_topic IN ({array_int:topic_list})
				AND (m.id_msg > COALESCE(lt.id_msg, lmr.id_msg, 0))
			GROUP BY m.id_topic, lt.id_msg, lmr.id_msg',
			array(
				'current_member' => $user_info['id'],
				'topic_list' => $topic_list]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'link' => '<a href="' . $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $row['id_msg'] . '#new" rel="nofollow">' . $row['subject'] . '</a>',
			'is_new' => !empty($topics[$row['id_topic']]['new_from']),
			'new_from' => empty($topics[$row['id_topic']]['new_from']) ? 0 : $topics[$row['id_topic']]['new_from'],
			'icon' => '<img src="' . $icon_sources->{$row['icon']} . '" class="centericon" alt="' . $row['icon'] . '" />',
		);
	}
	$db->free_result($request);]]></search>
			<add><![CDATA[			'link' => '<a href="' . $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $row['id_msg'] . '#new" rel="nofollow">' . $row['subject'] . '</a>',
			'is_new' => !empty($topics[$row['id_topic']]['new_from']),
			'new_from' => empty($topics[$row['id_topic']]['new_from']) ? 0 : $topics[$row['id_topic']]['new_from'],
			'icon' => '<img src="' . $icon_sources->getIconURL($row['icon']) . '" class="centericon" alt="' . $row['icon'] . '" />',
		);
	}
	$db->free_result($request);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$return[] = array(
			'id' => $row['id_topic'],
			'message_id' => $row['id_msg'],
			'icon' => '<img src="' . $icon_sources->{$row['icon']} . '" alt="' . $row['icon'] . '" />',
			'subject' => $row['subject'],
			'time' => standardTime($row['poster_time']),
			'html_time' => htmlTime($row['poster_time']),]]></search>
			<add><![CDATA[		$return[] = array(
			'id' => $row['id_topic'],
			'message_id' => $row['id_msg'],
			'icon' => '<img src="' . $icon_sources->getIconURL($row['icon']) . '" alt="' . $row['icon'] . '" />',
			'subject' => $row['subject'],
			'time' => standardTime($row['poster_time']),
			'html_time' => htmlTime($row['poster_time']),]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for bootstrap.php -->		
	<file name="BOARDDIR/bootstrap.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		define('ELKBOOT', '1');

		// The software version
		define('FORUM_VERSION', 'ElkArte 1.1.6');

		// Shortcut for the browser cache stale
		define('CACHE_STALE', '?R116');
	}

	/**]]></search>
			<add><![CDATA[		define('ELKBOOT', '1');

		// The software version
		define('FORUM_VERSION', 'ElkArte 1.1.7');

		// Shortcut for the browser cache stale
		define('CACHE_STALE', '?R117');
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					$redirec_file = 'install.php';
				}

				header('Location: http' . (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) === 'on' ? 's' : '') . '://' . (empty($_SERVER['HTTP_HOST']) ? $_SERVER['SERVER_NAME'] . (empty($_SERVER['SERVER_PORT']) || $_SERVER['SERVER_PORT'] === '80' ? '' : ':' . $_SERVER['SERVER_PORT']) : $_SERVER['HTTP_HOST']) . (strtr(dirname($_SERVER['PHP_SELF']), '\\', '/') == '/' ? '' : strtr(dirname($_SERVER['PHP_SELF']), '\\', '/')) . '/install/' . $redirec_file);
				die();
			}
		}]]></search>
			<add><![CDATA[					$redirec_file = 'install.php';
				}

				$version_running = str_replace('ElkArte ', '', FORUM_VERSION);
				$proto = 'http' . (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) === 'on' ? 's' : '');
				$port = empty($_SERVER['SERVER_PORT']) || $_SERVER['SERVER_PORT'] === '80' ? '' : ':' . $_SERVER['SERVER_PORT'];
				$host = empty($_SERVER['HTTP_HOST']) ? $_SERVER['SERVER_NAME'] . $port : $_SERVER['HTTP_HOST'];
				$path = strtr(dirname($_SERVER['PHP_SELF']), '\\', '/') == '/' ? '' : strtr(dirname($_SERVER['PHP_SELF']), '\\', '/');

				header('Location:' . $proto . '://' . $host . $path . '/install/' . $redirec_file . '?v=' . $version_running);
				die();
			}
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $context;

		// Clean the request.
		cleanRequest();

		// Initiate the database connection and define some database functions to use.
		loadDatabase();
]]></search>
			<add><![CDATA[	{
		global $context;

		// Initiate the database connection and define some database functions to use.
		loadDatabase();
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// It's time for settings loaded from the database.
		reloadSettings();

		// Our good ole' contextual array, which will hold everything
		if (empty($context))
		{]]></search>
			<add><![CDATA[		// It's time for settings loaded from the database.
		reloadSettings();

		// Clean the request.
		cleanRequest();

		// Our good ole' contextual array, which will hold everything
		if (empty($context))
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Load the current or SSI theme. (just use $ssi_theme = id_theme;)
		loadTheme(isset($ssi_theme) ? (int) $ssi_theme : 0);

		// Load BadBehavior functions
		loadBadBehavior();

		// @todo: probably not the best place, but somewhere it should be set...
		if (!headers_sent())]]></search>
			<add><![CDATA[		// Load the current or SSI theme. (just use $ssi_theme = id_theme;)
		loadTheme(isset($ssi_theme) ? (int) $ssi_theme : 0);

		// Load BadBehavior functions, but not when running from CLI
		if (!defined('STDIN'))
		{
			loadBadBehavior();
		}

		// @todo: probably not the best place, but somewhere it should be set...
		if (!headers_sent())]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			obExit(null, true);
		}

		if (!empty($modSettings['front_page']) && is_callable(array($modSettings['front_page'], 'frontPageHook')))
		{
			$modSettings['default_forum_action'] = '?action=forum;';
		}]]></search>
			<add><![CDATA[			obExit(null, true);
		}

		if (!empty($modSettings['front_page']) && class_exists($modSettings['front_page'])
			&& in_array('frontPageHook', get_class_methods($modSettings['front_page'])))
		{
			$modSettings['default_forum_action'] = '?action=forum;';
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			die('No access...');
		}
		elseif (isset($_REQUEST['ssi_layers'], $ssi_layers) && (@get_magic_quotes_gpc() ? stripslashes($_REQUEST['ssi_layers']) : $_REQUEST['ssi_layers']) == $ssi_layers)
		{
			die('No access...');
		}]]></search>
			<add><![CDATA[		{
			die('No access...');
		}
		elseif (isset($_REQUEST['ssi_layers'], $ssi_layers) && $_REQUEST['ssi_layers'] == $ssi_layers)
		{
			die('No access...');
		}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for BrowserDetector.class.php -->		
	<file name="SOURCEDIR/BrowserDetector.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Be you robot or human?
		if (!isset($this->_browsers['possibly_robot']))
		{
			if ($user_info['possibly_robot']) {
				// This isn't meant to be reliable, it's just meant to catch most bots to prevent PHPSESSID from showing up.
				$this->_browsers['possibly_robot'] = !empty($user_info['possibly_robot']);
]]></search>
			<add><![CDATA[		// Be you robot or human?
		if (!isset($this->_browsers['possibly_robot']))
		{
			if (isset($user_info['possibly_robot'])) {
				// This isn't meant to be reliable, it's just meant to catch most bots to prevent PHPSESSID from showing up.
				$this->_browsers['possibly_robot'] = !empty($user_info['possibly_robot']);
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for CurlFetchWebdata.class.php -->		
	<file name="SOURCEDIR/CurlFetchWebdata.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		CURLOPT_SSL_VERIFYPEER	=> 0, // stop cURL from verifying the peer's certificate
		CURLOPT_SSL_VERIFYHOST	=> 0, // stop cURL from verifying the peer's host
		CURLOPT_POST			=> 0, // no post data unless its passed
	);

	/**]]></search>
			<add><![CDATA[		CURLOPT_SSL_VERIFYPEER	=> 0, // stop cURL from verifying the peer's certificate
		CURLOPT_SSL_VERIFYHOST	=> 0, // stop cURL from verifying the peer's host
		CURLOPT_POST			=> 0, // no post data unless its passed
		CURLOPT_HTTPHEADER		=> [], // no special headers unless supplied
	);

	/**]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Debug.class.php -->		
	<file name="SOURCEDIR/Debug.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		foreach ($this->_db_cache as $q => $qq)
		{
			$is_select = strpos(trim($qq['q']), 'SELECT') === 0 || preg_match('~^INSERT(?: IGNORE)? INTO \w+(?:\s+\([^)]+\))?\s+SELECT .+$~s', trim($qq['q'])) != 0;

			// Temporary tables created in earlier queries are not explainable.
			if ($is_select)]]></search>
			<add><![CDATA[
		foreach ($this->_db_cache as $q => $qq)
		{
			$is_select = strpos(trim($qq['q']), 'SELECT') === 0 || preg_match('~^INSERT(?: IGNORE)? INTO \w+(?:\s+\([^)]+\))?\s+SELECT .+$~s', trim($qq['q'])) != 0 || strpos(trim($qq['q']), 'WITH') === 0;

			// Temporary tables created in earlier queries are not explainable.
			if ($is_select)]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Hooks.class.php -->		
	<file name="SOURCEDIR/Hooks.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		foreach ($enabled as $class)
		{
			if (is_callable(array($class, 'register')))
			{
				$hooks = $class::register();
]]></search>
			<add><![CDATA[
		foreach ($enabled as $class)
		{
			if (class_exists($class) && in_array('register', get_class_methods($class)))
			{
				$hooks = $class::register();
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		foreach ($enabled as $class)
		{
			if (is_callable(array($class, 'settingsRegister')))
			{
				$hooks = $class::settingsRegister();
]]></search>
			<add><![CDATA[
		foreach ($enabled as $class)
		{
			if (class_exists($class) && in_array('settingsRegister', get_class_methods($class)))
			{
				$hooks = $class::settingsRegister();
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[    "description": "' . $name . '",
    "version": "1.0.0",
    "type": "addon",
    "homepage": "http://www.elkarte.net",
    "time": "",
    "license": "",
    "authors": [
        {
            "name": "Unknown",
            "email": "notprovided",
            "homepage": "http://www.elkarte.net",
            "role": "Developer"
        }
    ],
    "support": {
        "email": "",
        "issues": "http://www.elkarte.net/community",
        "forum": "http://www.elkarte.net/community",
        "wiki": "",
        "irc": "",
        "source": ""]]></search>
			<add><![CDATA[    "description": "' . $name . '",
    "version": "1.0.0",
    "type": "addon",
    "homepage": "https://www.elkarte.net",
    "time": "",
    "license": "",
    "authors": [
        {
            "name": "Unknown",
            "email": "notprovided",
            "homepage": "https://www.elkarte.net",
            "role": "Developer"
        }
    ],
    "support": {
        "email": "",
        "issues": "https://www.elkarte.net/community",
        "forum": "https://www.elkarte.net/community",
        "wiki": "",
        "irc": "",
        "source": ""]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Load.php -->		
	<file name="SOURCEDIR/Load.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.5
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$_SESSION['id_msg_last_visit'] = $user_settings['id_msg_last_visit'];

			// If it was *at least* five hours ago...
			if ($visitOpt['poster_time'] < time() - 5 * 3600)
			{
				require_once(SUBSDIR . '/Members.subs.php');
				updateMemberData($id_member, array('id_msg_last_visit' => (int) $modSettings['maxMsgID'], 'last_login' => time(), 'member_ip' => $req->client_ip(), 'member_ip2' => $req->ban_ip()));]]></search>
			<add><![CDATA[			$_SESSION['id_msg_last_visit'] = $user_settings['id_msg_last_visit'];

			// If it was *at least* five hours ago...
			if ($visitOpt === false || $visitOpt['poster_time'] < time() - 5 * 3600)
			{
				require_once(SUBSDIR . '/Members.subs.php');
				updateMemberData($id_member, array('id_msg_last_visit' => (int) $modSettings['maxMsgID'], 'last_login' => time(), 'member_ip' => $req->client_ip(), 'member_ip2' => $req->ban_ip()));]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// This is a logged in user, so definitely not a spider.
		$user_info['possibly_robot'] = false;
	}
	// If the user is a guest, initialize all the critical user settings.
	else]]></search>
			<add><![CDATA[
		// This is a logged in user, so definitely not a spider.
		$user_info['possibly_robot'] = false;

		// Lets upgrade the salt if needed.
		require_once(SUBSDIR . '/Members.subs.php');
		if (updateMemberSalt($id_member))
		{
			require_once(SUBSDIR . '/Auth.subs.php');
			setLoginCookie(60 * $modSettings['cookieTime'], $user_settings['id_member'], hash('sha256', ($user_settings['passwd'] . $user_settings['password_salt'])));
		}
	}
	// If the user is a guest, initialize all the critical user settings.
	else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (in_array('admin.css', $filenames))
		$filenames[] = $context['theme_variant'] . '/admin' . $context['theme_variant'] . '.css';

	$params['subdir'] = 'css';
	$params['extension'] = 'css';
	$params['index_name'] = 'css_files';
	$params['debug_index'] = 'sheets';]]></search>
			<add><![CDATA[	if (in_array('admin.css', $filenames))
		$filenames[] = $context['theme_variant'] . '/admin' . $context['theme_variant'] . '.css';

	$params['subdir'] = isset($params['subdir']) ? $params['subdir'] : 'css';
	$params['extension'] = 'css';
	$params['index_name'] = 'css_files';
	$params['debug_index'] = 'sheets';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (empty($filenames))
		return;

	$params['subdir'] = 'scripts';
	$params['extension'] = 'js';
	$params['index_name'] = 'js_files';
	$params['debug_index'] = 'javascript';]]></search>
			<add><![CDATA[	if (empty($filenames))
		return;

	$params['subdir'] = isset($params['subdir']) ? $params['subdir'] : 'scripts';
	$params['extension'] = 'js';
	$params['index_name'] = 'js_files';
	$params['debug_index'] = 'javascript';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Security.php -->		
	<file name="SOURCEDIR/Security.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		return true;

	// You're never allowed to do something if your data hasn't been loaded yet!
	if (empty($user_info))
		return false;

	// Administrators are supermen :P.]]></search>
			<add><![CDATA[		return true;

	// You're never allowed to do something if your data hasn't been loaded yet!
	if (empty($user_info) || !isset($user_info['permissions']))
		return false;

	// Administrators are supermen :P.]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Server.class.php -->		
	<file name="SOURCEDIR/Server.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function supportsSSL()
	{
		return isset($this->HTTPS) &&
			($this->HTTPS === 'on' || $this->HTTPS === 1 || $this->SERVER_PORT === 443);
	}
}]]></search>
			<add><![CDATA[	 */
	public function supportsSSL()
	{
		return
			(isset($this->HTTPS) && ($this->HTTPS === 'on' || $this->HTTPS == 1))
			|| (isset($this->REQUEST_SCHEME) && $this->REQUEST_SCHEME === 'https')
			|| (isset($this->SERVER_PORT) && $this->SERVER_PORT == 443)
			|| (isset($this->HTTP_X_FORWARDED_PROTO) && $this->HTTP_X_FORWARDED_PROTO === 'https');
	}

	/**
	 * Try to determine a FQDN for the server
	 *
	 * Many SMTP servers *require* a fully qualified domain name in the
	 * HELO/EHLO command.  This function tries to determine the fully qualified domain name
	 * from the OS which often just returns the current host name, like bob, rather than a FQDN.
	 *
	 * From the rfc:
	 * The SMTP client MUST, if possible, ensure that the domain parameter to the EHLO
	 * command is a valid principal host name (not a CNAME or MX name) for its host. If
	 * this is not possible (e.g., when the client's address is dynamically assigned and
	 * the client does not have an obvious name), an address literal SHOULD be substituted
	 * for the domain name and supplemental information provided that will assist in
	 * identifying the client.
	 *
	 * @param string $fallback the fallback to use when we fail
	 * @return string a FQDN
	 */
	public function getFQDN($fallback = '[127.0.0.1]')
	{
		// Try gethostname
		if (function_exists('gethostname') && $this->_isValidFQDN(gethostname()))
		{
			return gethostname();
		}

		// Failing, try php_uname
		if (function_exists('php_uname') && $this->_isValidFQDN(php_uname('n')))
		{
			return php_uname('n');
		}

		// This is likely a sitename vs host
		if (!empty($_SERVER['SERVER_NAME']) && $this->_isValidFQDN($_SERVER['SERVER_NAME']))
		{
			return $_SERVER['SERVER_NAME'];
		}

		// Try a reverse IP lookup on the server addr
		if (!empty($_SERVER['SERVER_ADDR']) && $this->_isValidFQDN((host_from_ip($_SERVER['SERVER_ADDR']))))
		{
			return host_from_ip($_SERVER['SERVER_ADDR']);
		}

		// Literal it is, but some SMTP servers may not accept this
		if (!empty($_SERVER['SERVER_ADDR']) && $fallback === '[127.0.0.1]')
		{
			// Set the address literal prefix
			$prefix = strpos($_SERVER['SERVER_ADDR'], ':' !== false) ? 'IPv6:' : '';

			return  '[' . $prefix . $_SERVER['SERVER_ADDR'] . ']';
		}

		return $fallback;
	}

	/**
	 * Checks if this is a valid FQDN first by basic syntax and then if it has domain records
	 *
	 * @param string $hostname
	 * @return bool
	 */
	private function _isValidFQDN($hostname)
	{
		if (empty($hostname) || strpos($hostname, '.') === false)
		{
			return false;
		}

		if (preg_match('~^(?!\-)(?:[a-zA-Z\d\-]{0,62}[a-zA-Z\d]\.){1,126}(?!\d+)[a-zA-Z\d]{1,63}$~', $hostname) === 1)
		{
			// Check for ANY dns records for this name for simplicity although we really want A / AAAA
			return checkdnsrr($hostname, 'ANY');
		}

		return false;
	}
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for SiteCombiner.class.php -->		
	<file name="SOURCEDIR/SiteCombiner.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 */

/**]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 */

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$this->_combineFiles('css');

			// CSSmin it to save some space
			require_once(EXTDIR . '/cssmin.php');
			$compressor = new CSSmin();
			$this->_minified_cache = $compressor->run($this->_cache);

			// Combine in any pre minimized css files to our new minimized string
			$this->_minified_cache .= "\n" . $this->_min_cache;]]></search>
			<add><![CDATA[			$this->_combineFiles('css');

			// CSSmin it to save some space
			require_once(EXTDIR . '/cssmin/cssmin.php');
			$this->_minified_cache = CSSmin($this->_cache);

			// Combine in any pre minimized css files to our new minimized string
			$this->_minified_cache .= "\n" . $this->_min_cache;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for SiteDispatcher.class.php -->		
	<file name="SOURCEDIR/SiteDispatcher.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'moderate' => array('ModerationCenter_Controller', 'action_index'),
		'movetopic' => array('MoveTopic_Controller', 'action_movetopic'),
		'movetopic2' => array('MoveTopic_Controller', 'action_movetopic2'),
		'notify' => array('Notify_Controller', 'action_notify'),
		'notifyboard' => array('Notify_Controller', 'action_notifyboard'),
		'openidreturn' => array('OpenID_Controller', 'action_openidreturn'),
		'xrds' => array('OpenID_Controller', 'action_xrds'),]]></search>
			<add><![CDATA[		'moderate' => array('ModerationCenter_Controller', 'action_index'),
		'movetopic' => array('MoveTopic_Controller', 'action_movetopic'),
		'movetopic2' => array('MoveTopic_Controller', 'action_movetopic2'),
		'notifyboard' => array('Notify_Controller', 'action_notifyboard'),
		'openidreturn' => array('OpenID_Controller', 'action_openidreturn'),
		'xrds' => array('OpenID_Controller', 'action_xrds'),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$this->_default_action = $default_action;
		}

		if (!empty($modSettings['front_page'])
			&& is_callable(array($modSettings['front_page'], 'frontPageHook')))
		{
			$modSettings['default_forum_action'] = '?action=forum;';
			call_user_func_array(array($modSettings['front_page'], 'frontPageHook'), array(&$this->_default_action));]]></search>
			<add><![CDATA[			$this->_default_action = $default_action;
		}

		if (!empty($modSettings['front_page']) && class_exists($modSettings['front_page'])
			&& in_array('frontPageHook', get_class_methods($modSettings['front_page'])))
		{
			$modSettings['default_forum_action'] = '?action=forum;';
			call_user_func_array(array($modSettings['front_page'], 'frontPageHook'), array(&$this->_default_action));]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$this->_function_name .= '_api';

		// 3, 2, ... and go
		if (is_callable(array($this->_controller_name, $this->_function_name)))
		{
			return;
		}
		elseif (is_callable(array($this->_controller_name, 'action_index')))
		{
			$this->_function_name = 'action_index';
		}
		// This should never happen, that's why its here :P
		else
		{
			$this->_controller_name = $this->_default_action['controller'];
			$this->_function_name = $this->_default_action['function'];
			// Support legacy integrations.
			if (isset($this->_default_action['file']))
			{
				require_once($this->_default_action['file']);
			}
		}
	}
]]></search>
			<add><![CDATA[			$this->_function_name .= '_api';

		// 3, 2, ... and go
		if (class_exists($this->_controller_name))
		{
			// Method requested is in the list of its callable methods
			if (in_array($this->_function_name, get_class_methods($this->_controller_name)))
			{
				return;
			}

			// Maybe the default required by abstract method
			if ($this->_function_name !== 'action_index'
				&& in_array('action_index', get_class_methods($this->_controller_name)))
			{
				$this->_function_name = 'action_index';
				return;
			}
		}

		// This should never happen, that's why its here :P
		$this->_controller_name = $this->_default_action['controller'];
		$this->_function_name = $this->_default_action['function'];
		// Support legacy integrations.
		if (isset($this->_default_action['file']))
		{
			require_once($this->_default_action['file']);
		}
	}
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Subs.php -->		
	<file name="SOURCEDIR/Subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
				// Create an integer representation
				for ($i = 0; $i < $max_chars; $i++)
					$total += $possible_chars[ord($encrypted{$i})] * pow(63, $i);

				// Return the value
				$returned_ints[] = $max_chars == 4 ? min($total, 16777215) : $total;]]></search>
			<add><![CDATA[
				// Create an integer representation
				for ($i = 0; $i < $max_chars; $i++)
					$total += $possible_chars[ord($encrypted[$i])] * pow(63, $i);

				// Return the value
				$returned_ints[] = $max_chars == 4 ? min($total, 16777215) : $total;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		ob_start();
		header('Content-Encoding: none');
	}
}]]></search>
			<add><![CDATA[		ob_start();
		header('Content-Encoding: none');
	}
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for CoreFeatures.controller.php -->		
	<file name="ADMINDIR/CoreFeatures.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			),
			// pe = post email
			'pe' => array(
				'url' => 'action=admin;area=maillist',
				'save_callback' => 'postbyemail_toggle_callback',
				'settings' => array(
					'maillist_enabled' => 1,]]></search>
			<add><![CDATA[			),
			// pe = post email
			'pe' => array(
				'url' => 'action=admin;area=maillist;sa=emailsettings',
				'save_callback' => 'postbyemail_toggle_callback',
				'settings' => array(
					'maillist_enabled' => 1,]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Maintenance.controller.php -->		
	<file name="ADMINDIR/Maintenance.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$context['start'] = $this->_req->getQuery('start', 'intval', 0);

		// First time we do this?
		$id_board_from = $this->_req->getPost('id_board_from', 'intval', (int) $this->_req->query->id_board_from);
		$id_board_to = $this->_req->getPost('id_board_to', 'intval', (int) $this->_req->query->id_board_to);

		// No boards then this is your stop.
		if (empty($id_board_from) || empty($id_board_to))]]></search>
			<add><![CDATA[		$context['start'] = $this->_req->getQuery('start', 'intval', 0);

		// First time we do this?
		$id_board_from = $this->_req->getPost('id_board_from', 'intval', $this->_req->getQuery('id_board_from', 'intval', 0));
		$id_board_to = $this->_req->getPost('id_board_to', 'intval', $this->_req->getQuery('id_board_to', 'intval', 0));

		// No boards then this is your stop.
		if (empty($id_board_from) || empty($id_board_to))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		require_once(SUBSDIR . '/Topic.subs.php');

		// How many topics are we moving?
		if (!isset($this->_req->query->totaltopics))
			$total_topics = countTopicsFromBoard($id_board_from);
		else
		{
			$total_topics = (int) $this->_req->query->totaltopics;
			validateToken('admin_movetopics');
		}

		// We have topics to move so start the process.]]></search>
			<add><![CDATA[		require_once(SUBSDIR . '/Topic.subs.php');

		// How many topics are we moving?
		$total_topics = $this->_req->getQuery('totaltopics', 'intval', 0);
		if (empty($total_topics) || $context['start'] === 0)
		{
			validateToken('admin-maint');
			$total_topics = countTopicsFromBoard($id_board_from);
		}

		// We have topics to move so start the process.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				// If this is really taking some time, show the pause screen
				if (microtime(true) - $time_start > 3)
				{
					createToken('admin_movetopics');

					// What's the percent?
					$context['continue_percent'] = round(100 * ($context['start'] / $total_topics), 1);

					// Set up for the form
					$context['continue_get_data'] = '?action=admin;area=maintain;sa=topics;activity=massmove;id_board_from=' . $id_board_from . ';id_board_to=' . $id_board_to . ';totaltopics=' . $total_topics . ';start=' . $context['start'];
					$context['continue_post_data'] = '
						<input type="hidden" name="' . $context['session_var'] . '" value="' . $context['session_id'] . '" />
						<input type="hidden" name="' . $context['admin_movetopics_token_var'] . '" value="' . $context['admin_movetopics_token'] . '" />';

					// Let the template system do it's thang.
					return;]]></search>
			<add><![CDATA[				// If this is really taking some time, show the pause screen
				if (microtime(true) - $time_start > 3)
				{
					// What's the percent?
					$context['continue_percent'] = round(100 * ($context['start'] / $total_topics), 1);

					// Set up for the form
					$context['continue_get_data'] = '?action=admin;area=maintain;sa=topics;activity=massmove;id_board_from=' . $id_board_from . ';id_board_to=' . $id_board_to . ';totaltopics=' . $total_topics . ';start=' . $context['start'];
					$context['continue_post_data'] = '
						<input type="hidden" name="' . $context['session_var'] . '" value="' . $context['session_id'] . '" />';

					// Let the template system do it's thang.
					return;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageAttachments.controller.php -->		
	<file name="ADMINDIR/ManageAttachments.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				disableModules('attachments', array('post'));
			}

			// Changing the attachment upload directory
			if (isset($this->_req->post->attachmentUploadDir)
				|| !empty($this->_req->post->use_subdirectories_for_attachments))
			{
				if (!empty($this->_req->post->attachmentUploadDir) && file_exists($modSettings['attachmentUploadDir']) && $modSettings['attachmentUploadDir'] != $this->_req->post->attachmentUploadDir)
					rename($modSettings['attachmentUploadDir'], $this->_req->post->attachmentUploadDir);]]></search>
			<add><![CDATA[				disableModules('attachments', array('post'));
			}

			// Default/Manual implies no subdirectories
			if (empty($this->_req->post->automanage_attachments))
				$this->_req->post->use_subdirectories_for_attachments = 0;

			// Changing the attachment upload directory
			if (isset($this->_req->post->attachmentUploadDir))
			{
				if (!empty($this->_req->post->attachmentUploadDir) && file_exists($modSettings['attachmentUploadDir']) && $modSettings['attachmentUploadDir'] != $this->_req->post->attachmentUploadDir)
					rename($modSettings['attachmentUploadDir'], $this->_req->post->attachmentUploadDir);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			if (!empty($this->_req->post->use_subdirectories_for_attachments))
			{
				// Make sure we have a base directory defined
				if (isset($this->_req->post->use_subdirectories_for_attachments) && empty($this->_req->post->basedirectory_for_attachments))
					$this->_req->post->basedirectory_for_attachments = (!empty($modSettings['basedirectory_for_attachments']) ? ($modSettings['basedirectory_for_attachments']) : BOARDDIR);

				if (!empty($modSettings['attachment_basedirectories']))
				{
					if (!is_array($modSettings['attachment_basedirectories']))]]></search>
			<add><![CDATA[			if (!empty($this->_req->post->use_subdirectories_for_attachments))
			{
				// Make sure we have a base directory defined
				if (empty($this->_req->post->basedirectory_for_attachments))
					$this->_req->post->basedirectory_for_attachments = !empty($modSettings['basedirectory_for_attachments']) ? ($modSettings['basedirectory_for_attachments']) : BOARDDIR;

				// The current base directories that we know
				if (!empty($modSettings['attachment_basedirectories']))
				{
					if (!is_array($modSettings['attachment_basedirectories']))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				else
					$modSettings['attachment_basedirectories'] = array();

				if (!empty($this->_req->post->basedirectory_for_attachments) && !in_array($this->_req->post->basedirectory_for_attachments, $modSettings['attachment_basedirectories']))
				{
					$currentAttachmentUploadDir = $modSettings['currentAttachmentUploadDir'];

					if (!in_array($this->_req->post->basedirectory_for_attachments, $modSettings['attachmentUploadDir']))
					{
						if (!automanage_attachments_create_directory($this->_req->post->basedirectory_for_attachments))
							$this->_req->post->basedirectory_for_attachments = $modSettings['basedirectory_for_attachments'];
					}

					if (!in_array($this->_req->post->basedirectory_for_attachments, $modSettings['attachment_basedirectories']))
					{
						$modSettings['attachment_basedirectories'][$modSettings['currentAttachmentUploadDir']] = $this->_req->post->basedirectory_for_attachments;]]></search>
			<add><![CDATA[				else
					$modSettings['attachment_basedirectories'] = array();

				// Trying to use a non existent base directory
				if (!empty($this->_req->post->basedirectory_for_attachments) && !in_array($this->_req->post->basedirectory_for_attachments, $modSettings['attachment_basedirectories']))
				{
					$currentAttachmentUploadDir = $modSettings['currentAttachmentUploadDir'];

					// If this is a new directory being defined, attempt to create it
					if (!in_array($this->_req->post->basedirectory_for_attachments, $modSettings['attachmentUploadDir']))
					{
						if (!automanage_attachments_create_directory($this->_req->post->basedirectory_for_attachments))
							$this->_req->post->basedirectory_for_attachments = $modSettings['basedirectory_for_attachments'];
					}

					// The base directory should be in our list of available bases
					if (!in_array($this->_req->post->basedirectory_for_attachments, $modSettings['attachment_basedirectories']))
					{
						$modSettings['attachment_basedirectories'][$modSettings['currentAttachmentUploadDir']] = $this->_req->post->basedirectory_for_attachments;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							'currentAttachmentUploadDir' => $currentAttachmentUploadDir,
						));

						$this->_req->post->use_subdirectories_for_attachments = 1;
						$this->_req->post->attachmentUploadDir = serialize($modSettings['attachmentUploadDir']);
					}
				}]]></search>
			<add><![CDATA[							'currentAttachmentUploadDir' => $currentAttachmentUploadDir,
						));

						$this->_req->post->attachmentUploadDir = serialize($modSettings['attachmentUploadDir']);
					}
				}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						? $txt['basedirectory_for_attachments_current']
						: $txt['basedirectory_for_attachments_warning']))
				),
				empty($modSettings['attachment_basedirectories']) && $modSettings['currentAttachmentUploadDir'] == 1 && (is_array($modSettings['attachmentUploadDir']) && count($modSettings['attachmentUploadDir']) == 1)
					? array('text', 'attachmentUploadDir', 'postinput' => $txt['attachmentUploadDir_multiple_configure'], 40, 'invalid' => !$context['valid_upload_dir'])
					: array('var_message', 'attach_current_directory', 'postinput' => $txt['attachmentUploadDir_multiple_configure'], 'message' => 'attachment_path', 'invalid' => empty($context['valid_upload_dir']), 'text_label' => (!empty($context['valid_upload_dir'])
						? $txt['attach_current_dir']]]></search>
			<add><![CDATA[						? $txt['basedirectory_for_attachments_current']
						: $txt['basedirectory_for_attachments_warning']))
				),
				is_string($modSettings['attachmentUploadDir'])
					? array('text', 'attachmentUploadDir', 'postinput' => $txt['attachmentUploadDir_multiple_configure'], 40, 'invalid' => !$context['valid_upload_dir'])
					: array('var_message', 'attach_current_directory', 'postinput' => $txt['attachmentUploadDir_multiple_configure'], 'message' => 'attachment_path', 'invalid' => empty($context['valid_upload_dir']), 'text_label' => (!empty($context['valid_upload_dir'])
						? $txt['attach_current_dir']]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'files_without_attachment' => 0,
		);

		$to_fix = !empty($this->_req->session->attachments_to_fix) ? $this->_req->session->attachments_to_fix : array();
		$context['repair_errors'] = $this->_req->getSession('attachments_to_fix2', $context['repair_errors']);
		$fix_errors = isset($this->_req->query->fixErrors) ? true : false;

		// Get stranded thumbnails.]]></search>
			<add><![CDATA[			'files_without_attachment' => 0,
		);

		$to_fix = !empty($_SESSION['attachments_to_fix']) ? $_SESSION['attachments_to_fix'] : array();
		$context['repair_errors'] = isset($_SESSION['attachments_to_fix2']) ? $_SESSION['attachments_to_fix2'] : $context['repair_errors'];
		$fix_errors = isset($this->_req->query->fixErrors) ? true : false;

		// Get stranded thumbnails.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			checkSession();

			$this->current_dir = $this->_req->getPost('current_dir', 'intval', 0);
			$new_dirs = array();

			require_once(SUBSDIR . '/Themes.subs.php');]]></search>
			<add><![CDATA[		{
			checkSession();

			$this->current_dir = $this->_req->getPost('current_dir', 'intval', 1);
			$new_dirs = array();

			require_once(SUBSDIR . '/Themes.subs.php');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
						unset($modSettings['attachment_basedirectories'][$id]);
						$update = (array(
							'attachment_basedirectories' => serialize($modSettings['attachment_basedirectories']),
							'basedirectory_for_attachments' => $modSettings['attachmentUploadDir'][$this->current_base_dir],
						));
					}
				}]]></search>
			<add><![CDATA[
						unset($modSettings['attachment_basedirectories'][$id]);
						$update = (array(
							'attachment_basedirectories' => !empty($modSettings['attachment_basedirectories']) ? serialize($modSettings['attachment_basedirectories']) : '',
							'basedirectory_for_attachments' => isset($modSettings['attachmentUploadDir'][$this->current_base_dir]) ? $modSettings['attachmentUploadDir'][$this->current_base_dir] : '',
						));
					}
				}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageCalendarModule.controller.php -->		
	<file name="ADMINDIR/ManageCalendarModule.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				array(
					'position' => 'below_table_data',
					'class' => 'submitbutton',
					'value' => '<input type="submit" name="delete" value="' . $txt['quickmod_delete_selected'] . '" class="right_submit" onclick="return confirm(\'' . $txt['holidays_delete_confirm'] . '\');" />
					<a class="linkbutton" href="' . $scripturl . '?action=admin;area=managecalendar;sa=editholiday">' . $txt['holidays_add'] . '</a>',
				),
			),
		);]]></search>
			<add><![CDATA[				array(
					'position' => 'below_table_data',
					'class' => 'submitbutton',
					'value' => '<a class="linkbutton_right" href="' . $scripturl . '?action=admin;area=managecalendar;sa=editholiday">' . $txt['holidays_add'] . '</a>
					<input type="submit" name="delete" value="' . $txt['quickmod_delete_selected'] . '" onclick="return confirm(\'' . $txt['holidays_delete_confirm'] . '\');" />',
				),
			),
		);]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageErrors.controller.php -->		
	<file name="ADMINDIR/ManageErrors.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			{
				case 'id_member':
					$id = $filter['value']['sql'];
					loadMemberData($id, false, 'minimal');
					$context['filter']['value']['html'] = '<a href="' . $scripturl . '?action=profile;u=' . $id . '">' . $user_profile[$id]['real_name'] . '</a>';
					break;]]></search>
			<add><![CDATA[			{
				case 'id_member':
					$id = $filter['value']['sql'];
					$user_profile[$id]['real_name'] = '';
					loadMemberData($id, false, 'minimal');
					$context['filter']['value']['html'] = '<a href="' . $scripturl . '?action=profile;u=' . $id . '">' . $user_profile[$id]['real_name'] . '</a>';
					break;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageFeatures.controller.php -->		
	<file name="ADMINDIR/ManageFeatures.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			{
				$front_page = (string) $this->_req->post->front_page;
				if (
					is_callable(array($modSettings['front_page'], 'validateFrontPageOptions'))
					&& !$front_page::validateFrontPageOptions($this->_req->post)
				) {
					$this->_req->post->front_page = '';]]></search>
			<add><![CDATA[			{
				$front_page = (string) $this->_req->post->front_page;
				if (
					class_exists($modSettings['front_page'])
					&& in_array('validateFrontPageOptions', get_class_methods($modSettings['front_page']))
					&& !$front_page::validateFrontPageOptions($this->_req->post)
				) {
					$this->_req->post->front_page = '';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		$notification_methods = Notifications::instance()->getNotifiers();
		$notification_types = getNotificationTypes();
		$current_settings = unserialize($modSettings['notification_methods']);

		foreach ($notification_types as $title)
		{
			$config_vars[] = array('title', 'setting_' . $title);

			foreach ($notification_methods as $method)
			{
				if ($method === 'notification')
					$text_label = $txt['setting_notify_enable_this'];
				else
					$text_label = $txt['notify_' . $method];

				$config_vars[] = array('check', 'notifications[' . $title . '][' . $method . ']', 'text_label' => $text_label);
				$modSettings['notifications[' . $title . '][' . $method . ']'] = !empty($current_settings[$title][$method]);
			}
		}
]]></search>
			<add><![CDATA[		);

		$notification_methods = Notifications::instance()->getNotifiers();
		list($notification_types, $frequency) = getNotificationTypes();
		$current_settings = unserialize($modSettings['notification_methods']);

		foreach ($notification_types as $title)
		{
			$config_vars[] = array('title', 'setting_' . $title);

			foreach ($notification_methods as $key => $method)
			{
				// If the method is available in this area, show the option
				if (in_array($method, $frequency[$title]))
				{
					if ($method === 'notification')
					{
						$text_label = $txt['setting_notify_enable_this'];
					}
					else
					{
						$text_label = $txt['notify_' . $method];
					}

					$config_vars[] = array('check', 'notifications[' . $title . '][' . $method . ']', 'text_label' => $text_label);
					$modSettings['notifications[' . $title . '][' . $method . ']'] = !empty($current_settings[$title][$method]);
				}
			}
		}
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageLanguages.controller.php -->		
	<file name="ADMINDIR/ManageLanguages.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	private function _checkOpcache()
	{
		return (extension_loaded('Zend OPcache') && ini_get('opcache.enable') && stripos(BOARDDIR, ini_get('opcache.restrict_api')) !== 0);
	}

	/**]]></search>
			<add><![CDATA[	 */
	private function _checkOpcache()
	{
		return (extension_loaded('Zend OPcache') && ini_get('opcache.enable') &&
			(ini_get('opcache.restrict_api') === '' || stripos(BOARDDIR, ini_get('opcache.restrict_api')) !== 0));
	}

	/**]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageMail.controller.php -->		
	<file name="ADMINDIR/ManageMail.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			if (!empty($this->_req->post->mail_batch_size))
				$this->_req->post->mail_batch_size = min((int) $this->_req->post->mail_batch_size, (int) $this->_req->post->mail_period_limit);

			$settingsForm->setConfigValues((array) $this->_req->post);
			$settingsForm->save();
			redirectexit('action=admin;area=mailqueue;sa=settings');]]></search>
			<add><![CDATA[			if (!empty($this->_req->post->mail_batch_size))
				$this->_req->post->mail_batch_size = min((int) $this->_req->post->mail_batch_size, (int) $this->_req->post->mail_period_limit);

			// If not supplied, attempt to set a FQDN value for the SMTP client
			if (empty($this->_req->post->smtp_client) && $this->_req->post->mail_type === '1')
			{
				$this->_req->post->smtp_client = detectServer()->getFQDN();
			}

			$settingsForm->setConfigValues((array) $this->_req->post);
			$settingsForm->save();
			redirectexit('action=admin;area=mailqueue;sa=settings');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				// SMTP stuff.
				array('select', 'mail_type', array($txt['mail_type_default'], 'SMTP')),
				array('text', 'smtp_host'),
				array('text', 'smtp_port'),
				array('check', 'smtp_starttls'),
				array('text', 'smtp_username'),]]></search>
			<add><![CDATA[				// SMTP stuff.
				array('select', 'mail_type', array($txt['mail_type_default'], 'SMTP')),
				array('text', 'smtp_host'),
				array('text', 'smtp_client'),
				array('text', 'smtp_port'),
				array('check', 'smtp_starttls'),
				array('text', 'smtp_username'),]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageMaillist.controller.php -->		
	<file name="ADMINDIR/ManageMaillist.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Prep and show the template with what we found
		$context['body'] = $parser->parseEmail($text);
		$context['to'] = $txt['to'] . ' ' . (isset($email_to) ? $email_to : '');
		$context['notice_subject'] = isset($temp_email[0]['subject']) ? $txt['subject'] . ': ' . $temp_email[0]['subject'] : '';
		$context['notice_from'] = isset($temp_email[0]['from']) ? $txt['from'] . ': ' . $temp_email[0]['from'] : '';
		$context['page_title'] = $txt['show_notice'];
		$context['error_code'] = isset($temp_email[0]['error_code']) && isset($txt[$temp_email[0]['error_code']]) ? $txt[$temp_email[0]['error_code']] : '';
		$context['sub_template'] = 'show_email';]]></search>
			<add><![CDATA[
		// Prep and show the template with what we found
		$context['body'] = $parser->parseEmail($text);
		$context['to'] = isset($email_to) ? $email_to : '';
		$context['notice_subject'] = isset($temp_email[0]['subject']) ? $temp_email[0]['subject'] : '';
		$context['notice_from'] = isset($temp_email[0]['from']) ? $temp_email[0]['from'] : '';
		$context['page_title'] = $txt['show_notice'];
		$context['error_code'] = isset($temp_email[0]['error_code']) && isset($txt[$temp_email[0]['error_code']]) ? $txt[$temp_email[0]['error_code']] : '';
		$context['sub_template'] = 'show_email';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				{
					// Set up the details needed to get this posted
					$force = true;
					$key = $temp_email[0]['key'];
					$data = $temp_email[0]['body'];

					// Unknown from email?  Update the message ONLY if we found an appropriate one during the error checking process]]></search>
			<add><![CDATA[				{
					// Set up the details needed to get this posted
					$force = true;
					$key = $temp_email[0]['key'] . '-' . $temp_email[0]['type'] . $temp_email[0]['message'];
					$data = $temp_email[0]['body'];

					// Unknown from email?  Update the message ONLY if we found an appropriate one during the error checking process]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $context, $txt, $modSettings, $scripturl, $mbname;

		if (!isset($this->_req->query->bounce))
		{
			checkSession('get');
			validateToken('admin-ml', 'get');]]></search>
			<add><![CDATA[	{
		global $context, $txt, $modSettings, $scripturl, $mbname;

		if (isset($this->_req->query->bounce))
		{
			checkSession('get');
			validateToken('admin-ml', 'get');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		require_once(SUBSDIR . '/Mail.subs.php');

		// We should have been sent an email ID
		if (isset($this->_req->query->item))
		{
			// Needs to be an int!
			$id = (int) $this->_req->query->item;

			// Load up the email details, no funny biz yall ;)
			$temp_email = list_maillist_unapproved($id);
]]></search>
			<add><![CDATA[		require_once(SUBSDIR . '/Mail.subs.php');

		// We should have been sent an email ID
		$id = $this->_req->get('item', 'intval');
		if (!empty($id))
		{
			// Load up the email details, no funny biz yall ;)
			$temp_email = list_maillist_unapproved($id);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context['settings_message'] = $txt['badid'];

		// Check if they are sending the notice
		if (isset($this->_req->query->bounce) && isset($temp_email))
		{
			checkSession('post');
			validateToken('admin-ml');]]></search>
			<add><![CDATA[			$context['settings_message'] = $txt['badid'];

		// Check if they are sending the notice
		if (isset($this->_req->post->bounce) && isset($temp_email))
		{
			checkSession('post');
			validateToken('admin-ml');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				else
				{
					// Time for someone to get a we're so sorry message!
					sendmail($to, $subject, $body, null, null, false, 5);
					redirectexit('action=admin;area=maillist;bounced');
				}]]></search>
			<add><![CDATA[				else
				{
					// Time for someone to get a we're so sorry message!
					$mark_down = new Html_2_Md($body);
					$body = $mark_down->get_markdown();
					sendmail($to, $subject, $body, null, null, false, 5);
					redirectexit('action=admin;area=maillist;bounced');
				}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageMembers.controller.php -->		
	<file name="ADMINDIR/ManageMembers.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		global $txt, $scripturl, $context, $modSettings;

		// Set the current sub action.
		$context['sub_action'] = $this->_req->getPost('sa', 'strval', 'all');

		// Are we performing a mass action?
		if (isset($this->_req->post->maction_on_members, $this->_req->post->maction) && !empty($this->_req->post->members))]]></search>
			<add><![CDATA[		global $txt, $scripturl, $context, $modSettings;

		// Set the current sub action.
		$context['sub_action'] = $this->_req->getQuery('sa', 'strval', $this->_req->getPost('sa', 'strval', 'all'));

		// Are we performing a mass action?
		if (isset($this->_req->post->maction_on_members, $this->_req->post->maction) && !empty($this->_req->post->members))]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageSearch.controller.php -->		
	<file name="ADMINDIR/ManageSearch.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			checkSession('get');
			validateToken('admin-msm', 'get');

			alterFullTextIndex('{db_prefix}messages', 'body', true);
			$fulltext_index = true;
		}
		elseif ($this->_req->getQuery('sa', 'trim', '') === 'removefulltext' && !empty($fulltext_index))]]></search>
			<add><![CDATA[			checkSession('get');
			validateToken('admin-msm', 'get');

			alterFullTextIndex('{db_prefix}messages', array('body', 'subject', 'subject,body'), true);
			$fulltext_index = true;
		}
		elseif ($this->_req->getQuery('sa', 'trim', '') === 'removefulltext' && !empty($fulltext_index))]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageSmileys.controller.php -->		
	<file name="ADMINDIR/ManageSmileys.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			checkSession();

			$this->_req->post->smiley_sets_default = $this->_req->getPost('smiley_sets_default', 'trim|strval', 'default');

			// Make sure that the smileys are in the right order after enabling them.
			if (isset($this->_req->post->smiley_enable))]]></search>
			<add><![CDATA[			checkSession();

			$this->_req->post->smiley_sets_default = $this->_req->getPost('smiley_sets_default', 'trim|strval', 'default');
			$this->_req->post->smileys_url = rtrim($this->_req->post->smileys_url, '/\\');

			// Make sure that the smileys are in the right order after enabling them.
			if (isset($this->_req->post->smiley_enable))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context['smiley_sets'][$i] = array(
				'id' => $i,
				'path' => htmlspecialchars($set, ENT_COMPAT, 'UTF-8'),
				'name' => htmlspecialchars($set_names[$i], ENT_COMPAT, 'UTF-8'),
				'selected' => $set == $modSettings['smiley_sets_default']
			);
]]></search>
			<add><![CDATA[			$context['smiley_sets'][$i] = array(
				'id' => $i,
				'path' => htmlspecialchars($set, ENT_COMPAT, 'UTF-8'),
				'name' => htmlspecialchars(stripslashes($set_names[$i]), ENT_COMPAT, 'UTF-8'),
				'selected' => $set == $modSettings['smiley_sets_default']
			);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context['smiley_sets'][$i] = array(
				'id' => $i,
				'path' => htmlspecialchars($set, ENT_COMPAT, 'UTF-8'),
				'name' => htmlspecialchars($set_names[$i], ENT_COMPAT, 'UTF-8'),
				'selected' => $set == $modSettings['smiley_sets_default']
			);
]]></search>
			<add><![CDATA[			$context['smiley_sets'][$i] = array(
				'id' => $i,
				'path' => htmlspecialchars($set, ENT_COMPAT, 'UTF-8'),
				'name' => htmlspecialchars(stripslashes($set_names[$i]), ENT_COMPAT, 'UTF-8'),
				'selected' => $set == $modSettings['smiley_sets_default']
			);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context['smiley_sets'][$i] = array(
				'id' => $i,
				'path' => htmlspecialchars($set, ENT_COMPAT, 'UTF-8'),
				'name' => htmlspecialchars($set_names[$i], ENT_COMPAT, 'UTF-8'),
				'selected' => $set == $modSettings['smiley_sets_default']
			);
]]></search>
			<add><![CDATA[			$context['smiley_sets'][$i] = array(
				'id' => $i,
				'path' => htmlspecialchars($set, ENT_COMPAT, 'UTF-8'),
				'name' => htmlspecialchars(stripslashes($set_names[$i]), ENT_COMPAT, 'UTF-8'),
				'selected' => $set == $modSettings['smiley_sets_default']
			);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				$context['smiley_sets'][$i] = array(
					'id' => $i,
					'path' => htmlspecialchars($set, ENT_COMPAT, 'UTF-8'),
					'name' => htmlspecialchars($set_names[$i], ENT_COMPAT, 'UTF-8'),
					'selected' => $set == $modSettings['smiley_sets_default']
				);
]]></search>
			<add><![CDATA[				$context['smiley_sets'][$i] = array(
					'id' => $i,
					'path' => htmlspecialchars($set, ENT_COMPAT, 'UTF-8'),
					'name' => htmlspecialchars(stripslashes($set_names[$i]), ENT_COMPAT, 'UTF-8'),
					'selected' => $set == $modSettings['smiley_sets_default']
				);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
				if (!empty($iconInsert_new))
					addMessageIcon($iconInsert_new);
			}

			// Sort by order, so it is quicker :)]]></search>
			<add><![CDATA[
				if (!empty($iconInsert_new))
					addMessageIcon($iconInsert_new);

				// Flush the cache so the changes are reflected
				Cache::instance()->remove('posting_icons-' . (int) $this->_req->post->icon_board);
			}

			// Sort by order, so it is quicker :)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$smiley_context = array();

		foreach ($smiley_sets as $i => $set)
			$smiley_context[$set] = $set_names[$i];

		$this->_smiley_context = $smiley_context;
	}]]></search>
			<add><![CDATA[		$smiley_context = array();

		foreach ($smiley_sets as $i => $set)
			$smiley_context[$set] = stripslashes($set_names[$i]);

		$this->_smiley_context = $smiley_context;
	}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageThemes.controller.php -->		
	<file name="ADMINDIR/ManageThemes.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 *
 * @todo Update this for the new package manager?]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 *
 * @todo Update this for the new package manager?]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// How are we going to install this theme, from a dir, zip, copy of default?
		if ((!empty($_FILES['theme_gz']) && (!isset($_FILES['theme_gz']['error']) || $_FILES['theme_gz']['error'] != 4)) || !empty($this->_req->query->theme_gz))
			$method = 'upload';
		elseif (isset($this->_req->query->theme_dir) && rtrim(realpath($this->_req->query->theme_dir), '/\\') != realpath(BOARDDIR . '/themes') && file_exists($this->_req->query->theme_dir))
			$method = 'path';
		else
			$method = 'copy';]]></search>
			<add><![CDATA[		// How are we going to install this theme, from a dir, zip, copy of default?
		if ((!empty($_FILES['theme_gz']) && (!isset($_FILES['theme_gz']['error']) || $_FILES['theme_gz']['error'] != 4)) || !empty($this->_req->query->theme_gz))
			$method = 'upload';
		elseif (isset($this->_req->post->theme_dir) && rtrim(realpath($this->_req->post->theme_dir), '/\\') != realpath(BOARDDIR . '/themes') && file_exists($this->_req->post->theme_dir))
			$method = 'path';
		else
			$method = 'copy';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Packages.controller.php -->		
	<file name="ADMINDIR/Packages.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'no_items_label' => $txt['no_packages'],
				'get_items' => array(
					'function' => array($this, 'list_packages'),
					'params' => array('type' => $type, 'installed' => $installed),
				),
				'base_href' => $scripturl . '?action=admin;area=packages;sa=' . $context['sub_action'] . ';type=' . $type,
				'default_sort_col' => 'mod_name' . $type,]]></search>
			<add><![CDATA[				'no_items_label' => $txt['no_packages'],
				'get_items' => array(
					'function' => array($this, 'list_packages'),
					'params' => array('params' => $type, 'installed' => $installed),
				),
				'base_href' => $scripturl . '?action=admin;area=packages;sa=' . $context['sub_action'] . ';type=' . $type,
				'default_sort_col' => 'mod_name' . $type,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	/**
	 * Get a listing of all the packages
	 *
	 * - Determines if the package is a ddon, smiley, avatar, language or unknown package
	 * - Determines if the package has been installed or not
	 *
	 * @param int $start The item to start with (for pagination purposes)]]></search>
			<add><![CDATA[	/**
	 * Get a listing of all the packages
	 *
	 * - Determines if the package is addon, smiley, avatar, language or unknown package
	 * - Determines if the package has been installed or not
	 *
	 * @param int $start The item to start with (for pagination purposes)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							// Get the highest install version that is available from the package
							foreach ($installs as $install)
							{
								$packageInfo['can_emulate_install'] = matchHighestPackageVersion($install->fetch('@for'), $reset, $the_version);
								$reset = false;
							}
						}]]></search>
			<add><![CDATA[							// Get the highest install version that is available from the package
							foreach ($installs as $install)
							{
								$packageInfo['can_emulate_install'] = matchHighestPackageVersion($install->fetch('@for'), $the_version, $reset);
								$reset = false;
							}
						}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							// Get the highest install version that is available from the package
							foreach ($uninstalls as $uninstall)
							{
								$packageInfo['can_emulate_uninstall'] = matchHighestPackageVersion($uninstall->fetch('@for'), $reset, $the_version);
								$reset = false;
							}
						}]]></search>
			<add><![CDATA[							// Get the highest install version that is available from the package
							foreach ($uninstalls as $uninstall)
							{
								$packageInfo['can_emulate_uninstall'] = matchHighestPackageVersion($uninstall->fetch('@for'), $the_version, $reset);
								$reset = false;
							}
						}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						{
							if (!empty($context['available_addon'][$packageInfo['id']]))
							{
								$packages['modification'][strtolower($packageInfo[$sort]) . '_' . $sort_id['mod']] = $packageInfo['id'];
								$context['available_addon'][$packageInfo['id']] = array_merge($context['available_addon'][$packageInfo['id']], $packageInfo);
							}
						}]]></search>
			<add><![CDATA[						{
							if (!empty($context['available_addon'][$packageInfo['id']]))
							{
								$packages['addon'][strtolower($packageInfo[$sort]) . '_' . $sort_id['addon']] = $packageInfo['id'];
								$context['available_addon'][$packageInfo['id']] = array_merge($context['available_addon'][$packageInfo['id']], $packageInfo);
							}
						}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Attachment.controller.php -->		
	<file name="CONTROLLERDIR/Attachment.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					$attachment[1] = !empty($full_attach[1]) ? $full_attach[1] : '';
					$attachment[4] = 0;
					$attachment[5] = 0;

					// return mime type ala mimetype extension
					$check = returnMimeThumb(!empty($full_attach[3]) ? $full_attach[3] : 'default');]]></search>
			<add><![CDATA[					$attachment[1] = !empty($full_attach[1]) ? $full_attach[1] : '';
					$attachment[4] = 0;
					$attachment[5] = 0;
					$attachment[7] = $full_attach[7];
					$attachment[8] = $full_attach[8];

					// return mime type ala mimetype extension
					$check = returnMimeThumb(!empty($full_attach[3]) ? $full_attach[3] : 'default');]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Auth.controller.php -->		
	<file name="CONTROLLERDIR/Auth.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$valid_password = validateLoginPassword($sha_passwd, $user_settings['passwd'], $user_settings['member_name']);
		}

		// Bad password!  Thought you could fool the database?!
		if ($valid_password === false)
		{]]></search>
			<add><![CDATA[			$valid_password = validateLoginPassword($sha_passwd, $user_settings['passwd'], $user_settings['member_name']);
		}

		require_once(SUBSDIR . '/Members.subs.php');

		// Bad password!  Thought you could fool the database?!
		if ($valid_password === false)
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// Whichever encryption it was using, let's make it use ElkArte's now ;).
			if (in_array($user_settings['passwd'], $other_passwords))
			{
				$tokenizer = new Token_Hash();
				$user_settings['passwd'] = validateLoginPassword($sha_passwd, '', '', true);
				$user_settings['password_salt'] = $tokenizer->generate_hash(4);

				// Update the password hash and set up the salt.
				require_once(SUBSDIR . '/Members.subs.php');
				updateMemberData($user_settings['id_member'], array('passwd' => $user_settings['passwd'], 'password_salt' => $user_settings['password_salt'], 'passwd_flood' => ''));
			}
			// Okay, they for sure didn't enter the password!]]></search>
			<add><![CDATA[			// Whichever encryption it was using, let's make it use ElkArte's now ;).
			if (in_array($user_settings['passwd'], $other_passwords))
			{
				updateMemberSalt($user_settings['id_member']);
				$user_settings['passwd'] = validateLoginPassword($sha_passwd, '', '', true);

				// Update the password hash and set up the salt.
				updateMemberData($user_settings['id_member'], array('passwd' => $user_settings['passwd'], 'password_salt' => $user_settings['password_salt'], 'passwd_flood' => ''));
			}
			// Okay, they for sure didn't enter the password!]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			validatePasswordFlood($user_settings['id_member'], $user_settings['passwd_flood'], true);

			// If we got here then we can reset the flood counter.
			require_once(SUBSDIR . '/Members.subs.php');
			updateMemberData($user_settings['id_member'], array('passwd_flood' => ''));
		}

		// Correct password, but they've got no salt; fix it!
		if ($user_settings['password_salt'] === '')
		{
			require_once(SUBSDIR . '/Members.subs.php');
			$tokenizer = new Token_Hash();
			$user_settings['password_salt'] = $tokenizer->generate_hash(4);
			updateMemberData($user_settings['id_member'], array('password_salt' => $user_settings['password_salt']));
		}

		// Let's track the last used one-time password.
		if (!empty($_POST['otp_token']))
		{
			require_once(SUBSDIR . '/Members.subs.php');
			updateMemberData($user_settings['id_member'], array('otp_used' => (int) $_POST['otp_token']));
		}
		// Check their activation status.]]></search>
			<add><![CDATA[			validatePasswordFlood($user_settings['id_member'], $user_settings['passwd_flood'], true);

			// If we got here then we can reset the flood counter.
			updateMemberData($user_settings['id_member'], array('passwd_flood' => ''));
		}

		// Correct password, but they've got no/old salt; fix it!
		if (strlen($user_settings['password_salt'] < 9))
		{
			updateMemberSalt($user_settings['id_member']);
		}

		// Let's track the last used one-time password.
		if (!empty($_POST['otp_token']))
		{
			updateMemberData($user_settings['id_member'], array('otp_used' => (int) $_POST['otp_token']));
		}
		// Check their activation status.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		session_destroy();
		if (!empty($user_info['id']))
		{
			$tokenizer = new Token_Hash();
			require_once(SUBSDIR . '/Members.subs.php');
			updateMemberData($user_info['id'], array('password_salt' => $tokenizer->generate_hash(4)));
		}

		// Off to the merry board index we go!]]></search>
			<add><![CDATA[		session_destroy();
		if (!empty($user_info['id']))
		{
			require_once(SUBSDIR . '/Members.subs.php');
			updateMemberSalt($user_info['id'], true);
		}

		// Off to the merry board index we go!]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Display.controller.php -->		
	<file name="CONTROLLERDIR/Display.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'height' => '250px',
			'width' => '100%',
			// We do XML preview here.
			'preview_type' => 0,
		);

		// Trigger the prepare_context event for modules that have tied in to it]]></search>
			<add><![CDATA[			'height' => '250px',
			'width' => '100%',
			// We do XML preview here.
			'preview_type' => 1,
		);

		// Trigger the prepare_context event for modules that have tied in to it]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'href' => $scripturl . '?topic=' . $topic . '.msg' . $message['id_msg'] . '#msg' . $message['id_msg'],
			'link' => '<a href="' . $scripturl . '?topic=' . $topic . '.msg' . $message['id_msg'] . '#msg' . $message['id_msg'] . '" rel="nofollow">' . $message['subject'] . '</a>',
			'member' => &$memberContext[$message['id_member']],
			'icon' => $message['icon'],
			'icon_url' => $this->_icon_sources->{$message['icon']},
			'subject' => $message['subject'],
			'time' => standardTime($message['poster_time']),
			'html_time' => htmlTime($message['poster_time']),]]></search>
			<add><![CDATA[			'href' => $scripturl . '?topic=' . $topic . '.msg' . $message['id_msg'] . '#msg' . $message['id_msg'],
			'link' => '<a href="' . $scripturl . '?topic=' . $topic . '.msg' . $message['id_msg'] . '#msg' . $message['id_msg'] . '" rel="nofollow">' . $message['subject'] . '</a>',
			'member' => &$memberContext[$message['id_member']],
			'icon' => $this->_icon_sources->getIconName($message['icon']),
			'icon_url' => $this->_icon_sources->getIconURL($message['icon']),
			'subject' => $message['subject'],
			'time' => standardTime($message['poster_time']),
			'html_time' => htmlTime($message['poster_time']),]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Emailpost.controller.php -->		
	<file name="CONTROLLERDIR/Emailpost.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// Make the post.
	createPost($msgOptions, $topicOptions, $posterOptions);

	// We need the auto_notify setting, it may be theme based so pass the theme in use
	$theme_settings = query_get_theme($pbe['profile']['id_member'], $pbe['profile']['id_theme'], $topic_info);
	$auto_notify = isset($theme_settings['auto_notify']) ? $theme_settings['auto_notify'] : 0;]]></search>
			<add><![CDATA[	// Make the post.
	createPost($msgOptions, $topicOptions, $posterOptions);

	// Bind any attachments that may be included to this new message
	if (!empty($attachIDs) && !empty($msgOptions['id']))
	{
		bindMessageAttachments($msgOptions['id'], $attachIDs);
	}

	// We need the auto_notify setting, it may be theme based so pass the theme in use
	$theme_settings = query_get_theme($pbe['profile']['id_member'], $pbe['profile']['id_theme'], $topic_info);
	$auto_notify = isset($theme_settings['auto_notify']) ? $theme_settings['auto_notify'] : 0;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// Attempt to make the new topic.
	createPost($msgOptions, $topicOptions, $posterOptions);

	// The auto_notify setting
	$theme_settings = query_get_theme($pbe['profile']['id_member'], $pbe['profile']['id_theme'], $board_info);
	$auto_notify = isset($theme_settings['auto_notify']) ? $theme_settings['auto_notify'] : 0;]]></search>
			<add><![CDATA[	// Attempt to make the new topic.
	createPost($msgOptions, $topicOptions, $posterOptions);

	// Bind any attachments that may be included to this new topic
	if (!empty($attachIDs) && !empty($msgOptions['id']))
	{
		bindMessageAttachments($msgOptions['id'], $attachIDs);
	}

	// The auto_notify setting
	$theme_settings = query_get_theme($pbe['profile']['id_member'], $pbe['profile']['id_theme'], $board_info);
	$auto_notify = isset($theme_settings['auto_notify']) ? $theme_settings['auto_notify'] : 0;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Likes.controller.php -->		
	<file name="CONTROLLERDIR/Likes.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							$type,
							$this->_id_liked,
							$user_info['id'],
							array('id_members' => array($liked_message['id_member']), 'rlike_notif' => empty($modSettings['mentions_dont_notify_rlike']))
						));
					}
				}]]></search>
			<add><![CDATA[							$type,
							$this->_id_liked,
							$user_info['id'],
							array('id_members' => array($liked_message['id_member']), 'rlike_notif' => empty($modSettings['mentions_dont_notify_rlike']), 'subject' => $liked_message['subject'])
						));
					}
				}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Members.controller.php -->		
	<file name="CONTROLLERDIR/Members.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$user_info['buddies'][] = $user;

			// Do we want a mention for our newly added buddy?
			if (!empty($modSettings['mentions_enabled']) && !empty($modSettings['mentions_buddy']))
			{
				$notifier = Notifications::instance();
				$notifier->add(new Notifications_Task(]]></search>
			<add><![CDATA[			$user_info['buddies'][] = $user;

			// Do we want a mention for our newly added buddy?
			if (!empty($modSettings['mentions_enabled']))
			{
				$notifier = Notifications::instance();
				$notifier->add(new Notifications_Task(]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Mentions.controller.php -->		
	<file name="CONTROLLERDIR/Mentions.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function action_fetch()
	{
		global $user_info, $context, $txt, $modSettings;

		if (empty($modSettings['usernotif_favicon_enable']) && empty($modSettings['usernotif_desktop_enable']))
			die();]]></search>
			<add><![CDATA[	 */
	public function action_fetch()
	{
		global $user_info, $context, $txt, $modSettings, $scripturl;

		if (empty($modSettings['usernotif_favicon_enable']) && empty($modSettings['usernotif_desktop_enable']))
			die();]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			$context['json_data']['desktop_notifications'] = array(
				'new_from_last' => getNewMentions($user_info['id'], $lastsent),
				'title' => sprintf($txt['forum_notification'], $context['forum_name']),
			);
			$context['json_data']['desktop_notifications']['message'] = sprintf($txt[$lastsent == 0 ? 'unread_notifications' : 'new_from_last_notifications'], $context['json_data']['desktop_notifications']['new_from_last']);
		}]]></search>
			<add><![CDATA[		{
			$context['json_data']['desktop_notifications'] = array(
				'new_from_last' => getNewMentions($user_info['id'], $lastsent),
				'title' => sprintf($txt['forum_notification'], strip_tags(un_htmlspecialchars($context['forum_name']))),
				'link' => '/index.php?action=mentions'
			);
			$context['json_data']['desktop_notifications']['message'] = sprintf($txt[$lastsent == 0 ? 'unread_notifications' : 'new_from_last_notifications'], $context['json_data']['desktop_notifications']['new_from_last']);
		}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for News.controller.php -->		
	<file name="CONTROLLERDIR/News.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 *
 */]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 *
 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Easy adding of sub actions
		call_integration_hook('integrate_xmlfeeds', array(&$subActions));

		$subAction = isset($this->_req->query->sa) && isset($subActions[$this->_req->query->sa]) ? $this->_req->query->sa : 'recent';

		// We only want some information, not all of it.
		$cachekey = array($xml_format, $this->_req->query->action, $this->_limit, $subAction);]]></search>
			<add><![CDATA[		// Easy adding of sub actions
		call_integration_hook('integrate_xmlfeeds', array(&$subActions));

		$subAction = $this->_req->getQuery('sa', 'strtolower', 'recent');
		$subAction = isset($subActions[$subAction]) ? $subAction : 'recent';

		// We only want some information, not all of it.
		$cachekey = array($xml_format, $this->_req->query->action, $this->_limit, $subAction);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function action_xmlprofile($xml_format)
	{
		global $scripturl, $memberContext, $user_profile, $modSettings, $user_info;

		// You must input a valid user....
		if (empty($this->_req->query->u) || loadMemberData((int) $this->_req->query->u) === false)]]></search>
			<add><![CDATA[	 */
	public function action_xmlprofile($xml_format)
	{
		global $scripturl, $memberContext, $user_profile, $modSettings, $user_info, $language;

		// You must input a valid user....
		if (empty($this->_req->query->u) || loadMemberData((int) $this->_req->query->u) === false)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'link' => $scripturl . '?action=profile;u=' . $profile['id'],
				'posts' => $profile['posts'],
				'post-group' => cdata_parse($profile['post_group']),
				'language' => cdata_parse($profile['language']),
				'last-login' => gmdate('D, d M Y H:i:s \G\M\T', $user_profile[$profile['id']]['last_login']),
				'registered' => gmdate('D, d M Y H:i:s \G\M\T', $user_profile[$profile['id']]['date_registered'])
			);]]></search>
			<add><![CDATA[				'link' => $scripturl . '?action=profile;u=' . $profile['id'],
				'posts' => $profile['posts'],
				'post-group' => cdata_parse($profile['post_group']),
				'language' => cdata_parse(!empty($profile['language']) ? $profile['language'] : Util::ucwords(strtr($language, array('_' => ' ', '-utf8' => '')))),
				'last-login' => gmdate('D, d M Y H:i:s \G\M\T', $user_profile[$profile['id']]['last_login']),
				'registered' => gmdate('D, d M Y H:i:s \G\M\T', $user_profile[$profile['id']]['date_registered'])
			);]]></add>
		</operation>
		<operation>
			<search position="replace">	{
		$positions = array(
			Util::strpos($data, '&amp;', $pos),
			Util::strpos($data, ']', $pos),
		);

		if ($ns != '')</search>
			<add>	{
		$positions = array(
			Util::strpos($data, '&amp;', $pos),
			Util::strpos($data, ']]&gt;', $pos),
		);

		if ($ns != '')</add>
		</operation>
		<operation>
			<search position="replace">
			$pos = $pos2 + 1;
		}
		elseif (Util::substr($data, $pos, 1) === ']')
		{
			$cdata .= ']]&gt;&amp;#093;&lt;![CDATA[';
			$pos++;
		}
		elseif (Util::substr($data, $pos, 1) === '&amp;')
		{</search>
			<add>
			$pos = $pos2 + 1;
		}
		elseif (Util::substr($data, $pos, 3) == ']]&gt;')
		{
			$cdata .= ']]]]&gt;&lt;![CDATA[>';
			$pos = $pos + 3;
		}
		elseif (Util::substr($data, $pos, 1) === '&amp;')
		{</add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Notify.controller.php -->		
	<file name="CONTROLLERDIR/Notify.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		// Our topic functions are here
		require_once(SUBSDIR . '/Topic.subs.php');
	}

	/**]]></search>
			<add><![CDATA[	{
		// Our topic functions are here
		require_once(SUBSDIR . '/Topic.subs.php');
		require_once(SUBSDIR . '/Boards.subs.php');
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function action_index()
	{
		// forward to our respective method.
		// $this->action_notify();
	}

	/**]]></search>
			<add><![CDATA[	 */
	public function action_index()
	{
		// The number of choices is boggling, ok there are just 2
		$subActions = array(
			'notify' => array($this, 'action_notify'),
			'unsubscribe' => array($this, 'action_unsubscribe'),
		);

		// We like action, so lets get ready for some
		$action = new Action('');

		// Get the subAction, or just go to action_notify
		$subAction = $action->initialize($subActions, 'notify');

		// forward to our respective method.
		$action->dispatch($subAction);
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $topic, $scripturl, $txt, $user_info, $context;

		// Make sure they aren't a guest or something - guests can't really receive notifications!
		is_not_guest();
		isAllowedTo('mark_any_notify');]]></search>
			<add><![CDATA[	{
		global $topic, $scripturl, $txt, $user_info, $context;

		// Api ajax call?
		if (isset($this->_req->query->api))
		{
			$this->action_notify_api();
			return true;
		}

		// Make sure they aren't a guest or something - guests can't really receive notifications!
		is_not_guest();
		isAllowedTo('mark_any_notify');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		setTopicWatch($user_info['id'], $topic, $this->_req->query->sa === 'on');
	}
}]]></search>
			<add><![CDATA[
		setTopicWatch($user_info['id'], $topic, $this->_req->query->sa === 'on');
	}

	/**
	 * Accessed via the unsubscribe link provided in site emails. This will then
	 * unsubscribe the user from a board or a topic (depending on the link) without them
	 * having to login.
	 */
	public function action_unsubscribe()
	{
		// Looks like we need to unsubscribe someone
		$valid = $this->_validateUnsubscribeToken($member, $area, $extra);
		if ($valid)
		{
			$this->_unsubscribeToggle($member, $area, $extra);
			$this->_prepareTemplateMessage( $area, $extra, $member['email_address']);

			return true;
		}

		// A default msg that we did something and maybe take a chill?
		$this->_prepareTemplateMessage('default', '', '');

		// Not the proper message it should not happen either
		spamProtection('remind');

		return true;
	}

	/**
	 * Does the actual area unsubscribe toggle
	 *
	 * @param mixed[] $member Member info from getBasicMemberData
	 * @param string $area area they want to be removed from
	 * @param string $extra parameters needed for some areas
	 */
	private function _unsubscribeToggle($member, $area, $extra)
	{
		global $user_info, $board, $topic;

		$baseAreas = array('topic', 'board', 'buddy', 'likemsg', 'mentionmem', 'quotedmem', 'rlikemsg');

		// Not a base method, so an addon will need to process this
		if (!in_array($area, $baseAreas))
		{
			return $this->_unsubscribeModuleToggle($member, $area, $extra);
		}

		// Look away while we stuff the old ballet box, power to the people!
		$user_info['id'] = (int) $member['id_member'];
		$this->_req->query->sa = 'off';

		switch ($area)
		{
			case 'topic':
				$topic = $extra;
				$this->_toggle_topic_notification();
				break;
			case 'board':
				$board = $extra;
				$this->_toggle_board_notification();
				break;
			case 'buddy':
			case 'likemsg':
			case 'mentionmem':
			case 'quotedmem':
			case 'rlikemsg':
				$this->_setUserNotificationArea($member['id_member'], $area, 1);
				break;
		}

		return true;
	}

	/**
	 * Pass unsubscribe information to the appropriate mention class/method
	 *
	 * @param mixed[] $member Member info from getBasicMemberData
	 * @param string $area area they want to be removed from
	 * @param string $extra parameters needed for some
	 *
	 * @return bool if the $unsubscribe method was called
	 */
	private function _unsubscribeModuleToggle($member, $area, $extra)
	{
		Elk_Autoloader::instance()->register(SUBSDIR . '/MentionType', '\\ElkArte\\sources\\subs\\MentionType');
		$class_name = '\\ElkArte\\sources\\subs\\MentionType\\' . ucwords($area) . '_Mention';

		if (method_exists($class_name, 'unsubscribe'))
		{
			$unsubscribe = new $class_name;

			return $unsubscribe->unsubscribe($member, $area, $extra);
		}

		return false;
	}

	/**
	 * Validates a supplied token and extracts the needed bits
	 *
	 * What it does:
	 *  - Checks token conforms to a known pattern
	 *  - Checks token is for a known notification type
	 *  - Checks the age of the token
	 *  - Finds the member claimed in the token
	 *  - Runs crypt on member data to validate it matches the supplied hash
	 *
	 * @param mixed[] $member Member info from getBasicMemberData
	 * @param string $area area they want to be removed from
	 * @param string $extra parameters needed for some areas
	 * @return bool
	 */
	private function _validateUnsubscribeToken(&$member, &$area, &$extra)
	{
		// Load all notification types in the system e.g.buddy, likemsg, etc
		require_once(SUBSDIR . '/ManageFeatures.subs.php');
		list($potentialAreas,) = getNotificationTypes();
		$potentialAreas = array_merge($potentialAreas, ['topic', 'board']);

		// Token was passed and matches our expected pattern
		$token = $this->_req->getQuery('token', 'trim', '');
		$token = urldecode($token);
		if (empty($token) || preg_match('~^(\d+_[a-zA-Z0-9./]{53}_.*)$~', $token, $match) !== 1)
		{
			return false;
		}

		// Expand the token
		list ($id_member, $hash, $area, $extra, $time) = explode('_', $match[1]);
		require_once(SUBSDIR . '/Members.subs.php');

		// The area is a known one
		if (!in_array($area, $potentialAreas))
		{
			return false;
		}

		// Not so old, 2 weeks is plenty
		if (time() - $time > 60 * 60 * 24 * 14)
		{
			return false;
		}

		// Find the claimed member
		$member = getBasicMemberData((int) $id_member, array('authentication' => true));
		if (empty($member))
		{
			return false;
		}

		// Validate its this members token
		require_once(SUBSDIR . '/Notification.subs.php');
		return validateNotifierToken(
			$member['email_address'],
			$member['password_salt'],
			$area . $extra . $time,
			$hash
		);
	}

	/**
	 * Used to set a specific mention area to a new value while keeping other
	 * areas as they are.
	 *
	 * @param int $memID
	 * @param string $area buddy, likemsg, mentionmem, quotedmem, rlikemsg
	 * @param int $value 1=notify 2=immediate email 3=daily email 4=weekly email
	 */
	private function _setUserNotificationArea($memID, $area, $value)
	{
		require_once(SUBSDIR . '/Profile.subs.php');

		$to_save = array();
		foreach (getMemberNotificationsProfile($memID) as $mention => $data)
		{
			$to_save[$mention] = 0;

			// The area we are changing
			if ($mention === $area)
			{
				// Off is always an option, but if the choice is valid set it
				if (isset($data['data'][$value]))
				{
					$to_save[$mention] = (int) $value;
				}

				continue;
			}

			// Some other area, keep the existing choice
			foreach ($data['data'] as $key => $choice)
			{
				if ($choice['enabled'] === true)
				{
					$to_save[$mention] = (int) $key;

					break;
				}
			}
		}

		saveUserNotificationsPreferences($memID, $to_save);
	}

	/**
	 * Sets the unsubscribe string for template use
	 *
	 * @param string $area
	 * @param string $extra
	 * @throws \Elk_Exception
	 */
	private function _prepareTemplateMessage($area, $extra, $email)
	{
		global $txt, $context;

		switch ($area)
		{
			case 'topic':
				require_once(SUBSDIR . '/Topic.subs.php');
				$subject = getSubject((int) $extra);
				$context['unsubscribe_message'] = sprintf($txt['notify_topic_unsubscribed'], $subject, $email);
				break;
			case 'board':
				require_once(SUBSDIR . '/Boards.subs.php');
				$name = boardInfo((int) $extra);
				$context['unsubscribe_message'] = sprintf($txt['notify_board_unsubscribed'], $name['name'], $email);
				break;
			case 'buddy':
			case 'likemsg':
			case 'mentionmem':
			case 'quotedmem':
			case 'rlikemsg':
				loadLanguage('Mentions');
				$context['unsubscribe_message'] = sprintf($txt['notify_mention_unsubscribed'], $txt['mentions_type_' . $area], $email);
				break;
			default:
				$context['unsubscribe_message'] = $txt['notify_default_unsubscribed'];
				break;
		}

		loadTemplate('Notify');
		$context['page_title'] = $txt['notifications'];
		$context['sub_template'] = 'notify_unsubscribe';
	}
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for OpenID.controller.php -->		
	<file name="CONTROLLERDIR/OpenID.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2012 Simple Machines Forum (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2012 Simple Machines Forum (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// Generate an ElkArte hash for the db to protect this account
			$user_settings['passwd'] = validateLoginPassword($this->_secret, '', $user_settings['member_name'], true);

			$tokenizer = new Token_Hash();
			$user_settings['password_salt'] = $tokenizer->generate_hash(4);

			require_once(SUBSDIR . '/Members.subs.php');
			updateMemberData($user_settings['id_member'], array('passwd' => $user_settings['passwd'], 'password_salt' => $user_settings['password_salt']));

			// Cleanup on Aisle 5.]]></search>
			<add><![CDATA[			// Generate an ElkArte hash for the db to protect this account
			$user_settings['passwd'] = validateLoginPassword($this->_secret, '', $user_settings['member_name'], true);

			require_once(SUBSDIR . '/Members.subs.php');
			updateMemberSalt($user_settings['id_member'], true);
			updateMemberData($user_settings['id_member'], array('passwd' => $user_settings['passwd'], 'password_salt' => $user_settings['password_salt']));

			// Cleanup on Aisle 5.]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for PersonalMessage.controller.php -->		
	<file name="CONTROLLERDIR/PersonalMessage.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Trigger the prepare_send_context PM event
		$this->_events->trigger('prepare_send_context', array('pmsg' => isset($this->_req->query->pmsg) ? $this->_req->query->pmsg : (isset($this->_req->query->quote) ? $this->_req->query->quote : 0), 'editorOptions' => &$editorOptions, 'recipientList' => &$context['recipients']));

		create_control_richedit($editorOptions);
]]></search>
			<add><![CDATA[		);

		// Trigger the prepare_send_context PM event
		$this->_events->trigger('prepare_send_context', array('editorOptions' => &$editorOptions));

		create_control_richedit($editorOptions);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		// Trigger the prepare_send_context PM event
		$this->_events->trigger('prepare_send_context', array('pmsg' => isset($this->_req->query->pmsg) ? $this->_req->query->pmsg : (isset($this->_req->query->quote) ? $this->_req->query->quote : 0), 'editorOptions' => &$editorOptions, 'recipientList' => &$recipient_ids));

		create_control_richedit($editorOptions);
]]></search>
			<add><![CDATA[		);

		// Trigger the prepare_send_context PM event
		$this->_events->trigger('prepare_send_context', array('editorOptions' => &$editorOptions));

		create_control_richedit($editorOptions);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		global $txt, $context, $user_info, $language, $modSettings;

		// Check that this feature is even enabled!
		if (empty($modSettings['enableReportPM']) || empty($this->_req->query->pmsg))
		{
			throw new Elk_Exception('no_access', false);
		}]]></search>
			<add><![CDATA[		global $txt, $context, $user_info, $language, $modSettings;

		// Check that this feature is even enabled!
		$pmsg_check = $this->_req->getPost('pmsg', 'intval',  $this->_req->getQuery('pmsg', 'intval', 0));
		if (empty($modSettings['enableReportPM']) || empty($pmsg_check))
		{
			throw new Elk_Exception('no_access', false);
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					'timestamp' => forum_time(true, $row['msgtime']),
					'recipients' => &$recipients[$row['id_pm']],
					'labels' => &$context['message_labels'][$row['id_pm']],
					'fully_labeled' => count($context['message_labels'][$row['id_pm']]) == count($context['labels']),
					'is_replied_to' => &$context['message_replied'][$row['id_pm']],
					'href' => $href,
					'link' => '<a href="' . $href . '">' . $subject_highlighted . '</a>',]]></search>
			<add><![CDATA[					'timestamp' => forum_time(true, $row['msgtime']),
					'recipients' => &$recipients[$row['id_pm']],
					'labels' => &$context['message_labels'][$row['id_pm']],
					'fully_labeled' => (!empty($context['message_labels'][$row['id_pm']]) ? count($context['message_labels'][$row['id_pm']]) : 0) == count($context['labels']),
					'is_replied_to' => &$context['message_replied'][$row['id_pm']],
					'href' => $href,
					'link' => '<a href="' . $href . '">' . $subject_highlighted . '</a>',]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'timestamp' => forum_time(true, $subject['msgtime']),
			'number_recipients' => count($recipients[$subject['id_pm']]['to']),
			'labels' => &$context['message_labels'][$subject['id_pm']],
			'fully_labeled' => count($context['message_labels'][$subject['id_pm']]) == count($context['labels']),
			'is_replied_to' => &$context['message_replied'][$subject['id_pm']],
			'is_unread' => &$context['message_unread'][$subject['id_pm']],
			'is_selected' => !empty($temp_pm_selected) && in_array($subject['id_pm'], $temp_pm_selected),]]></search>
			<add><![CDATA[			'timestamp' => forum_time(true, $subject['msgtime']),
			'number_recipients' => count($recipients[$subject['id_pm']]['to']),
			'labels' => &$context['message_labels'][$subject['id_pm']],
			'fully_labeled' => (!empty($context['message_labels'][$subject['id_pm']]) ? count($context['message_labels'][$subject['id_pm']]) : 0) == count($context['labels']),
			'is_replied_to' => &$context['message_replied'][$subject['id_pm']],
			'is_unread' => &$context['message_unread'][$subject['id_pm']],
			'is_selected' => !empty($temp_pm_selected) && in_array($subject['id_pm'], $temp_pm_selected),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'recipients' => &$recipients[$message['id_pm']],
		'number_recipients' => count($recipients[$message['id_pm']]['to']),
		'labels' => &$context['message_labels'][$message['id_pm']],
		'fully_labeled' => count($context['message_labels'][$message['id_pm']]) == count($context['labels']),
		'is_replied_to' => &$context['message_replied'][$message['id_pm']],
		'is_unread' => &$context['message_unread'][$message['id_pm']],
		'is_selected' => !empty($temp_pm_selected) && in_array($message['id_pm'], $temp_pm_selected),]]></search>
			<add><![CDATA[		'recipients' => &$recipients[$message['id_pm']],
		'number_recipients' => count($recipients[$message['id_pm']]['to']),
		'labels' => &$context['message_labels'][$message['id_pm']],
		'fully_labeled' => (!empty($context['message_labels'][$message['id_pm']]) ? count($context['message_labels'][$message['id_pm']]) : 0) == count($context['labels']),
		'is_replied_to' => &$context['message_replied'][$message['id_pm']],
		'is_unread' => &$context['message_unread'][$message['id_pm']],
		'is_selected' => !empty($temp_pm_selected) && in_array($message['id_pm'], $temp_pm_selected),]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Post.controller.php -->		
	<file name="CONTROLLERDIR/Post.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$context['can_move'] = allowedTo('move_any');
		$context['move'] = !empty($_REQUEST['move']);
		$context['announce'] = !empty($_REQUEST['announce']);

		// You can only announce topics that will get approved...
		$context['can_announce'] = allowedTo('announce_topic') && $context['becomes_approved'];]]></search>
			<add><![CDATA[		$context['can_move'] = allowedTo('move_any');
		$context['move'] = !empty($_REQUEST['move']);
		$context['announce'] = !empty($_REQUEST['announce']);
		$context['id_draft'] = $this->_req->getPost('id_draft', 'intval', 0);

		// You can only announce topics that will get approved...
		$context['can_announce'] = allowedTo('announce_topic') && $context['becomes_approved'];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$context['subject'] = addcslashes($this->_form_subject, '"');
		$context['message'] = str_replace(array('"', '<', '>', '&nbsp;'), array('&quot;', '&lt;', '&gt;', ' '), $this->_form_message);

		require_once(SUBSDIR . '/Editor.subs.php');
		// Message icons - customized or not, retrieve them...
		$context['icons'] = getMessageIcons($board);
]]></search>
			<add><![CDATA[		$context['subject'] = addcslashes($this->_form_subject, '"');
		$context['message'] = str_replace(array('"', '<', '>', '&nbsp;'), array('&quot;', '&lt;', '&gt;', ' '), $this->_form_message);

		require_once(SUBSDIR . '/MessageIcons.subs.php');
		// Message icons - customized or not, retrieve them...
		$context['icons'] = getMessageIcons($board);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// This is an already existing message. Edit it.
		if (!empty($_REQUEST['msg']))
		{
			// Have admins allowed people to hide their screwups?
			if (time() - $msgInfo['poster_time'] > $modSettings['edit_wait_time'] || $user_info['id'] != $msgInfo['id_member'])
			{]]></search>
			<add><![CDATA[		// This is an already existing message. Edit it.
		if (!empty($_REQUEST['msg']))
		{
			$posterOptions['id_starter'] = isset($msgInfo['id_member']) ? $msgInfo['id_member'] : $user_info['id'];

			// Have admins allowed people to hide their screwups?
			if (time() - $msgInfo['poster_time'] > $modSettings['edit_wait_time'] || $user_info['id'] != $msgInfo['id_member'])
			{]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ProfileInfo.controller.php -->		
	<file name="CONTROLLERDIR/ProfileInfo.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function pre_dispatch()
	{
		global $context, $user_info;

		require_once(SUBSDIR . '/Profile.subs.php');
]]></search>
			<add><![CDATA[	 */
	public function pre_dispatch()
	{
		global $memberContext, $context, $user_info;

		require_once(SUBSDIR . '/Profile.subs.php');
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$context['user']['is_owner'] = (int) $this->_memID === (int) $user_info['id'];

		loadLanguage('Profile');
	}

	/**]]></search>
			<add><![CDATA[			$context['user']['is_owner'] = (int) $this->_memID === (int) $user_info['id'];

		loadLanguage('Profile');

		// Attempt to load the member's profile data.
		if (!loadMemberContext($this->_memID) || !isset($memberContext[$this->_memID]))
			throw new Elk_Exception('not_a_user', false);
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function action_summary()
	{
		global $context, $memberContext, $modSettings, $scripturl;

		// Attempt to load the member's profile data.
		if (!loadMemberContext($this->_memID) || !isset($memberContext[$this->_memID]))
			throw new Elk_Exception('not_a_user', false);

		loadTemplate('ProfileInfo');
]]></search>
			<add><![CDATA[	 */
	public function action_summary()
	{
		global $context, $modSettings, $scripturl;

		loadTemplate('ProfileInfo');
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ProfileOptions.controller.php -->		
	<file name="CONTROLLERDIR/ProfileOptions.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					updateMemberData($this->_memID, array('openid_uri' => '', 'passwd' => $passwd));
					if ($context['user']['is_owner'])
					{
						setLoginCookie(60 * $modSettings['cookieTime'], $this->_memID, hash('sha256', $new_pass . $cur_profile['password_salt']));
						redirectexit('action=profile;area=authentication;updated');
					}
					else]]></search>
			<add><![CDATA[					updateMemberData($this->_memID, array('openid_uri' => '', 'passwd' => $passwd));
					if ($context['user']['is_owner'])
					{
						setLoginCookie(60 * $modSettings['cookieTime'], $this->_memID, hash('sha256', $passwd . $cur_profile['password_salt']));
						redirectexit('action=profile;area=authentication;updated');
					}
					else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		require_once(SUBSDIR . '/Topic.subs.php');
		require_once(SUBSDIR . '/Profile.subs.php');

		$context['mention_types'] = getMemberNotificationsProfile($this->_memID);

		// Fine, start with the board list.]]></search>
			<add><![CDATA[		require_once(SUBSDIR . '/Topic.subs.php');
		require_once(SUBSDIR . '/Profile.subs.php');

		// Show the list of notification types and how they can subscribe to them
		$context['mention_types'] = getMemberNotificationsProfile($this->_memID);

		// Fine, start with the board list.]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Register.controller.php -->		
	<file name="CONTROLLERDIR/Register.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if (!empty($modSettings['checkboxAgreement']) && !empty($this->_req->post->checkbox_agreement))
			$_SESSION['registration_agreed'] = true;

		// Well, if you don't agree, you can't register.
		if (!empty($modSettings['requireAgreement']) && empty($_SESSION['registration_agreed']))
			redirectexit();]]></search>
			<add><![CDATA[		if (!empty($modSettings['checkboxAgreement']) && !empty($this->_req->post->checkbox_agreement))
			$_SESSION['registration_agreed'] = true;

		// Using coppa and the registration checkbox?
		if (!empty($modSettings['coppaAge']) && !empty($modSettings['checkboxAgreement']) && !empty($this->_req->post->accept_agreement))
			$_SESSION['skip_coppa'] = true;

		// Well, if you don't agree, you can't register.
		if (!empty($modSettings['requireAgreement']) && empty($_SESSION['registration_agreed']))
			redirectexit();]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Search.controller.php -->		
	<file name="CONTROLLERDIR/Search.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.3
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'subject' => $message['first_subject'],
				'href' => $scripturl . '?topic=' . $message['id_topic'] . '.0',
				'link' => '<a href="' . $scripturl . '?topic=' . $message['id_topic'] . '.0">' . $message['first_subject'] . '</a>',
				'icon' => $message['first_icon'],
				'icon_url' => $this->_icon_sources->{$message['first_icon']},
				'member' => array(
					'id' => $message['first_member_id'],
					'name' => $message['first_member_name'],]]></search>
			<add><![CDATA[				'subject' => $message['first_subject'],
				'href' => $scripturl . '?topic=' . $message['id_topic'] . '.0',
				'link' => '<a href="' . $scripturl . '?topic=' . $message['id_topic'] . '.0">' . $message['first_subject'] . '</a>',
				'icon' => $this->_icon_sources->getIconName($message['first_icon']),
				'icon_url' => $this->_icon_sources->getIconURL($message['first_icon']),
				'member' => array(
					'id' => $message['first_member_id'],
					'name' => $message['first_member_name'],]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'subject' => $message['last_subject'],
				'href' => $scripturl . '?topic=' . $message['id_topic'] . ($message['num_replies'] == 0 ? '.0' : '.msg' . $message['last_msg']) . '#msg' . $message['last_msg'],
				'link' => '<a href="' . $scripturl . '?topic=' . $message['id_topic'] . ($message['num_replies'] == 0 ? '.0' : '.msg' . $message['last_msg']) . '#msg' . $message['last_msg'] . '">' . $message['last_subject'] . '</a>',
				'icon' => $message['last_icon'],
				'icon_url' => $this->_icon_sources->{$message['last_icon']},
				'member' => array(
					'id' => $message['last_member_id'],
					'name' => $message['last_member_name'],]]></search>
			<add><![CDATA[				'subject' => $message['last_subject'],
				'href' => $scripturl . '?topic=' . $message['id_topic'] . ($message['num_replies'] == 0 ? '.0' : '.msg' . $message['last_msg']) . '#msg' . $message['last_msg'],
				'link' => '<a href="' . $scripturl . '?topic=' . $message['id_topic'] . ($message['num_replies'] == 0 ? '.0' : '.msg' . $message['last_msg']) . '#msg' . $message['last_msg'] . '">' . $message['last_subject'] . '</a>',
				'icon' => $this->_icon_sources->getIconName($message['last_icon']),
				'icon_url' => $this->_icon_sources->getIconURL($message['last_icon']),
				'member' => array(
					'id' => $message['last_member_id'],
					'name' => $message['last_member_name'],]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'attachment' => loadAttachmentContext($message['id_msg']),
			'alternate' => $counter % 2,
			'member' => &$memberContext[$message['id_member']],
			'icon' => $message['icon'],
			'icon_url' => $this->_icon_sources->{$message['icon']},
			'subject' => $message['subject'],
			'subject_highlighted' => $subject_highlighted,
			'time' => standardTime($message['poster_time']),]]></search>
			<add><![CDATA[			'attachment' => loadAttachmentContext($message['id_msg']),
			'alternate' => $counter % 2,
			'member' => &$memberContext[$message['id_member']],
			'icon' => $this->_icon_sources->getIconName($message['icon']),
			'icon_url' => $this->_icon_sources->getIconURL($message['icon']),
			'subject' => $message['subject'],
			'subject_highlighted' => $subject_highlighted,
			'time' => standardTime($message['poster_time']),]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Spellcheck.controller.php -->		
	<file name="CONTROLLERDIR/Spellcheck.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:        BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[class Spellcheck_Controller extends Action_Controller
{
	/**
	 * Known words that pspell will not now
	 *
	 * @var array
	 */]]></search>
			<add><![CDATA[class Spellcheck_Controller extends Action_Controller
{
	/**
	 * Known words that pspell will not know
	 *
	 * @var array
	 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		ob_start();
		$old = error_reporting(0);

		// See, first, some windows machines don't load pspell properly on the first try.  Dumb, but this is a workaround.
		pspell_new('en');

		// Next, the dictionary in question may not exist. So, we try it... but...
		$this->pspell_link = pspell_new($txt['lang_dictionary'], $txt['lang_spelling'], '', 'utf-8', PSPELL_FAST | PSPELL_RUN_TOGETHER);

		// Most people don't have anything but English installed... So we use English as a last resort.
		if (!$this->pspell_link)
		{
			$this->pspell_link = pspell_new('en', '', '', '', PSPELL_FAST | PSPELL_RUN_TOGETHER);
		}

		// Reset error reporting to what it was]]></search>
			<add><![CDATA[		ob_start();
		$old = error_reporting(0);

		// Next, the dictionary in question may not exist. So, we try it... but...
		$this->pspell_link = pspell_new($txt['lang_locale'], $txt['lang_spelling'], null, 'utf-8', PSPELL_FAST);
		if (!$this->pspell_link)
		{
			$this->pspell_link = pspell_new($txt['lang_dictionary'], $txt['lang_spelling'], null, 'utf-8', PSPELL_FAST);
		}

		// Most people don't have anything but English installed... So we use English as a last resort.
		if (!$this->pspell_link)
		{
			$this->pspell_link = pspell_new('en');
		}

		// Reset error reporting to what it was]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Nothing to check or nothing to check with
		if (!isset($this->_req->post->spellstring) || !$this->pspell_link)
		{
			die;
		}

		// Get all the words (Javascript already separated them).]]></search>
			<add><![CDATA[		// Nothing to check or nothing to check with
		if (!isset($this->_req->post->spellstring) || !$this->pspell_link)
		{
			die ('pspell initializing failure');
		}

		// Get all the words (Javascript already separated them).]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Unread.controller.php -->		
	<file name="CONTROLLERDIR/Unread.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$this->_grabber->setEarliestMsg($context['showing_all_topics'] ? earliest_msg() : 0);

		// @todo Add modified_time in for log_time check?
		// Let's copy things out of the log_topics table, to reduce searching.
		if ($modSettings['totalMessages'] > 100000 && $context['showing_all_topics'])
		{
			$this->_grabber->createTempTable();
		}

		// All unread replies with temp table
		if ($context['showing_all_topics'] && $this->_grabber->hasTempTable())
		{
			$this->_num_topics = $this->_grabber->numUnreads(false);
			$type = 'message';
		}
		// New posts with or without temp table
		elseif ($this->_is_topics)
		{
			$this->_num_topics = $this->_grabber->numUnreads(empty($_SESSION['first_login']), $_SESSION['id_msg_last_visit']);
			$type = 'topics';]]></search>
			<add><![CDATA[		$this->_grabber->setEarliestMsg($context['showing_all_topics'] ? earliest_msg() : 0);

		// @todo Add modified_time in for log_time check?
		if ($this->_is_topics)
		{
			$this->_num_topics = $this->_grabber->numUnreads(empty($_SESSION['first_login']), $_SESSION['id_msg_last_visit']);
			$type = 'topics';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$this->_grabber->setAction(Unread::UNREADREPLIES);

		if ($modSettings['totalMessages'] > 100000)
		{
			$this->_grabber->createTempTable();
		}

		$this->_num_topics = $this->_grabber->numUnreads();

		if ($this->_num_topics == 0)]]></search>
			<add><![CDATA[
		$this->_grabber->setAction(Unread::UNREADREPLIES);

		$this->_num_topics = $this->_grabber->numUnreads();

		if ($this->_num_topics == 0)]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Xml.controller.php -->		
	<file name="CONTROLLERDIR/Xml.controller.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $context, $board;

		require_once(SUBSDIR . '/Editor.subs.php');

		$context['icons'] = getMessageIcons($board);
		$context['sub_template'] = 'message_icons';]]></search>
			<add><![CDATA[	{
		global $context, $board;

		require_once(SUBSDIR . '/MessageIcons.subs.php');

		$context['icons'] = getMessageIcons($board);
		$context['sub_template'] = 'message_icons';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Failed validation, tough to be you
		else
		{
			if (!empty($validation_session))
				$errors[] = array('value' => $txt[$validation_session]);

			if (empty($validation_token))
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></search>
			<add><![CDATA[		// Failed validation, tough to be you
		else
		{
			if ($validation_session !== true)
				$errors[] = array('value' => $txt['session_verify_fail']);

			if ($validation_token === false)
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Failed validation, extra work for you I'm afraid
		else
		{
			if (!empty($validation_session))
				$errors[] = array('value' => $txt[$validation_session]);

			if (empty($validation_token))
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></search>
			<add><![CDATA[		// Failed validation, extra work for you I'm afraid
		else
		{
			if ($validation_session !== true)
				$errors[] = array('value' => $txt['session_verify_fail']);

			if ($validation_token === false)
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					$smiley['order'] = -1;

					// If the node after the drop zone is in the same row/container, we use its position
					if (isset($smiley_tree[$moved_key + 1]))
					{
						$possible_after = getSmiley($smiley_tree[$moved_key - 1]);
						if ($possible_after['row'] == $smiley['row'] && $possible_after['location'] == $smiley['location'])]]></search>
			<add><![CDATA[					$smiley['order'] = -1;

					// If the node after the drop zone is in the same row/container, we use its position
					if (isset($smiley_tree[$moved_key + 1], $smiley_tree[$moved_key - 1]))
					{
						$possible_after = getSmiley($smiley_tree[$moved_key - 1]);
						if ($possible_after['row'] == $smiley['row'] && $possible_after['location'] == $smiley['location'])]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Failed validation :'(
		else
		{
			if (!empty($validation_session))
				$errors[] = array('value' => $txt[$validation_session]);

			if (empty($validation_token))
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></search>
			<add><![CDATA[		// Failed validation :'(
		else
		{
			if ($validation_session !== true)
				$errors[] = array('value' => $txt['session_verify_fail']);

			if ($validation_token === false)
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Failed validation, tough to be you
		else
		{
			if (!empty($validation_session))
				$errors[] = array('value' => $txt[$validation_session]);

			if (empty($validation_token))
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></search>
			<add><![CDATA[		// Failed validation, tough to be you
		else
		{
			if ($validation_session !== true)
				$errors[] = array('value' => $txt['session_verify_fail']);

			if ($validation_token === false)
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Failed validation, tough to be you
		else
		{
			if (!empty($validation_session))
				$errors[] = array('value' => $txt[$validation_session]);

			if (empty($validation_token))
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></search>
			<add><![CDATA[		// Failed validation, tough to be you
		else
		{
			if ($validation_session !== true)
				$errors[] = array('value' => $txt['session_verify_fail']);

			if ($validation_token === false)
				$errors[] = array('value' => $txt['token_verify_fail']);
		}
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Db-mysql.class.php -->		
	<file name="SOURCEDIR/database/Db-mysql.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2004-2011, GreyWyvern - All rights reserved.
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2004-2011, GreyWyvern - All rights reserved.
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * @param mysqli|null $connection = null
	 * @throws Elk_Exception
	 */
	public function insert($method = 'replace', $table, $columns, $data, $keys, $disable_trans = false, $connection = null)
	{
		global $db_prefix;
]]></search>
			<add><![CDATA[	 * @param mysqli|null $connection = null
	 * @throws Elk_Exception
	 */
	public function insert($method, $table, $columns, $data, $keys, $disable_trans = false, $connection = null)
	{
		global $db_prefix;
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Db-postgresql.class.php -->		
	<file name="SOURCEDIR/database/Db-postgresql.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$db_string = preg_replace(array_keys($replacements[$identifier]), array_values($replacements[$identifier]), $db_string);

		// Limits need to be a little different.
		$db_string = preg_replace('~\sLIMIT\s(\d+|{int:.+}),\s*(\d+|{int:.+})\s*$~i', 'LIMIT $2 OFFSET $1', $db_string);

		if (trim($db_string) == '')
			return false;]]></search>
			<add><![CDATA[			$db_string = preg_replace(array_keys($replacements[$identifier]), array_values($replacements[$identifier]), $db_string);

		// Limits need to be a little different.
		$db_string = preg_replace('~\sLIMIT\s(\d+|{int:.+}),\s*(\d+|{int:.+})(.*)~i', 'LIMIT $2 OFFSET $1 $3', $db_string);

		if (trim($db_string) == '')
			return false;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * Tracking the current row.
	 * Fetch a row from the resultset given as parameter.
	 *
	 * @param resource $request
	 * @param integer|bool $counter = false
	 */
	public function fetch_row($request, $counter = false)
	{
		global $db_row_count;

		if ($counter !== false)
			return pg_fetch_row($request, $counter);

		// Reset the row counter...
		if (!isset($db_row_count[(int) $request]))
			$db_row_count[(int) $request] = 0;

		// Return the right row.
		return @pg_fetch_row($request, $db_row_count[(int) $request]++);
	}

	/**]]></search>
			<add><![CDATA[	 * Tracking the current row.
	 * Fetch a row from the resultset given as parameter.
	 *
	 * @param resource $result
	 * @param integer|bool $counter = false
	 */
	public function fetch_row($result, $counter = false)
	{
		global $db_row_count;

		if ($counter !== false)
			return pg_fetch_row($result, $counter);

		// Reset the row counter...
		if (!isset($db_row_count[(int) $result]))
			$db_row_count[(int) $result] = 0;

		// Return the right row.
		return @pg_fetch_row($result, $db_row_count[(int) $result]++);
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * @param resource|null $connection = null
	 * @throws Elk_Exception
	 */
	public function insert($method = 'replace', $table, $columns, $data, $keys, $disable_trans = false, $connection = null)
	{
		global $db_prefix;
]]></search>
			<add><![CDATA[	 * @param resource|null $connection = null
	 * @throws Elk_Exception
	 */
	public function insert($method, $table, $columns, $data, $keys, $disable_trans = false, $connection = null)
	{
		global $db_prefix;
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	/**
	 * Dummy function really. Doesn't do anything on PostgreSQL.
	 *
	 * @param string|null $db_name = null
	 * @param resource|null $connection = null
	 *
	 * @return boolean
	 */
	public function select_db($db_name = null, $connection = null)
	{
		return true;
	}]]></search>
			<add><![CDATA[	/**
	 * Dummy function really. Doesn't do anything on PostgreSQL.
	 *
	 * @param string|null $dbName = null
	 * @param resource|null $connection = null
	 *
	 * @return boolean
	 */
	public function select_db($dbName = null, $connection = null)
	{
		return true;
	}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Db.php -->		
	<file name="SOURCEDIR/database/Db.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * @param resource|null $connection = null
	 * @return void
	 */
	public function insert($method = 'replace', $table, $columns, $data, $keys, $disable_trans = false, $connection = null);

	/**
	 * This function tries to work out additional error information from a back trace.]]></search>
			<add><![CDATA[	 * @param resource|null $connection = null
	 * @return void
	 */
	public function insert($method, $table, $columns, $data, $keys, $disable_trans = false, $connection = null);

	/**
	 * This function tries to work out additional error information from a back trace.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * @return string - the version as string
	 */
	public function db_server_version();
}]]></search>
			<add><![CDATA[	 * @return string - the version as string
	 */
	public function db_server_version();
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for DbTable-mysql.php -->		
	<file name="SOURCEDIR/database/DbTable-mysql.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$row = $this->_db->fetch_assoc($request);
		$this->_db->free_result($request);

		$data_before = isset($row['Data_free']) ? $row['Data_free'] : 0;
		$request = $this->_db->query('', '
			OPTIMIZE TABLE `{raw:table}`',
			array(
				'table' => $table,
			)
		);
		if (!$request)
			return -1;

		// How much left?
		$request = $this->_db->query('', '
			SHOW TABLE STATUS LIKE {string:table}',
			array(
				'table' => str_replace('_', '\_', $table),
			)
		);
		$row = $this->_db->fetch_assoc($request);
		$this->_db->free_result($request);

		$total_change = isset($row['Data_free']) && $data_before > $row['Data_free'] ? $data_before / 1024 : 0;

		return $total_change;
	}]]></search>
			<add><![CDATA[		$row = $this->_db->fetch_assoc($request);
		$this->_db->free_result($request);

		// Optimize tables that will benefit from this operation.
		if (isset($row['Engine']) && $row['Engine'] === 'MyISAM')
		{
			$data_before = isset($row['Data_free']) ? $row['Data_free'] : 0;
			$request = $this->_db->query('', '
				OPTIMIZE TABLE `{raw:table}`',
				array(
					'table' => $table,
				)
			);
			if (!$request)
				return -1;

			// How much left?
			$request = $this->_db->query('', '
				SHOW TABLE STATUS LIKE {string:table}',
				array(
					'table' => str_replace('_', '\_', $table),
				)
			);
			$row = $this->_db->fetch_assoc($request);
			$this->_db->free_result($request);

			$total_change = isset($row['Data_free']) && $data_before > $row['Data_free'] ? $data_before / 1024 : 0;
		}
		else
		{
			$total_change = 0;
		}

		return $total_change;
	}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for DraftsDisplayModule.class.php -->		
	<file name="SOURCEDIR/modules/Drafts/DraftsDisplayModule.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function prepare_context($use_quick_reply, &$editorOptions, $board)
	{
		global $context, $options;

		// Check if the draft functions are enabled and that they have permission to use them (for quick reply.)
		$context['drafts_save'] = $use_quick_reply && allowedTo('post_draft') && $context['can_reply'];]]></search>
			<add><![CDATA[	 */
	public function prepare_context($use_quick_reply, &$editorOptions, $board)
	{
		global $context, $options, $txt;

		// Check if the draft functions are enabled and that they have permission to use them (for quick reply.)
		$context['drafts_save'] = $use_quick_reply && allowedTo('post_draft') && $context['can_reply'];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			loadLanguage('Drafts');
			if ($context['drafts_autosave'])
			{
				// WYSIWYG editor
				if (!empty($options['use_editor_quick_reply']))
				{]]></search>
			<add><![CDATA[			loadLanguage('Drafts');
			if ($context['drafts_autosave'])
			{
				loadLanguage('Post');

				// WYSIWYG editor
				if (!empty($options['use_editor_quick_reply']))
				{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							id_draft: ' . (empty($context['id_draft']) ? 0 : $context['id_draft']) . '
						}';

					loadJavascriptFile('drafts.plugin.js', array('defer' => true));
				}
				// Plain text area]]></search>
			<add><![CDATA[							id_draft: ' . (empty($context['id_draft']) ? 0 : $context['id_draft']) . '
						}';

					$context['shortcuts_text'] = $txt['shortcuts_drafts'];

					if (!isset($editorOptions['buttons']))
						$editorOptions['buttons'] = array();
					if (!isset($editorOptions['hidden_fields']))
						$editorOptions['hidden_fields'] = array();

					$editorOptions['buttons'][] = array(
						'name' => 'save_draft',
						'value' => $txt['draft_save'],
						'options' => 'onclick="return confirm(' . JavaScriptEscape($txt['draft_save_note']) . ') && submitThisOnce(this);" accesskey="d"',
					);

					$editorOptions['hidden_fields'][] = array(
						'name' => 'id_draft',
						'value' => empty($context['id_draft']) ? 0 : $context['id_draft'],
					);

					loadJavascriptFile('drafts.plugin.js', array('defer' => true));
				}
				// Plain text area]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for DraftsPersonalMessageModule.class.php -->		
	<file name="SOURCEDIR/modules/Drafts/DraftsPersonalMessageModule.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:    BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:    BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			// Events
			return array(
				array('before_set_context', array('Drafts_PersonalMessage_Module', 'before_set_context'), array()),
				array('prepare_send_context', array('Drafts_PersonalMessage_Module', 'prepare_send_context'), array('editorOptions', 'recipientList')),
				array('before_sending', array('Drafts_PersonalMessage_Module', 'before_sending'), array('recipientList')),
			);
		}
		else]]></search>
			<add><![CDATA[
			// Events
			return array(
				array('before_set_context', array('Drafts_PersonalMessage_Module', 'before_set_context'), array('pmsg')),
				array('prepare_send_context', array('Drafts_PersonalMessage_Module', 'prepare_send_context'), array('editorOptions')),
				array('before_sending', array('Drafts_PersonalMessage_Module', 'before_sending'), array('recipientList')),
				array('message_sent', array('Drafts_PersonalMessage_Module', 'message_sent'), array('failed')),
			);
		}
		else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			loadLanguage('Post');

			// Our not so concise shortcut line
			if (!isset($context['shortcuts_text']))
			{
				$context['shortcuts_text'] = $txt['shortcuts_drafts' . (isBrowser('is_firefox') ? '_firefox' : '')];
			}

			if (!isset($editorOptions['buttons']))
			{]]></search>
			<add><![CDATA[			loadLanguage('Post');

			// Our not so concise shortcut line
			$context['shortcuts_text'] = $txt['shortcuts_drafts'];

			if (!isset($editorOptions['buttons']))
			{]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for DraftsPostModule.class.php -->		
	<file name="SOURCEDIR/modules/Drafts/DraftsPostModule.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
				loadJavascriptFile('drafts.plugin.js', array('defer' => true));
			}
			$context['shortcuts_text'] = $txt['shortcuts_drafts' . (isBrowser('is_firefox') ? '_firefox' : '')];

			if (!isset($editorOptions['buttons']))
				$editorOptions['buttons'] = array();]]></search>
			<add><![CDATA[
				loadJavascriptFile('drafts.plugin.js', array('defer' => true));
			}
			$context['shortcuts_text'] = $txt['shortcuts_drafts'];

			if (!isset($editorOptions['buttons']))
				$editorOptions['buttons'] = array();]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Admin.subs.php -->		
	<file name="SUBSDIR/Admin.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 * This file contains functions that are specifically done by administrators.
 *]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 * This file contains functions that are specifically done by administrators.
 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'https://github.com/elkarte/Elkarte/wiki/packages'
	);
	$txt['support_resources_p2'] = sprintf($txt['support_resources_p2'],
		'http://www.elkarte.net/',
		'http://www.elkarte.net/redirect/support',
		'http://www.elkarte.net/redirect/customize_support'
	);

	return $available_admin_tasks;]]></search>
			<add><![CDATA[		'https://github.com/elkarte/Elkarte/wiki/packages'
	);
	$txt['support_resources_p2'] = sprintf($txt['support_resources_p2'],
		'https://www.elkarte.net/',
		'https://www.elkarte.net/redirect/support',
		'https://www.elkarte.net/redirect/customize_support'
	);

	return $available_admin_tasks;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'file_versions_subs' => SUBSDIR,
		'file_versions_modules' => SOURCEDIR . '/modules',
	);
	readFileVersions($tmp_version_info, $directories, '.php', true);

	foreach ($tmp_version_info['file_versions_subs'] as $key => $val)]]></search>
			<add><![CDATA[		'file_versions_subs' => SUBSDIR,
		'file_versions_modules' => SOURCEDIR . '/modules',
	);
	$tmp_version_info = array_combine(array_keys($directories),array_fill(0,count($directories),array()));
	readFileVersions($tmp_version_info, $directories, '.php', true);

	foreach ($tmp_version_info['file_versions_subs'] as $key => $val)]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Attachments.subs.php -->		
	<file name="SUBSDIR/Attachments.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// Success! However, successes usually come for a price:
			// we might get a new format for our image...
			$old_format = $size[2];
			$size = elk_getimagesize($attachmentOptions['tmp_name']);

			if (!(empty($size)) && ($size[2] !== $old_format))
			{]]></search>
			<add><![CDATA[			// Success! However, successes usually come for a price:
			// we might get a new format for our image...
			$old_format = $size[2];
			$size = elk_getimagesize($_SESSION['temp_attachments'][$attachID]['tmp_name']);

			if (!(empty($size)) && ($size[2] !== $old_format))
			{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// If this is an image we need to set a few additional parameters.
	$size = elk_getimagesize($attachmentOptions['tmp_name']);
	list ($attachmentOptions['width'], $attachmentOptions['height']) = $size;

	// If it's an image get the mime type right.
	if (empty($attachmentOptions['mime_type']) && $attachmentOptions['width'])]]></search>
			<add><![CDATA[	// If this is an image we need to set a few additional parameters.
	$size = elk_getimagesize($attachmentOptions['tmp_name']);
	list ($attachmentOptions['width'], $attachmentOptions['height']) = $size;
	$attachmentOptions['width'] = max(0, $attachmentOptions['width']);
	$attachmentOptions['height'] = max(0, $attachmentOptions['height']);

	// If it's an image get the mime type right.
	if (empty($attachmentOptions['mime_type']) && $attachmentOptions['width'])]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Auth.subs.php -->		
	<file name="SUBSDIR/Auth.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.2
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	// Globalize cookies across domains (filter out IP-addresses)?
	elseif ($global && preg_match('~^\d{1,3}(\.\d{1,3}){3}$~', $parsed_url['host']) == 0 && preg_match('~(?:[^\.]+\.)?([^\.]{2,}\..+)\z~i', $parsed_url['host'], $parts) == 1)
			$parsed_url['host'] = '.' . $parts[1];

	// We shouldn't use a host at all if both options are off.
	elseif (!$local && !$global)]]></search>
			<add><![CDATA[
	// Globalize cookies across domains (filter out IP-addresses)?
	elseif ($global && preg_match('~^\d{1,3}(\.\d{1,3}){3}$~', $parsed_url['host']) == 0 && preg_match('~(?:[^\.]+\.)?([^\.]{2,}\..+)\z~i', $parsed_url['host'], $parts) == 1)
		$parsed_url['host'] = '.' . $parts[1];

	// We shouldn't use a host at all if both options are off.
	elseif (!$local && !$global)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}
	// Or doing a password check?
	else
	 	$passhash = (bool) $hasher->CheckPassword($password, $hash);

	unset($hasher);
]]></search>
			<add><![CDATA[	}
	// Or doing a password check?
	else
		$passhash = (bool) $hasher->CheckPassword($password, $hash);

	unset($hasher);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * @param string $domain = ''
 * @param boolean|null $secure = false
 * @param boolean|null $httponly = null
 */
function elk_setcookie($name, $value = '', $expire = 0, $path = '', $domain = '', $secure = null, $httponly = null)
{
	global $modSettings;
]]></search>
			<add><![CDATA[ * @param string $domain = ''
 * @param boolean|null $secure = false
 * @param boolean|null $httponly = null
 * @param string|null $samesite = null Can be one of None, Lax or Strict
 */
function elk_setcookie($name, $value = '', $expire = 0, $path = '', $domain = '', $secure = null, $httponly = null, $samesite = null)
{
	global $modSettings;
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if ($secure === null)
		$secure = !empty($modSettings['secureCookies']);

	// Intercept cookie?
	call_integration_hook('integrate_cookie', array($name, $value, $expire, $path, $domain, $secure, $httponly));

	return setcookie($name, $value, $expire, $path, $domain, $secure, $httponly);
}

/**]]></search>
			<add><![CDATA[	if ($secure === null)
		$secure = !empty($modSettings['secureCookies']);

	// Default value in modern browsers is Lax
	$samesite = (empty($samesite)) ? 'Lax' : $samesite;

	// Using SameSite=None requires Secure attribute in latest browser versions.
	$samesite = (!$secure && $samesite === 'None') ? 'Lax' : $samesite;

	// Intercept cookie?
	call_integration_hook('integrate_cookie', array($name, $value, $expire, $path, $domain, $secure, $httponly, $samesite));

	if (version_compare(PHP_VERSION, '7.3.0', '<'))
	{
		return setcookie($name, $value, $expire, $path, $domain, $secure, $httponly);
	}

	return setcookie($name, $value, array(
		'expires' => $expire,
		'path' => $path,
		'domain' => $domain,
		'secure' => $secure,
		'httponly' => $httponly,
		'samesite' => $samesite));
}

/**]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for BBCParser.php -->		
	<file name="SUBSDIR/BBC/BBCParser.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			}

			// The only special case is 'html', which doesn't need to close things.
			if ($tag[Codes::ATTR_BLOCK_LEVEL] && $tag[Codes::ATTR_TAG] !== 'html' && !$this->inside_tag[Codes::ATTR_BLOCK_LEVEL])
			{
				$this->closeNonBlockLevel();
			}]]></search>
			<add><![CDATA[			}

			// The only special case is 'html', which doesn't need to close things.
			if ($tag[Codes::ATTR_BLOCK_LEVEL] && $tag[Codes::ATTR_TAG] !== 'html' && empty($this->inside_tag[Codes::ATTR_BLOCK_LEVEL]))
			{
				$this->closeNonBlockLevel();
			}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				break;
			}

			if ($tag[Codes::ATTR_BLOCK_LEVEL])
			{
				// Only find out if we need to.
				if ($block_level === false)]]></search>
			<add><![CDATA[				break;
			}

			if (!empty($tag[Codes::ATTR_BLOCK_LEVEL]))
			{
				// Only find out if we need to.
				if ($block_level === false)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			}

			$to_close[] = $tag;
		} while ($tag[Codes::ATTR_TAG] !== $look_for);

		// Did we just eat through everything and not find it?
		if (!$this->hasOpenTags() && (empty($tag) || $tag[Codes::ATTR_TAG] !== $look_for))]]></search>
			<add><![CDATA[			}

			$to_close[] = $tag;
		} while (isset($tag[Codes::ATTR_TAG]) && $tag[Codes::ATTR_TAG] !== $look_for);

		// Did we just eat through everything and not find it?
		if (!$this->hasOpenTags() && (empty($tag) || $tag[Codes::ATTR_TAG] !== $look_for))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$this->open_tags = $to_close;
			return;
		}
		elseif (!empty($to_close) && $tag[Codes::ATTR_TAG] !== $look_for)
		{
			if ($block_level === null && isset($look_for[0], $this->bbc_codes[$look_for[0]]))
			{]]></search>
			<add><![CDATA[			$this->open_tags = $to_close;
			return;
		}
		elseif (!empty($to_close) && isset($tag[Codes::ATTR_TAG]) && $tag[Codes::ATTR_TAG] !== $look_for)
		{
			if ($block_level === null && isset($look_for[0], $this->bbc_codes[$look_for[0]]))
			{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$this->pos2 = $this->pos - 1;

			// See the comment at the end of the big loop - just eating whitespace ;).
			if ($tag[Codes::ATTR_BLOCK_LEVEL] && isset($this->message[$this->pos]) && substr_compare($this->message, '<br />', $this->pos, 6) === 0)
			{
				$this->message = substr_replace($this->message, '', $this->pos, 6);
			}]]></search>
			<add><![CDATA[			$this->pos2 = $this->pos - 1;

			// See the comment at the end of the big loop - just eating whitespace ;).
			if (!empty($tag[Codes::ATTR_BLOCK_LEVEL]) && isset($this->message[$this->pos]) && substr_compare($this->message, '<br />', $this->pos, 6) === 0)
			{
				$this->message = substr_replace($this->message, '', $this->pos, 6);
			}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			foreach ($this->getOpenedTags() as $open_tag)
			{
				if (!$open_tag[Codes::ATTR_AUTOLINK])
				{
					return $data;
				}]]></search>
			<add><![CDATA[		{
			foreach ($this->getOpenedTags() as $open_tag)
			{
				if (empty($open_tag[Codes::ATTR_AUTOLINK]))
				{
					return $data;
				}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		}

		// If its a footnote, keep track of the number
		if ($tag[Codes::ATTR_TAG] === 'footnote')
		{
			$this->num_footnotes++;
		}]]></search>
			<add><![CDATA[		}

		// If its a footnote, keep track of the number
		if (isset($tag[Codes::ATTR_TAG]) && $tag[Codes::ATTR_TAG] === 'footnote')
		{
			$this->num_footnotes++;
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		foreach ($this->open_tags as $open_quote)
		{
			// Every parent quote this quote has flips the styling
			if ($open_quote[Codes::ATTR_TAG] === 'quote')
			{
				$quote_alt = !$quote_alt;
			}]]></search>
			<add><![CDATA[		foreach ($this->open_tags as $open_quote)
		{
			// Every parent quote this quote has flips the styling
			if (isset($open_quote[Codes::ATTR_TAG]) && $open_quote[Codes::ATTR_TAG] === 'quote')
			{
				$quote_alt = !$quote_alt;
			}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$tag = $this->item_codes[$this->message[$this->pos + 1]];

		// First let's set up the tree: it needs to be in a list, or after an li.
		if ($this->inside_tag === null || ($this->inside_tag[Codes::ATTR_TAG] !== 'list' && $this->inside_tag[Codes::ATTR_TAG] !== 'li'))
		{
			$this->addOpenTag(array(
				Codes::ATTR_TAG => 'list',]]></search>
			<add><![CDATA[		$tag = $this->item_codes[$this->message[$this->pos + 1]];

		// First let's set up the tree: it needs to be in a list, or after an li.
		if ($this->inside_tag === null || (isset($this->inside_tag[Codes::ATTR_TAG]) && $this->inside_tag[Codes::ATTR_TAG] !== 'list' && $this->inside_tag[Codes::ATTR_TAG] !== 'li'))
		{
			$this->addOpenTag(array(
				Codes::ATTR_TAG => 'list',]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$code = '<ul' . ($tag === '' ? '' : ' style="list-style-type: ' . $tag . '"') . ' class="bbc_list">';
		}
		// We're in a list item already: another itemcode?  Close it first.
		elseif ($this->inside_tag[Codes::ATTR_TAG] === 'li')
		{
			$this->closeOpenedTag();
			$code = '</li>';]]></search>
			<add><![CDATA[			$code = '<ul' . ($tag === '' ? '' : ' style="list-style-type: ' . $tag . '"') . ' class="bbc_list">';
		}
		// We're in a list item already: another itemcode?  Close it first.
		elseif (isset($this->inside_tag[Codes::ATTR_TAG]) && $this->inside_tag[Codes::ATTR_TAG] === 'li')
		{
			$this->closeOpenedTag();
			$code = '</li>';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		if (preg_match('~(<br />|&nbsp;|\s)*~', $this->message, $matches, null, $offset) !== 0 && isset($matches[0]) && $matches[0] !== '')
		{
			$this->message = substr_replace($this->message, '', $this->pos, strlen($matches[0]));
		}
	}
]]></search>
			<add><![CDATA[	{
		if (preg_match('~(<br />|&nbsp;|\s)*~', $this->message, $matches, null, $offset) !== 0 && isset($matches[0]) && $matches[0] !== '')
		{
			$this->message = substr_replace($this->message, '', $offset, strlen($matches[0]));
		}
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Close all the non block level tags so this tag isn't surrounded by them.
		for ($i = count($this->open_tags) - 1; $i > $n; $i--)
		{
			$tmp = $this->noSmileys($this->open_tags[$i][Codes::ATTR_AFTER]);
			$this->message = substr_replace($this->message, $tmp, $this->pos, 0);
			$ot_strlen = strlen($tmp);
			$this->pos += $ot_strlen;]]></search>
			<add><![CDATA[		// Close all the non block level tags so this tag isn't surrounded by them.
		for ($i = count($this->open_tags) - 1; $i > $n; $i--)
		{
			$tmp = isset($this->open_tags[$i][Codes::ATTR_AFTER])
				? $this->noSmileys($this->open_tags[$i][Codes::ATTR_AFTER])
				: $this->noSmileys('');
			$this->message = substr_replace($this->message, $tmp, $this->pos, 0);
			$ot_strlen = strlen($tmp);
			$this->pos += $ot_strlen;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * @param array $tag
	 * @param $data
	 */
	protected function filterData(array $tag, &$data)
	{
		$tag[Codes::ATTR_VALIDATE]($tag, $data, $this->bbc->getDisabled());
	}]]></search>
			<add><![CDATA[	 * @param array $tag
	 * @param $data
	 */
	protected function filterData(array &$tag, &$data)
	{
		$tag[Codes::ATTR_VALIDATE]($tag, $data, $this->bbc->getDisabled());
	}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Codes.php -->		
	<file name="SUBSDIR/BBC/Codes.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				self::ATTR_TYPE => self::TYPE_PARSED_CONTENT,
				self::ATTR_PARAM => array(
					'author' => array(
						self::PARAM_ATTR_MATCH => '([^<>&"\'=\\\\]{1,192}?)',
						self::PARAM_ATTR_QUOTED => self::OPTIONAL,
					),
				),]]></search>
			<add><![CDATA[				self::ATTR_TYPE => self::TYPE_PARSED_CONTENT,
				self::ATTR_PARAM => array(
					'author' => array(
						self::PARAM_ATTR_MATCH => '([^<>]{1,192}?)',
						self::PARAM_ATTR_QUOTED => self::OPTIONAL,
					),
				),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				self::ATTR_TYPE => self::TYPE_PARSED_CONTENT,
				self::ATTR_PARAM => array(
					'author' => array(
						self::PARAM_ATTR_MATCH => '([^<>&"\'=\\\\]{1,192}?)'
					),
					'link' => array(
						self::PARAM_ATTR_MATCH => '(?:board=\d+;)?((?:topic|threadid)=[\dmsg#\./]{1,40}(?:;start=[\dmsg#\./]{1,40})?|msg=\d{1,40}|action=profile;u=\d+)',]]></search>
			<add><![CDATA[				self::ATTR_TYPE => self::TYPE_PARSED_CONTENT,
				self::ATTR_PARAM => array(
					'author' => array(
						self::PARAM_ATTR_MATCH => '([^<>]{1,192}?)',
					),
					'link' => array(
						self::PARAM_ATTR_MATCH => '(?:board=\d+;)?((?:topic|threadid)=[\dmsg#\./]{1,40}(?:;start=[\dmsg#\./]{1,40})?|msg=\d{1,40}|action=profile;u=\d+)',]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				self::ATTR_TYPE => self::TYPE_PARSED_CONTENT,
				self::ATTR_PARAM => array(
					'author' => array(
						self::PARAM_ATTR_MATCH => '([^<>&"\'=\\\\]{1,192}?)'
					),
				),
				self::ATTR_BEFORE => '<div class="quoteheader">' . $txt['quote_from'] . ': {author}</div><blockquote>',]]></search>
			<add><![CDATA[				self::ATTR_TYPE => self::TYPE_PARSED_CONTENT,
				self::ATTR_PARAM => array(
					'author' => array(
						self::PARAM_ATTR_MATCH => '([^<>]{1,192}?)',
					),
				),
				self::ATTR_BEFORE => '<div class="quoteheader">' . $txt['quote_from'] . ': {author}</div><blockquote>',]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				self::ATTR_TYPE => self::TYPE_PARSED_CONTENT,
				self::ATTR_BEFORE => '<div class="bbc_table_container"><table class="bbc_table">',
				self::ATTR_AFTER => '</table></div>',
				self::ATTR_TRIM => self::TRIM_INSIDE,
				self::ATTR_REQUIRE_CHILDREN => array(
					'tr' => 1,
				),]]></search>
			<add><![CDATA[				self::ATTR_TYPE => self::TYPE_PARSED_CONTENT,
				self::ATTR_BEFORE => '<div class="bbc_table_container"><table class="bbc_table">',
				self::ATTR_AFTER => '</table></div>',
				self::ATTR_TRIM => self::TRIM_BOTH,
				self::ATTR_REQUIRE_CHILDREN => array(
					'tr' => 1,
				),]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Boards.subs.php -->		
	<file name="SUBSDIR/Boards.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		else
			$security = $params['wanna_see_board'] ? '{query_wanna_see_board}' : '{query_see_board}';

		$request = $db->query('', '
			SELECT ' . $select . '
			FROM {db_prefix}boards AS b]]></search>
			<add><![CDATA[		else
			$security = $params['wanna_see_board'] ? '{query_wanna_see_board}' : '{query_see_board}';

		// Prevent a bad query, from a triggered scheduled task or some other issue.
		if (empty($security))
			return array();

		$request = $db->query('', '
			SELECT ' . $select . '
			FROM {db_prefix}boards AS b]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Memcached.php -->		
	<file name="SUBSDIR/CacheMethod/Memcached.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	protected function getServers()
	{
		return array_keys((array) $this->obj->getStats());
	}

	/**]]></search>
			<add><![CDATA[	 */
	protected function getServers()
	{
		$list = $this->obj->getStats();
		return $list === false ? array() : array_keys((array) $this->obj->getStats());
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		);

		$serversmList = $this->getServers();

		if (!empty($serversmList))
		{
			$var['postinput'] = $txt['cache_memcached_servers'] . implode('</li><li>', $serversmList) . '</li></ul>';
		}

		$config_vars[] = $var;
	}]]></search>
			<add><![CDATA[		);

		$serversmList = $this->getServers();
		$serversmList = empty($serversmList) ? array($txt['admin_search_results_none']) : $serversmList;
		$var['postinput'] = $txt['cache_memcached_servers'] . implode('</li><li>', $serversmList) . '</li></ul>';

		$config_vars[] = $var;
	}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Compat.subs.php -->		
	<file name="SUBSDIR/Compat.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	$str_len = strlen($str);
	for ($i = 0; $i < $str_len; $i++)
		$blks[$i >> 2] |= ord($str{$i}) << (24 - ($i % 4) * 8);

	$blks[$i >> 2] |= 0x80 << (24 - ($i % 4) * 8);
]]></search>
			<add><![CDATA[
	$str_len = strlen($str);
	for ($i = 0; $i < $str_len; $i++)
		$blks[$i >> 2] |= ord($str[$i]) << (24 - ($i % 4) * 8);

	$blks[$i >> 2] |= 0x80 << (24 - ($i % 4) * 8);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		return $crc;
	}
}]]></search>
			<add><![CDATA[
		return $crc;
	}
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for DataValidator.class.php -->		
	<file name="SUBSDIR/DataValidator.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.5
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'field' => $field,
				'input' => $input[$field],
				'error' => '_validate_php_syntax',
				'error_msg' => $errorMsg['message'],
				'param' => $validation_parameters
			);
		}]]></search>
			<add><![CDATA[				'field' => $field,
				'input' => $input[$field],
				'error' => '_validate_php_syntax',
				'error_msg' => isset($errorMsg['message']) ? $errorMsg['message'] : 'NaN',
				'param' => $validation_parameters
			);
		}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Drafts.subs.php -->		
	<file name="SUBSDIR/Drafts.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'subject' => 'string-255',
		'body' => 'string-65534',
		'to_list' => 'string-255',
	);
	$draft_parameters = array(
		$draft['reply_id'],]]></search>
			<add><![CDATA[		'subject' => 'string-255',
		'body' => 'string-65534',
		'to_list' => 'string-255',
		'is_usersaved' => 'int',
	);
	$draft_parameters = array(
		$draft['reply_id'],]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$draft['subject'],
		$draft['body'],
		serialize($recipientList),
	);
	$db->insert('',
		'{db_prefix}user_drafts',]]></search>
			<add><![CDATA[		$draft['subject'],
		$draft['body'],
		serialize($recipientList),
		$draft['is_usersaved'],
	);
	$db->insert('',
		'{db_prefix}user_drafts',]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			poster_time = {int:poster_time},
			subject = {string:subject},
			body = {string:body},
			to_list = {string:to_list}
		WHERE id_draft = {int:id_pm_draft}
		LIMIT 1',
		array(]]></search>
			<add><![CDATA[			poster_time = {int:poster_time},
			subject = {string:subject},
			body = {string:body},
			to_list = {string:to_list},
			is_usersaved = {int:is_usersaved}
		WHERE id_draft = {int:id_pm_draft}
		LIMIT 1',
		array(]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'body' => $draft['body'],
			'id_pm_draft' => $draft['id_pm_draft'],
			'to_list' => serialize($recipientList),
		)
	);
}]]></search>
			<add><![CDATA[			'body' => $draft['body'],
			'id_pm_draft' => $draft['id_pm_draft'],
			'to_list' => serialize($recipientList),
			'is_usersaved' => $draft['is_usersaved'],
		)
	);
}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!isset($draft['is_usersaved']))
		$draft['is_usersaved'] = 0;

	if ($draft_info['is_usersaved'] == 1)
		$draft['is_usersaved'] = 1;

	// Modifying an existing draft, like hitting the save draft button or autosave enabled?]]></search>
			<add><![CDATA[	if (!isset($draft['is_usersaved']))
		$draft['is_usersaved'] = 0;

	if (isset($draft_info['is_usersaved']) && $draft_info['is_usersaved'] == 1)
		$draft['is_usersaved'] = 1;

	// Modifying an existing draft, like hitting the save draft button or autosave enabled?]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		else
			$post_errors->addError('draft_not_saved');
	}

	return;
}

/**]]></search>
			<add><![CDATA[		else
			$post_errors->addError('draft_not_saved');
	}
}

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!isset($draft['is_usersaved']))
		$draft['is_usersaved'] = 0;

	if ($draft_info['is_usersaved'] == 1)
		$draft['is_usersaved'] = 1;

	// Modifying an existing PM draft?]]></search>
			<add><![CDATA[	if (!isset($draft['is_usersaved']))
		$draft['is_usersaved'] = 0;

	if (isset($draft_info['is_usersaved']) && $draft_info['is_usersaved'] == 1)
		$draft['is_usersaved'] = 1;

	// Modifying an existing PM draft?]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Editor.subs.php -->		
	<file name="SUBSDIR/Editor.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */

/**
 * Retrieves a list of message icons.
 * - Based on the settings, the array will either contain a list of default
 *   message icons or a list of custom message icons retrieved from the database.
 * - The board_id is needed for the custom message icons (which can be set for
 *   each board individually).
 *
 * @param int $board_id
 * @return array
 */
function getMessageIcons($board_id)
{
	global $modSettings, $txt, $settings;

	$db = database();

	if (empty($modSettings['messageIcons_enable']))
	{
		loadLanguage('Post');

		$icons = array(
			array('value' => 'xx', 'name' => $txt['standard']),
			array('value' => 'thumbup', 'name' => $txt['thumbs_up']),
			array('value' => 'thumbdown', 'name' => $txt['thumbs_down']),
			array('value' => 'exclamation', 'name' => $txt['exclamation_point']),
			array('value' => 'question', 'name' => $txt['question_mark']),
			array('value' => 'lamp', 'name' => $txt['lamp']),
			array('value' => 'smiley', 'name' => $txt['icon_smiley']),
			array('value' => 'angry', 'name' => $txt['icon_angry']),
			array('value' => 'cheesy', 'name' => $txt['icon_cheesy']),
			array('value' => 'grin', 'name' => $txt['icon_grin']),
			array('value' => 'sad', 'name' => $txt['icon_sad']),
			array('value' => 'wink', 'name' => $txt['icon_wink']),
			array('value' => 'poll', 'name' => $txt['icon_poll']),
		);

		foreach ($icons as $k => $dummy)
		{
			$icons[$k]['url'] = $settings['images_url'] . '/post/' . $dummy['value'] . '.png';
			$icons[$k]['is_last'] = false;
		}
	}
	// Otherwise load the icons, and check we give the right image too...
	else
	{
		$icons = array();
		if (!Cache::instance()->getVar($icons, 'posting_icons-' . $board_id, 480))
		{
			$icon_data = $db->fetchQuery('
				SELECT 
					title, filename
				FROM {db_prefix}message_icons
				WHERE id_board IN (0, {int:board_id})
				ORDER BY icon_order',
				array(
					'board_id' => $board_id,
				)
			);
			$icons = array();
			foreach ($icon_data as $icon)
			{
				$icons[$icon['filename']] = array(
					'value' => $icon['filename'],
					'name' => $icon['title'],
					'url' => $settings[file_exists($settings['theme_dir'] . '/images/post/' . $icon['filename'] . '.png') ? 'images_url' : 'default_images_url'] . '/post/' . $icon['filename'] . '.png',
					'is_last' => false,
				);
			}

			Cache::instance()->put('posting_icons-' . $board_id, $icons, 480);
		}
	}

	return array_values($icons);
}

/**
 * Creates a box that can be used for richedit stuff like BBC, Smileys etc.
 *]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */

/**
 * Creates a box that can be used for richedit stuff like BBC, Smileys etc.
 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Our not so concise shortcut line
		if (!isset($context['shortcuts_text']))
			$context['shortcuts_text'] = $txt['shortcuts' . (isBrowser('is_firefox') ? '_firefox' : '')];

		// Spellcheck?
		$context['show_spellchecking'] = !empty($modSettings['enableSpellChecking']) && function_exists('pspell_new');]]></search>
			<add><![CDATA[
		// Our not so concise shortcut line
		if (!isset($context['shortcuts_text']))
			$context['shortcuts_text'] = $txt['shortcuts'];

		// Spellcheck?
		$context['show_spellchecking'] = !empty($modSettings['enableSpellChecking']) && function_exists('pspell_new');]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for EmailFormat.class.php -->		
	<file name="SUBSDIR/EmailFormat.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$this->_body = strtr($this->_body, array("\xe2\x80\x98" => "'", "\xe2\x80\x99" => "'", "\xe2\x80\x9c" => '"', "\xe2\x80\x9d" => '"', "\xe2\x80\x93" => '-', "\xe2\x80\x94" => '--', "\xe2\x80\xa6" => '...'));

		// And its 1252 variants
		if ($charset !== 'UTF-8')
			$this->_body = strtr($this->_body, array(chr(145) => "'", chr(146) => "'", chr(147) => '"', chr(148) => '"', chr(150) => '-', chr(151) => '--', chr(133) => '...'));
	}
]]></search>
			<add><![CDATA[		$this->_body = strtr($this->_body, array("\xe2\x80\x98" => "'", "\xe2\x80\x99" => "'", "\xe2\x80\x9c" => '"', "\xe2\x80\x9d" => '"', "\xe2\x80\x93" => '-', "\xe2\x80\x94" => '--', "\xe2\x80\xa6" => '...'));

		// And its 1252 variants
		if (strcasecmp($charset, 'UTF-8') !== 0)
			$this->_body = strtr($this->_body, array(chr(145) => "'", chr(146) => "'", chr(147) => '"', chr(148) => '"', chr(150) => '-', chr(151) => '--', chr(133) => '...'));
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Starting a list like a) 1. 1) etc ...
		$temp = $this->_in_plainlist;

		if (preg_match('~^[a-j](\.|\)|-)\s~i', $var) || preg_match('~^[1-9](\.|\)|-)\s?~', $var) || preg_match('~' . chr(187) . '~', $var))
			$this->_in_plainlist++;

		return $this->_in_plainlist !== $temp;]]></search>
			<add><![CDATA[		// Starting a list like a) 1. 1) etc ...
		$temp = $this->_in_plainlist;

		if (preg_match('~^[a-j](\.|\)|-)\s~i', $var)
			|| preg_match('~^[1-9](\.|\)|-)\s?~', $var)
			|| preg_match('~' . chr(187) . '~', $var)
			|| preg_match('~^[ \t]?\* ?~', $var)
		)
			$this->_in_plainlist++;

		return $this->_in_plainlist !== $temp;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for EmailParse.class.php -->		
	<file name="SUBSDIR/EmailParse.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$this->_header_block = '';
		$match = array();

		// Do we even start with a header in this boundary section?
		if (!preg_match('~^[\w-]+:[ ].*?\r?\n~i', $this->raw_message))
		{
			return;
		}

		// The header block ends based on condition (1) or (2)
		if (!preg_match('~^(.*?)\r?\n(?:\r?\n|(?!(\t|[\w-]+:|[ ])))(.*)~s', $this->raw_message, $match))
		{]]></search>
			<add><![CDATA[		$this->_header_block = '';
		$match = array();

		// The header block ends based on condition (1) or (2)
		if (!preg_match('~^(.*?)\r?\n(?:\r?\n|(?!(\t|[\w-]+:|[ ])))(.*)~s', $this->raw_message, $match))
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				break;
			// The text/html content type is an Internet Media Type as well as a MIME content type.
			case 'text/html':
				$this->html_found = true;
				$this->body = $this->_decode_string($this->body, $this->headers['content-transfer-encoding'], $this->headers['x-parameters']['content-type']['charset']);
				break;]]></search>
			<add><![CDATA[				break;
			// The text/html content type is an Internet Media Type as well as a MIME content type.
			case 'text/html':
			case 'text/watch-html':
				$this->html_found = true;
				$this->body = $this->_decode_string($this->body, $this->headers['content-transfer-encoding'], $this->headers['x-parameters']['content-type']['charset']);
				break;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			case 'multipart/report':
			case 'multipart/signed':
			case 'multipart/encrypted':
			case 'message/rfc822':
				if (!isset($this->headers['x-parameters']['content-type']['boundary']))
				{]]></search>
			<add><![CDATA[			case 'multipart/report':
			case 'multipart/signed':
			case 'multipart/encrypted':
			case 'multipart/relative':
			case 'multipart/appledouble':
			case 'application/vnd.wap.multipart.related':
			case 'message/rfc822':
				if (!isset($this->headers['x-parameters']['content-type']['boundary']))
				{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					$html_ids = array();
					$text_ids = array();
					$this->body = '';
					$this->plain_body = empty($this->plain_body) ? '' : $this->plain_body;
					$bypass = array('application/pgp-encrypted', 'application/pgp-signature', 'application/pgp-keys');

					// Go through each boundary section]]></search>
			<add><![CDATA[					$html_ids = array();
					$text_ids = array();
					$this->body = '';
					$this->plain_body = '';
					$bypass = array('application/pgp-encrypted', 'application/pgp-signature', 'application/pgp-keys');

					// Go through each boundary section]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					// We always return a plain text version for use
					if (!empty($text_ids))
					{
						foreach ($text_ids as $id)
						{
							$this->plain_body .= $this->_boundary_section[$id]->body;
						}
					}
					elseif (!empty($html_ids))
					{
						// This should never run as emails should always have a plain text section to be valid, still ...
						foreach ($html_ids as $id)
						{
							$this->plain_body .= $this->_boundary_section[$id]->body;
						}

						$this->plain_body = str_ireplace('<p>', "\n\n", $this->plain_body);
						$this->plain_body = str_ireplace(array('<br />', '<br>', '</p>', '</div>'), "\n", $this->plain_body);
						$this->plain_body = strip_tags($this->plain_body);]]></search>
			<add><![CDATA[					// We always return a plain text version for use
					if (!empty($text_ids))
					{
						// As parts are ordered by increasing accuracy, use the last one found
						$this->plain_body = $this->_boundary_section[end($text_ids)]->body;
						if ($this->_boundary_section[end($text_ids)]->headers["content-transfer-encoding"] === 'base64')
						{
							$this->plain_body = str_replace("\n", '<br />', $this->plain_body);
						}
					}
					elseif (!empty($html_ids))
					{
						// This should never run as emails should always have a plain text section to be valid, still ...
						$this->plain_body .= $this->_boundary_section[0]->body;
						$this->plain_body = str_ireplace('<p>', "\n\n", $this->plain_body);
						$this->plain_body = str_ireplace(array('<br />', '<br>', '</p>', '</div>'), "\n", $this->plain_body);
						$this->plain_body = strip_tags($this->plain_body);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						// For all the chosen sections
						foreach ($text_ids as $id)
						{
							$this->body .= $this->_boundary_section[$id]->body;

							// A section may have its own attachments if it had is own unique boundary sections
							// so we need to check and add them in as needed]]></search>
			<add><![CDATA[						// For all the chosen sections
						foreach ($text_ids as $id)
						{
							$this->body = $this->_boundary_section[$id]->body;

							// A section may have its own attachments if it had is own unique boundary sections
							// so we need to check and add them in as needed]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		foreach (explode("\n", str_replace("\r\n", "\n", $this->_boundary_section[$i]->body)) as $line)
		{
			$type = '';
			list($field, $rest) = explode(':', $line);

			if (strpos($line, ';'))
			{]]></search>
			<add><![CDATA[		foreach (explode("\n", str_replace("\r\n", "\n", $this->_boundary_section[$i]->body)) as $line)
		{
			$type = '';
			list($field, $rest) = array_pad(explode(':', $line), 2, '');

			if (strpos($line, ';'))
			{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		{
			$part = trim($part);

			// Nothing?
			if (empty($part))
			{
				continue;
			}

			// Parse this section just like its was a separate email
			$this->_boundary_section[$this->_boundary_section_count] = new Email_Parse();
			$this->_boundary_section[$this->_boundary_section_count]->read_email($html, $part);

			$this->plain_body .= $this->_boundary_section[$this->_boundary_section_count]->plain_body;

			$this->_boundary_section_count++;
		}
	}
]]></search>
			<add><![CDATA[		{
			$part = trim($part);

			// Nothing or epilogue section?
			if (empty($part) || (strcmp($part, '--') == 0))
			{
				continue;
			}

			// Parse this section just like its was a separate email
			$boundary_section = new Email_Parse();
			$boundary_section->read_email($html, $part);

			// Save the data that we need and release the parser
			$this->_boundary_section[$this->_boundary_section_count] = array();
			$this->_boundary_section[$this->_boundary_section_count]['body'] = $boundary_section->body;
			$this->_boundary_section[$this->_boundary_section_count]['plain_body'] = $boundary_section->plain_body;
			$this->_boundary_section[$this->_boundary_section_count]['headers'] = $boundary_section->headers;
			$this->_boundary_section[$this->_boundary_section_count]['attachments'] = $boundary_section->attachments;
			$this->_boundary_section[$this->_boundary_section_count]['inline_files'] = $boundary_section->inline_files;
			$this->_boundary_section[$this->_boundary_section_count] = (object) $this->_boundary_section[$this->_boundary_section_count];
			$this->_boundary_section_count++;

			unset($boundary_section);
		}
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$val = $this->_decode_string($val, 'quoted-printable');
		}
		// Lines end in the tell tail quoted printable ... wrap and decode
		elseif (preg_match('~\s=[\r?\n]{1}~s', $val))
		{
			$val = preg_replace('~\s=[\r?\n]{1}~', ' ', $val);
			$val = $this->_decode_string($val, 'quoted-printable');
		}
		// Lines end in = but not ==]]></search>
			<add><![CDATA[			$val = $this->_decode_string($val, 'quoted-printable');
		}
		// Lines end in the tell tail quoted printable ... wrap and decode
		elseif (preg_match('~\s=[\r?\n]~s', $val))
		{
			$val = preg_replace('~\s=[\r?\n]~', ' ', $val);
			$val = $this->_decode_string($val, 'quoted-printable');
		}
		// Lines end in = but not ==]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Supplied a key, lets check it
		if (!empty($key))
		{
			preg_match($regex_key, $key, $match);
		}
		// Otherwise we play find the key
		else]]></search>
			<add><![CDATA[		// Supplied a key, lets check it
		if (!empty($key))
		{
			if (preg_match($regex_key, $key, $match) === 1)
			{
				$this->_load_key_details($match);
			}
		}
		// Otherwise we play find the key
		else]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Emailpost.subs.php -->		
	<file name="SUBSDIR/Emailpost.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// Remove the \r's now so its done
	$body = trim(str_replace("\r", '', $body));

	// Remove the riff-raff as defined by the ACP filters
	$body = pbe_filter_email_message($body);
]]></search>
			<add><![CDATA[	// Remove the \r's now so its done
	$body = trim(str_replace("\r", '', $body));

	// Remove any control characters
	$body = preg_replace('/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/', '', $body);

	// Remove the riff-raff as defined by the ACP filters
	$body = pbe_filter_email_message($body);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$subject = ($subject === '' ? $txt['no_subject'] : $subject);

	// Start off with what we know about the security key, even if its nothing
	$message_key = (string) $email_message->message_key_id;
	$message_type = (string) $email_message->message_type;
	$message_id = (int) $email_message->message_id;
	$board_id = -1;]]></search>
			<add><![CDATA[	$subject = ($subject === '' ? $txt['no_subject'] : $subject);

	// Start off with what we know about the security key, even if its nothing
	$message_key = (string) $email_message->message_key;
	$message_type = (string) $email_message->message_type;
	$message_id = (int) $email_message->message_id;
	$board_id = -1;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$email_message->email['from'] = $email_message->email['from'] . ' => ' . $key_owner;

			// Since we have a valid key set those details as well
			$message_key = $email_message->message_key_id;
			$message_type = $email_message->message_type;
			$message_id = $email_message->message_id;
		}]]></search>
			<add><![CDATA[			$email_message->email['from'] = $email_message->email['from'] . ' => ' . $key_owner;

			// Since we have a valid key set those details as well
			$message_key = $email_message->message_key;
			$message_type = $email_message->message_type;
			$message_id = $email_message->message_id;
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$email_message->email['from'] = $key_owner . ' => ' . $email_message->email['from'];

			// Since we have a valid key set those details as well
			$message_key = $email_message->message_key_id;
			$message_type = $email_message->message_type;
			$message_id = $email_message->message_id;
		}]]></search>
			<add><![CDATA[			$email_message->email['from'] = $key_owner . ' => ' . $email_message->email['from'];

			// Since we have a valid key set those details as well
			$message_key = $email_message->message_key;
			$message_type = $email_message->message_type;
			$message_id = $email_message->message_id;
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// While we have keys to look at see if we can match up this lost message on subjects
		foreach ($user_keys as $user_key)
		{
			if (preg_match('~([a-z0-9]{32})\-(p|t|m)(\d+)~', $user_key['id_email'], $match))
			{
				$key = $match[0];
				$type = $match[2];
				$message = $match[3];

				// If we know/suspect its a "m,t or p" then use that to avoid a match on a wrong type, that would be bad ;)
				if ((!empty($message_type) && $message_type === $type) || (empty($message_type) && $type !== 'p'))
				{
					// lets look up this message/topic/pm and see if the subjects match ... if they do then tada!
					if (query_load_subject($message, $type, $email_message->email['from']) === $subject)
					{
						// This email has a subject that matches the subject of a message that was sent to them
						$message_key = $key;
						$message_id = $message;
						$message_type = $type;
						break;
					}
				}
			}
		}]]></search>
			<add><![CDATA[		// While we have keys to look at see if we can match up this lost message on subjects
		foreach ($user_keys as $user_key)
		{
			$key = $user_key['message_key'];
			$type = $user_key['message_type'];
			$message = $user_key['message_id'];

			// If we know/suspect its a "m,t or p" then use that to avoid a match on a wrong type, that would be bad ;)
			if ((!empty($message_type) && $message_type === $type) || (empty($message_type) && $type !== 'p'))
			{
				// lets look up this message/topic/pm and see if the subjects match ... if they do then tada!
				if (query_load_subject($message, $type, $email_message->email['from']) === $subject)
				{
					// This email has a subject that matches the subject of a message that was sent to them
					$message_key = $key;
					$message_id = $message;
					$message_type = $type;
					break;
				}
			}
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Load the attachmentOptions array with the data needed to create an attachment
		$attachmentOptions = array(
			'post' => !empty($email_message->message_id) ? $email_message->message_id : 0,
			'poster' => $pbe['profile']['id_member'],
			'name' => $attachment['name'],
			'tmp_name' => $attachment['tmp_name'],]]></search>
			<add><![CDATA[
		// Load the attachmentOptions array with the data needed to create an attachment
		$attachmentOptions = array(
			'post' => 0,
			'poster' => $pbe['profile']['id_member'],
			'name' => $attachment['name'],
			'tmp_name' => $attachment['tmp_name'],]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Errors.php -->		
	<file name="SUBSDIR/Errors/Errors.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Maybe they came from dlattach or similar?
		if (ELK !== 'SSI' && empty($context['theme_loaded']))
			loadTheme();

		// Don't bother indexing errors mate...
		$context['robot_no_index'] = true;
]]></search>
			<add><![CDATA[
		// Maybe they came from dlattach or similar?
		if (ELK !== 'SSI' && empty($context['theme_loaded']))
		{
			global $modSettings;

			// Who knew dying took this much effort
			$context['linktree'] = isset($context['linktree']) ? $context['linktree'] : array();
			loadUserSettings();

			$_SESSION['session_var'] = isset($_SESSION['session_var']) ? $_SESSION['session_var'] : '';
			$_SESSION['session_value'] = isset($_SESSION['session_value'] ) ? $_SESSION['session_value'] : '';
			loadTheme();

			// Here lies elkarte, dead from a program error. Just a cryptic message, no output could be better.
			$context['user']['can_mod'] = false;
			$modSettings['default_forum_action'] = '';
		}

		// Don't bother indexing errors mate...
		$context['robot_no_index'] = true;
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for EventManager.class.php -->		
	<file name="SUBSDIR/EventManager.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 */

class Event_Manager]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 */

class Event_Manager]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	public function trigger($position, $args = array())
	{
		// Nothing registered against this event, just return
		if (!isset($this->_registered_events[$position]) || !$this->_registered_events[$position]->hasEvents())
			return false;

		// For all areas that that registered against this event, let them know its been triggered]]></search>
			<add><![CDATA[	public function trigger($position, $args = array())
	{
		// Nothing registered against this event, just return
		if (!array_key_exists($position, $this->_registered_events) || !$this->_registered_events[$position]->hasEvents())
			return false;

		// For all areas that that registered against this event, let them know its been triggered]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$instance = $this->_getInstance($class_name);

			// Do what we know we should do... if we find it.
			if (method_exists($instance, $method_name))
			{
				if (empty($dependencies))
					call_user_func(array($instance, $method_name));
				else
					call_user_func_array(array($instance, $method_name), $dependencies);
			}
		}
	}]]></search>
			<add><![CDATA[			$instance = $this->_getInstance($class_name);

			// Do what we know we should do... if we find it.
			if (is_callable(array($instance, $method_name)))
			{
				// Don't send $dependencies if there are none / the method can't use them
				if (empty($dependencies))
					call_user_func(array($instance, $method_name));
				else
				{
					$this->_checkParameters($class_name, $method_name, $dependencies);
					call_user_func_array(array($instance, $method_name), $dependencies);
				}
			}
		}
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function register($position, $event, $priority = 0)
	{
		if (!isset($this->_registered_events[$position]))
			$this->_registered_events[$position] = new Event(new Priority());

		$this->_registered_events[$position]->add($event, $priority);]]></search>
			<add><![CDATA[	 */
	public function register($position, $event, $priority = 0)
	{
		if (!array_key_exists($position, $this->_registered_events))
			$this->_registered_events[$position] = new Event(new Priority());

		$this->_registered_events[$position]->add($event, $priority);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			}
		}
	}
}]]></search>
			<add><![CDATA[			}
		}
	}

	/**
	 * Reflects a specific class method to see what parameters are needed
	 *
	 * Currently only checks on number required, can be expanded to make use of
	 * $params = $r->getParameters() and then $param-> getName isOptional etc
	 * to ensure required named are being passed.
	 *
	 * @param string $class_name
	 * @param string $method_name
	 * @param array $dependencies the dependencies the event registered
	 *
	 */
	protected function _checkParameters($class_name, $method_name, &$dependencies)
	{
		// Lets check on the actual methods parameters
		try
		{
			$r = new ReflectionMethod($class_name, $method_name);
			$number_params = $r->getNumberOfParameters();
			unset($r);
		}
		catch (\Exception $e)
		{
			$number_params = 0;
		}

		// Php8 will not like passing parameters to a method that takes none
		if ($number_params == 0 && !empty($dependencies))
		{
			$dependencies = array();
		}
	}
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ElkException.class.php -->		
	<file name="SUBSDIR/Exception/ElkException.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Don't need to reload the language file if both the user and
		// the forum share the same language.
		if ($language !== $user_info['language'])
			loadLanguage($lang, $language);

		if ($this->log !== false)]]></search>
			<add><![CDATA[
		// Don't need to reload the language file if both the user and
		// the forum share the same language.
		if (!isset($language) || $language !== $user_info['language'])
			loadLanguage($lang, $language);

		if ($this->log !== false)]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Graphics.subs.php -->		
	<file name="SUBSDIR/Graphics.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ */
function reencodeImage($fileName, $preferred_format = 0)
{
	if (!resizeImageFile($fileName, $fileName . '.tmp', null, null, $preferred_format))
	{
		if (file_exists($fileName . '.tmp'))
			unlink($fileName . '.tmp');]]></search>
			<add><![CDATA[ */
function reencodeImage($fileName, $preferred_format = 0)
{
	if (!resizeImageFile($fileName, $fileName . '.tmp', null, null, $preferred_format, true))
	{
		if (file_exists($fileName . '.tmp'))
			unlink($fileName . '.tmp');]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * @param int $max_width The maximum allowed width
 * @param int $max_height The maximum allowed height
 * @param int $preferred_format Used by Imagick/resizeImage
 * @param bool $force_resize Always resize the image (force scale up)
 * @param bool $strip Allow IM to remove exif data as GD always will
 *
 * @return boolean Whether the thumbnail creation was successful.
 */]]></search>
			<add><![CDATA[ * @param int $max_width The maximum allowed width
 * @param int $max_height The maximum allowed height
 * @param int $preferred_format Used by Imagick/resizeImage
 * @param bool $strip Allow IM to remove exif data as GD always will
 * @param bool $force_resize Always resize the image (force scale up)
 *
 * @return boolean Whether the thumbnail creation was successful.
 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$characters[$char_index]['height'] = imagefontheight($loaded_fonts[$character['font']]);
		}

		$max_height = max($characters[$char_index]['height'] + 5, $max_height);
		$total_width += $characters[$char_index]['width'] + 2;
	}
]]></search>
			<add><![CDATA[			$characters[$char_index]['height'] = imagefontheight($loaded_fonts[$character['font']]);
		}

		$max_height = max($characters[$char_index]['height'] + 15, $max_height);
		$total_width += $characters[$char_index]['width'] + 2;
	}
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Html2BBC.class.php -->		
	<file name="SUBSDIR/Html2BBC.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Remove any html tags we left behind ( outside of code tags that is )
		$parts = preg_split('~(\[/code\]|\[code(?:=[^\]]+)?\])~i', $bbc, -1, PREG_SPLIT_DELIM_CAPTURE);
		for ($i = 0, $n = count($parts); $i < $n; $i++)
		{
			if ($i % 4 == 0)
				$parts[$i] = strip_tags($parts[$i]);
		}
		$bbc = implode('', $parts);

		return $bbc;
	}]]></search>
			<add><![CDATA[
		// Remove any html tags we left behind ( outside of code tags that is )
		$parts = preg_split('~(\[/code\]|\[code(?:=[^\]]+)?\])~i', $bbc, -1, PREG_SPLIT_DELIM_CAPTURE);
		if ($parts !== false)
		{
			for ($i = 0, $n = count($parts); $i < $n; $i++)
			{
				if ($i % 4 == 0)
				{
					// protect << symbols from being stripped
					$working = str_replace('<<', "[\xC2\xA0]", $parts[$i]);
					$working = strip_tags($working);
					$parts[$i] = str_replace("[\xC2\xA0]", '<<', $working);
				}
			}
			$bbc = implode('', $parts);
		}

		return $bbc;
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$height = $node->getAttribute('height');
		$style = $node->getAttribute('style');

		$size = '';

		// Do the basic things first, title/alt
		if (!empty($title) && empty($alt))
			$bbc = '[img alt=' . $title . ']' . $src . '[/img]';]]></search>
			<add><![CDATA[		$height = $node->getAttribute('height');
		$style = $node->getAttribute('style');

		$bbc = '';
		$size = '';

		// First if this is an inline image, we don't support those
		if (substr($src, 0, 4) === 'cid:')
		{
			return $bbc;
		}

		// Do the basic things first, title/alt
		if (!empty($title) && empty($alt))
			$bbc = '[img alt=' . $title . ']' . $src . '[/img]';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$style = $node->getAttribute('style');
		$value = $this->_get_innerHTML($node);

		// Its at least going to be itself
		$bbc = $value;
]]></search>
			<add><![CDATA[		$style = $node->getAttribute('style');
		$value = $this->_get_innerHTML($node);

		// Don't style it if its really just empty
		$test_value = trim($value);
		if ($test_value === '[br]' || $test_value === '<br>')
		{
			return $value;
		}

		// Its at least going to be itself
		$bbc = $value;
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Html2Md.class.php -->		
	<file name="SUBSDIR/Html2Md.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// Wordwrap?
		if (!empty($this->body_width))
		{
			$this->markdown = $this->_utf8_wordwrap($this->markdown, $this->body_width, $this->line_end);
		}

		return $this->markdown;
	}

	/**]]></search>
			<add><![CDATA[		// Wordwrap?
		if (!empty($this->body_width))
		{
			$this->_check_line_lenght($this->markdown);
			$this->markdown = $this->_utf8_wordwrap($this->markdown, $this->body_width, $this->line_end);
		}

		// The null character will trigger a base64 version in outbound email
		return $this->markdown . "\n\x00";
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'&gt|?|' => '>?'
		));

		// Strip the chaff and any excess blank lines we may have produced
		$this->markdown = trim($this->markdown);
		$this->markdown = preg_replace("~(\n(\s)?){3,}~", "\n\n", $this->markdown);]]></search>
			<add><![CDATA[			'&gt|?|' => '>?'
		));

		// We may have hidden content ending in ?<br /> due to the above
		$this->markdown = str_replace('<br />', "\n\n", $this->markdown);

		// Strip the chaff and any excess blank lines we may have produced
		$this->markdown = trim($this->markdown);
		$this->markdown = preg_replace("~(\n(\s)?){3,}~", "\n\n", $this->markdown);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		switch ($tag)
		{
			case 'a':
				$markdown = $this->line_end . $this->_convert_anchor($node);
				break;
			case 'abbr':
				$markdown = $this->_convert_abbr($node);]]></search>
			<add><![CDATA[		switch ($tag)
		{
			case 'a':
				if ($node->getAttribute('data-lightboximage') || $node->getAttribute('data-lightboxmessage'))
					$markdown = '~`skip`~';
				else
					$markdown = $this->line_end . $this->_convert_anchor($node) . $this->line_end;
				break;
			case 'abbr':
				$markdown = $this->_convert_abbr($node);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				$markdown = $this->_convert_header($tag, $this->_get_value($node));
				break;
			case 'img':
				$markdown = $this->_convert_image($node);
				break;
			case 'ol':
			case 'ul':
				$markdown = rtrim($this->_get_value($node)) . $this->line_break;
				break;
			case 'li':
				$markdown = $this->_convert_list($node);]]></search>
			<add><![CDATA[				$markdown = $this->_convert_header($tag, $this->_get_value($node));
				break;
			case 'img':
				$markdown = $this->_convert_image($node) . $this->line_end;
				break;
			case 'ol':
			case 'ul':
				$markdown = $this->line_end . rtrim($this->_get_value($node)) . $this->line_break;
				if ($this->_has_parent_list($node, $this->_parser))
					$markdown = rtrim($this->_get_value($node)) . $this->line_end;
				break;
			case 'li':
				$markdown = $this->_convert_list($node);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $txt;

		$href = htmlentities($node->getAttribute('href'), ENT_COMPAT, 'UTF-8', false);
		$title = $node->getAttribute('title');
		$class = $node->getAttribute('class');
		$value = $this->_get_value($node);]]></search>
			<add><![CDATA[	{
		global $txt;

		$href = htmlspecialchars_decode($node->getAttribute('href'));
		$href = strtr($href, array('(' => '%28', ')' => '%29', '[' => '%5B', ']' => '%5D', '&' => '%26a'));

		$title = $node->getAttribute('title');
		$class = $node->getAttribute('class');
		$value = $this->_get_value($node);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		}
		else
		{
			$markdown = '[' . $value . '](' . $href . ')';
		}

		// Some links can be very long and if we wrap them they break
		$this->_check_link_lenght($markdown);

		return $markdown;
	}
]]></search>
			<add><![CDATA[		}
		else
		{
			$markdown = '[' . $value . ']( ' . $href . ' )';
		}

		return $markdown;
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			{
				// Adjust the word wrapping since this has code tags, leave it up to
				// the email client to mess these up ;)
				$this->_check_link_lenght($markdown, 5);

				$markdown .= str_repeat(' ', 4) . $line . $this->line_end;
			}]]></search>
			<add><![CDATA[			{
				// Adjust the word wrapping since this has code tags, leave it up to
				// the email client to mess these up ;)
				$this->_check_line_lenght($markdown, 5);

				$markdown .= str_repeat(' ', 4) . $line . $this->line_end;
			}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$markdown = '![' . $alt . '](' . $src . ')';
		}

		// Adjust width if needed to maintain the image
		$this->_check_link_lenght($markdown);

		// Adjust width if needed to maintain the image
		$this->_check_link_lenght($markdown);

		return $markdown;
	}
]]></search>
			<add><![CDATA[			$markdown = '![' . $alt . '](' . $src . ')';
		}

		return $markdown;
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			}

			// Adjust the word wrapping since this has a table, will get mussed by email anyway
			$this->_check_link_lenght($rows[1], 2);

			// Return what we did so it can be swapped in
			return implode($this->line_end, $rows);]]></search>
			<add><![CDATA[			}

			// Adjust the word wrapping since this has a table, will get mussed by email anyway
			$this->_check_line_lenght($rows[1], 2);

			// Return what we did so it can be swapped in
			return implode($this->line_end, $rows);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * @param string $markdown
	 * @param bool|int $buffer
	 */
	private function _check_link_lenght($markdown, $buffer = false)
	{
		// Some links can be very long and if we wrap them they break
		$line_strlen = Util::strlen($markdown) + (!empty($buffer) ? (int) $buffer : 0);
		if ($line_strlen > $this->body_width)
		{
			$this->body_width = $line_strlen;
		}
	}

	/**
	 * Helper function to find and wrap plain text links in MD format
	 */
	private function _convert_plaintxt_links()
	{
		$this->markdown = preg_replace_callback('/[^\(\/\]]((https?):\/\/|www\.)[-\p{L}0-9+&@#\/%?=~_|!:,.;]*[\p{L}0-9+&@#\/%=~_|]/iu', array($this, '_plaintxt_callback'), $this->markdown);
	}

	/**]]></search>
			<add><![CDATA[	 * @param string $markdown
	 * @param bool|int $buffer
	 */
	private function _check_line_lenght($markdown, $buffer = false)
	{
		// Some Lines can be very long and if we wrap them they break
		$lines = explode($this->line_end, $markdown);
		foreach ($lines as $line)
		{
			$line_strlen = Util::strlen($line) + (!empty($buffer) ? (int) $buffer : 0);
		if ($line_strlen > $this->body_width)
		{
			$this->body_width = $line_strlen;
		}
	}
	}

	/**
	 * Helper function to find and wrap plain text links in MD format
	 */
	private function _convert_plaintxt_links()
	{
		$this->markdown = preg_replace_callback('/((?<!\]\( |\]\()https?:\/\/|(?<!\]\( |\]\(|:\/\/)www)[-\p{L}0-9+&@#\/%?=~_|!:,.;]*[\p{L}0-9+&@#\/%=~_|]/iu', array($this, '_plaintxt_callback'), $this->markdown);
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $txt;

		$replacement = $this->line_end . '[' . $txt['link'] . '](' . trim($matches[0]) . ')';
		$this->_check_link_lenght($replacement);

		return $replacement;
	}]]></search>
			<add><![CDATA[	{
		global $txt;

		$replacement = $this->line_end . '[' . $txt['link'] . ']( ' . trim($matches[0]) . ' )';

		return $replacement;
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		foreach ($strings as $string)
		{
			$in_quote = isset($string[0]) && $string[0] === '>';
			while (!empty($string))
			{
				// Get the next #width characters before a break (space, punctuation tab etc)]]></search>
			<add><![CDATA[		foreach ($strings as $string)
		{
			$in_quote = isset($string[0]) && $string[0] === '>';
			if (empty($string))
			{
				$lines[] = '';
			}
			while (!empty($string))
			{
				// Get the next #width characters before a break (space, punctuation tab etc)]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Mail.subs.php -->		
	<file name="SUBSDIR/Mail.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$unq_head_array = array();

			// If we are using the post by email functions, then we generate "reply to mail" security keys
			if ($maillist)
			{
				$unq_head_array[0] = md5($boardurl . microtime() . rand());
				$unq_head_array[1] = $message_type;
				$unq_head_array[2] = $message_id;
				$unq_head = $unq_head_array[0] . '-' . $unq_head_array[1] . $unq_head_array[2];
				$encoded_unq_head = base64_encode($line_break . $line_break . '[' . $unq_head . ']' . $line_break);
				$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . $unq_head . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';
				$message = mail_insert_key($message, $unq_head, $encoded_unq_head, $line_break);
			}
			elseif (empty($modSettings['mail_no_message_id']))
				$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . md5($boardurl . microtime()) . '-' . $message_id . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';]]></search>
			<add><![CDATA[			$unq_head_array = array();

			// If we are using the post by email functions, then we generate "reply to mail" security keys
			if ($maillist && !empty($message_id) && $priority != 4)
			{
				$unq_head_array[0] = md5($boardurl . microtime() . rand());
				$unq_head_array[1] = $message_type;
				$unq_head_array[2] = $message_id;
				$unq_head = $unq_head_array[0] . '-' . $unq_head_array[1] . $unq_head_array[2];
				$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . $unq_head . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';
				$message = mail_insert_key($message, $unq_head, $line_break);
			}
			elseif (empty($modSettings['mail_no_message_id']))
				$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . md5($boardurl . microtime()) . '-' . $message_id . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (!server_parse(null, $socket, '220'))
		return false;

	if ($modSettings['mail_type'] == 1 && $modSettings['smtp_username'] != '' && $modSettings['smtp_password'] != '')
	{
		// @todo These should send the CURRENT server's name, not the mail server's!

		// EHLO could be understood to mean encrypted hello...
		if (server_parse('EHLO ' . $modSettings['smtp_host'], $socket, null) == '250')
		{
			if (!empty($modSettings['smtp_starttls']))
			{
				server_parse('STARTTLS', $socket, null);
				stream_socket_enable_crypto($socket, true, STREAM_CRYPTO_METHOD_TLS_CLIENT);
				server_parse('EHLO ' . $modSettings['smtp_host'], $socket, null);
			}

			if (!server_parse('AUTH LOGIN', $socket, '334'))]]></search>
			<add><![CDATA[	if (!server_parse(null, $socket, '220'))
		return false;

	// This should be set in the ACP
	if (empty($modSettings['smtp_client']))
	{
		$modSettings['smtp_client'] = detectServer()->getFQDN(empty($modSettings['smtp_host']) ? '' : $modSettings['smtp_host']);
		updateSettings(array('smtp_client' => $modSettings['smtp_client']));
	}

	if ($modSettings['mail_type'] == 1 && $modSettings['smtp_username'] != '' && $modSettings['smtp_password'] != '')
	{
		// EHLO could be understood to mean encrypted hello...
		if (server_parse('EHLO ' . $modSettings['smtp_client'], $socket, null) == '250')
		{
			if (!empty($modSettings['smtp_starttls']))
			{
				server_parse('STARTTLS', $socket, null);
				stream_socket_enable_crypto($socket, true, STREAM_CRYPTO_METHOD_TLS_CLIENT);
				server_parse('EHLO ' . $modSettings['smtp_client'], $socket, null);
			}

			if (!server_parse('AUTH LOGIN', $socket, '334'))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			if (!server_parse($modSettings['smtp_password'], $socket, '235'))
				return false;
		}
		elseif (!server_parse('HELO ' . $modSettings['smtp_host'], $socket, '250'))
			return false;
	}
	else
	{
		// Just say "helo".
		if (!server_parse('HELO ' . $modSettings['smtp_host'], $socket, '250'))
			return false;
	}
]]></search>
			<add><![CDATA[			if (!server_parse($modSettings['smtp_password'], $socket, '235'))
				return false;
		}
		elseif (!server_parse('HELO ' . $modSettings['smtp_client'], $socket, '250'))
			return false;
	}
	else
	{
		// Just say "helo".
		if (!server_parse('HELO ' . $modSettings['smtp_client'], $socket, '250'))
			return false;
	}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		// Using the post by email functions, and not a digest (priority 4)
		// then generate "reply to mail" keys and place them in the message
		if (!empty($modSettings['maillist_enabled']) && $message_id !== null && $priority != 4)
		{
			$unq_head_array[0] = md5($scripturl . microtime() . rand());
			$unq_head_array[1] = $message_type;
			$unq_head_array[2] = $message_id;
			$unq_head = $unq_head_array[0] . '-' . $unq_head_array[1] . $unq_head_array[2];
			$encoded_unq_head = base64_encode($line_break . $line_break . '[' . $unq_head . ']' . $line_break);
			$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . $unq_head . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';
			$message = mail_insert_key($message, $unq_head, $encoded_unq_head, $line_break);
		}

		// Fix up the headers for this email!]]></search>
			<add><![CDATA[
		// Using the post by email functions, and not a digest (priority 4)
		// then generate "reply to mail" keys and place them in the message
		if (!empty($modSettings['maillist_enabled']) && !empty($message_id) && $priority != 4)
		{
			$unq_head_array[0] = md5($scripturl . microtime() . rand());
			$unq_head_array[1] = $message_type;
			$unq_head_array[2] = $message_id;
			$unq_head = $unq_head_array[0] . '-' . $unq_head_array[1] . $unq_head_array[2];
			$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . $unq_head . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';
			$message = mail_insert_key($message, $unq_head, $line_break);
		}

		// Fix up the headers for this email!]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * @package Mail
 * @param string $message
 * @param string $unq_head
 * @param string $encoded_unq_head
 * @param string $line_break
 */
function mail_insert_key($message, $unq_head, $encoded_unq_head, $line_break)
{
	// Append the key to the bottom of each message section, plain, html, encoded, etc
	$message = preg_replace('~^(.*?)(' . $line_break . '--ELK-[a-z0-9]{32})~s', "$1{$line_break}{$line_break}[{$unq_head}]{$line_break}$2", $message);]]></search>
			<add><![CDATA[ * @package Mail
 * @param string $message
 * @param string $unq_head
 * @param string $line_break
 */
function mail_insert_key($message, $unq_head, $line_break)
{
	// Append the key to the bottom of each message section, plain, html, encoded, etc
	$message = preg_replace('~^(.*?)(' . $line_break . '--ELK-[a-z0-9]{32})~s', "$1{$line_break}{$line_break}[{$unq_head}]{$line_break}$2", $message);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (preg_match('~(Content-Transfer-Encoding: base64' . $line_break . $line_break . ')(.*?)(' . $line_break . '--ELK-[a-z0-9]{32})~s', $message, $match))
	{
		// un-chunk, add in our encoded key header, and re chunk, all so we match RFC 2045 semantics.
		$encoded_message = str_replace($line_break, '', $match[2]);
		$encoded_message .= $encoded_unq_head;
		$encoded_message = chunk_split($encoded_message, 76, $line_break);
		$message = str_replace($match[2], $encoded_message, $message);
	}]]></search>
			<add><![CDATA[	if (preg_match('~(Content-Transfer-Encoding: base64' . $line_break . $line_break . ')(.*?)(' . $line_break . '--ELK-[a-z0-9]{32})~s', $message, $match))
	{
		// un-chunk, add in our encoded key header, and re chunk, all so we match RFC 2045 semantics.
		$encoded_message = base64_decode(str_replace($line_break, '', $match[2]));
		$encoded_message .= $line_break . $line_break . '[' . $unq_head . ']' . $line_break;
		$encoded_message = base64_encode($encoded_message);
		$encoded_message = chunk_split($encoded_message, 76, $line_break);
		$message = str_replace($match[2], $encoded_message, $message);
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				$unq_head_array[1] = $email['message_type'];
				$unq_head_array[2] = $email['message_id'];
				$unq_head = $unq_head_array[0] . '-' . $unq_head_array[1] . $unq_head_array[2];
				$encoded_unq_head = base64_encode($line_break . $line_break . '[' . $unq_head . ']' . $line_break);
				$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . $unq_head . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';
				$email['body'] = mail_insert_key($email['body'], $unq_head, $encoded_unq_head, $line_break);
			}
			elseif ($email['message_id'] !== null && empty($modSettings['mail_no_message_id']))
				$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . md5($scripturl . microtime()) . '-' . $email['message_id'] . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';]]></search>
			<add><![CDATA[				$unq_head_array[1] = $email['message_type'];
				$unq_head_array[2] = $email['message_id'];
				$unq_head = $unq_head_array[0] . '-' . $unq_head_array[1] . $unq_head_array[2];
				$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . $unq_head . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';
				$email['body'] = mail_insert_key($email['body'], $unq_head, $line_break);
			}
			elseif ($email['message_id'] !== null && empty($modSettings['mail_no_message_id']))
				$unq_id = ($need_break ? $line_break : '') . 'Message-ID: <' . md5($scripturl . microtime()) . '-' . $email['message_id'] . strstr(empty($modSettings['maillist_mail_from']) ? $webmaster_email : $modSettings['maillist_mail_from'], '@') . '>';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
			// If it sent, keep a record so we can save it in our allowed to reply log
			if (!empty($unq_head) && $result)
				$sent[] = array($unq_head, time(), $email['to']);

			// Track total emails sent
			if ($result && !empty($modSettings['trackStats']))]]></search>
			<add><![CDATA[
			// If it sent, keep a record so we can save it in our allowed to reply log
			if (!empty($unq_head) && $result)
				$sent[] = array_merge($unq_head_array, array(time(),$email['to']));

			// Track total emails sent
			if ($result && !empty($modSettings['trackStats']))]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageFeatures.subs.php -->		
	<file name="SUBSDIR/ManageFeatures.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[}

/**
 * Load all the available mention types
 *
 * What it does:
 *
 * - Scans teh subs\MentionType directory for files
 * - Calls its getType method
 *
 * @return array
 */]]></search>
			<add><![CDATA[}

/**
 * Load all the available mention types and timings
 *
 * What it does:
 *
 * - Scans teh subs\MentionType directory for files
 * - Calls its getType method
 * - Calls its getSupportedFrequency method
 *
 * @return array
 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	$glob = new GlobIterator(SUBSDIR . '/MentionType/*Mention.php', FilesystemIterator::SKIP_DOTS);
	$types = array();

	// For each file found, call its getType method
	foreach ($glob as $file)
	{
		$class_name = '\\ElkArte\\sources\\subs\\MentionType\\' . preg_replace('~([^^])((?<=)[A-Z](?=[a-z]))~', '$1_$2', $file->getBasename('.php'));
		$types[] = $class_name::getType();
	}

	return $types;
}

/**]]></search>
			<add><![CDATA[
	$glob = new GlobIterator(SUBSDIR . '/MentionType/*Mention.php', FilesystemIterator::SKIP_DOTS);
	$types = array();
	$frequency = array();

	// For each file found, call its getType method
	foreach ($glob as $file)
	{
		$class_name = '\\ElkArte\\sources\\subs\\MentionType\\' . preg_replace('~([^^])((?<=)[A-Z](?=[a-z]))~', '$1_$2', $file->getBasename('.php'));
		$types[] = $class_name::getType();
		$frequency[$class_name::getType()] = $class_name::getSupportedFrequency();
	}

	return array($types, $frequency);
}

/**]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageSearch.subs.php -->		
	<file name="SUBSDIR/ManageSearch.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		while ($row = $db->fetch_assoc($request))
		{
			if ($row['Column_name'] === 'body' && (isset($row['Index_type']) && $row['Index_type'] === 'FULLTEXT' || isset($row['Comment']) && $row['Comment'] === 'FULLTEXT'))
			{
				$fulltext_index[] = $row['Key_name'];
			}
		}
		$db->free_result($request);]]></search>
			<add><![CDATA[	{
		while ($row = $db->fetch_assoc($request))
		{
			foreach(array('body', 'subject') as $column)
			{
				if ($row['Column_name'] === $column && (isset($row['Index_type']) && $row['Index_type'] === 'FULLTEXT' || isset($row['Comment']) && $row['Comment'] === 'FULLTEXT'))
				{
					$fulltext_index[] = $row['Key_name'];
				}
			}
		}
		$db->free_result($request);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		foreach ($indexes as $index)
		{
			$db->query('', '
				ALTER TABLE ' . $table . '
				ADD FULLTEXT {raw:name} ({raw:name})',
				array(
					'name' => $index
				)
			);
		}]]></search>
			<add><![CDATA[	{
		foreach ($indexes as $index)
		{
			$name = str_replace(',', '_', $index);
			$db->query('', '
				ALTER TABLE ' . $table . '
				ADD FULLTEXT {raw:name} ({raw:index})',
				array(
					'name'	=> $name,
					'index' => $index
				)
			);
		}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$db_table = db_table();

	$db_table->db_drop_table('{db_prefix}log_search_words');
}]]></search>
			<add><![CDATA[	$db_table = db_table();

	$db_table->db_drop_table('{db_prefix}log_search_words');
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Memberlist.subs.php -->		
	<file name="SUBSDIR/Memberlist.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$context['members'][$member]['real_name'] = $context['members'][$member]['link'];
		$context['members'][$member]['avatar'] = '<a href="' . $context['members'][$member]['href'] . '">' . $context['members'][$member]['avatar']['image'] . '</a>';
		$context['members'][$member]['email_address'] = $context['members'][$member]['email'];
		$context['members'][$member]['website_url'] = $context['members'][$member]['website']['url'] != '' ? '<a href="' . $context['members'][$member]['website']['url'] . '" target="_blank" class="new_win"><i class="icon i-website" title="' . $context['members'][$member]['website']['title'] . '" title="' . $context['members'][$member]['website']['title'] . '"></i></a>' : '';
		$context['members'][$member]['id_group'] = empty($context['members'][$member]['group']) ? $context['members'][$member]['post_group'] : $context['members'][$member]['group'];
		$context['members'][$member]['date_registered'] = $context['members'][$member]['registered'];
]]></search>
			<add><![CDATA[		$context['members'][$member]['real_name'] = $context['members'][$member]['link'];
		$context['members'][$member]['avatar'] = '<a href="' . $context['members'][$member]['href'] . '">' . $context['members'][$member]['avatar']['image'] . '</a>';
		$context['members'][$member]['email_address'] = $context['members'][$member]['email'];
		$context['members'][$member]['website_url'] = $context['members'][$member]['website']['url'] != '' ? '<a href="' . $context['members'][$member]['website']['url'] . '" target="_blank" rel="noopener noreferrer" class="new_win"><i class="icon i-website" title="' . $context['members'][$member]['website']['title'] . '" title="' . $context['members'][$member]['website']['title'] . '"></i></a>' : '';
		$context['members'][$member]['id_group'] = empty($context['members'][$member]['group']) ? $context['members'][$member]['post_group'] : $context['members'][$member]['group'];
		$context['members'][$member]['date_registered'] = $context['members'][$member]['registered'];
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Members.subs.php -->		
	<file name="SUBSDIR/Members.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	validateUsername(0, $regOptions['username'], $ErrorContext, !empty($regOptions['check_reserved_name']));

	// Generate a validation code if it's supposed to be emailed.
	$validation_code = $regOptions['require'] === 'activation' ? generateValidationCode(14) : '';

	// Does the first password match the second?
	if ($regOptions['password'] != $regOptions['password_check'] && $regOptions['auth_method'] == 'password')]]></search>
			<add><![CDATA[	validateUsername(0, $regOptions['username'], $ErrorContext, !empty($regOptions['check_reserved_name']));

	// Generate a validation code if it's supposed to be emailed.
	$validation_code = generateValidationCode(14);

	// Does the first password match the second?
	if ($regOptions['password'] != $regOptions['password_check'] && $regOptions['auth_method'] == 'password')]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'member_name' => $regOptions['username'],
		'email_address' => $regOptions['email'],
		'passwd' => validateLoginPassword($password, '', $regOptions['username'], true),
		'password_salt' => $tokenizer->generate_hash(4),
		'posts' => 0,
		'date_registered' => !empty($regOptions['time']) ? $regOptions['time'] : time(),
		'member_ip' => $regOptions['interface'] == 'admin' ? '127.0.0.1' : $regOptions['ip'],]]></search>
			<add><![CDATA[		'member_name' => $regOptions['username'],
		'email_address' => $regOptions['email'],
		'passwd' => validateLoginPassword($password, '', $regOptions['username'], true),
		'password_salt' => $tokenizer->generate_hash(16),
		'posts' => 0,
		'date_registered' => !empty($regOptions['time']) ? $regOptions['time'] : time(),
		'member_ip' => $regOptions['interface'] == 'admin' ? '127.0.0.1' : $regOptions['ip'],]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						$query_parts[$condition === 'or' ? 'or' : 'and'][] = isset($allowed_conditions[$query_condition]) ? $allowed_conditions[$query_condition] : $query_condition;
				}
			}
			elseif ($query == 'member_names')
				$query_parts['and'][] = $allowed_conditions[$query]($query_params);
			else
				$query_parts['and'][] = isset($allowed_conditions[$query]) ? $allowed_conditions[$query] : $query;
		}

		if (!empty($query_parts['or']))]]></search>
			<add><![CDATA[						$query_parts[$condition === 'or' ? 'or' : 'and'][] = isset($allowed_conditions[$query_condition]) ? $allowed_conditions[$query_condition] : $query_condition;
				}
			}
			elseif ($query_conditions == 'member_names')
			{
				$query_parts['and'][] = $allowed_conditions[$query_conditions]($query_params);
			}
			else
			{
				$query_parts['and'][] = isset($allowed_conditions[$query_conditions]) ? $allowed_conditions[$query_conditions] : $query_conditions;
			}
		}

		if (!empty($query_parts['or']))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * - 'sort' (string) a column to sort the results
 * - 'moderation' (bool) includes member_ip, id_group, additional_groups, last_login
 * - 'authentication' (bool) includes secret_answer, secret_question, openid_uri,
 *    is_activated, validation_code, passwd_flood
 * - 'preferences' (bool) includes lngfile, mod_prefs, notify_types, signature
 * @return array
 */]]></search>
			<add><![CDATA[ * - 'sort' (string) a column to sort the results
 * - 'moderation' (bool) includes member_ip, id_group, additional_groups, last_login
 * - 'authentication' (bool) includes secret_answer, secret_question, openid_uri,
 *    is_activated, validation_code, passwd_flood, password_salt
 * - 'preferences' (bool) includes lngfile, mod_prefs, notify_types, signature
 * @return array
 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$request = $db->query('', '
		SELECT id_member, member_name, real_name, email_address, hide_email, posts, id_theme' . (!empty($options['moderation']) ? ',
		member_ip, id_group, additional_groups, last_login, id_post_group' : '') . (!empty($options['authentication']) ? ',
		secret_answer, secret_question, openid_uri, is_activated, validation_code, passwd_flood' : '') . (!empty($options['preferences']) ? ',
		lngfile, mod_prefs, notify_types, signature' : '') . '
		FROM {db_prefix}members
		WHERE id_member IN ({array_int:member_list})]]></search>
			<add><![CDATA[	$request = $db->query('', '
		SELECT id_member, member_name, real_name, email_address, hide_email, posts, id_theme' . (!empty($options['moderation']) ? ',
		member_ip, id_group, additional_groups, last_login, id_post_group' : '') . (!empty($options['authentication']) ? ',
		secret_answer, secret_question, openid_uri, is_activated, validation_code, passwd_flood, password_salt' : '') . (!empty($options['preferences']) ? ',
		lngfile, mod_prefs, notify_types, signature' : '') . '
		FROM {db_prefix}members
		WHERE id_member IN ({array_int:member_list})]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		array('version', 'id_member')
	);
}]]></search>
			<add><![CDATA[		array('version', 'id_member')
	);
}

/**
 * Utility function to update a members salt to a new value
 *
 * @param int $id member to update
 * @param bool $refresh if to always refresh to a new salt
 * @param int $min if current salt lenght is less than this, gen a new one
 * @return bool
 */
function updateMemberSalt($id, $refresh = false, $min = 9)
{
	global $user_settings;

	if (empty($user_settings['password_salt']))
	{
		return false;
	}

	if ((strlen($user_settings['password_salt']) > $min) && !$refresh)
	{
		return false;
	}

	$tokenizer = new Token_Hash();
	$user_settings['password_salt'] = $tokenizer->generate_hash(16);
	updateMemberData((int) $id, array('password_salt' => $user_settings['password_salt']));

	return true;
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for LikemsgMention.php -->		
	<file name="SUBSDIR/MentionType/LikemsgMention.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$notifier = $this->_task->getNotifierData();
		$replacements = array(
			'ACTIONNAME' => $notifier['real_name'],
			'MSGLINK' => replaceBasicActionUrl('{script_url}?msg=' . $this->_task->id_target),
		);
]]></search>
			<add><![CDATA[		$notifier = $this->_task->getNotifierData();
		$replacements = array(
			'ACTIONNAME' => $notifier['real_name'],
			'SUBJECT' =>  $this->_task['source_data']['subject'],
			'MSGLINK' => replaceBasicActionUrl('{script_url}?msg=' . $this->_task->id_target),
		);
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MailfailMention.php -->		
	<file name="SUBSDIR/MentionType/MailfailMention.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	protected static $_type = 'mailfail';

	/**
	 * {@inheritdoc }
	 * No need to send emails, because we have just disabled email notifications]]></search>
			<add><![CDATA[	 */
	protected static $_type = 'mailfail';

	/**
	 * {@inheritdoc }
	 */
	protected static $_frequency = ['notification'];

	/**
	 * {@inheritdoc }
	 * No need to send emails, because we have just disabled email notifications]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MentionMessageAbstract.php -->		
	<file name="SUBSDIR/MentionType/MentionMessageAbstract.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	protected static $_type = '';

	/**
	 * The database object
	 *]]></search>
			<add><![CDATA[	 */
	protected static $_type = '';

	/**
	 * Which frequencies are supported by the mention type
	 *
	 * @var array
	 */
	protected static $_frequency = array('notification', 'email', 'email_daily', 'email_weekly');

	/**
	 * The database object
	 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		return static::$_type;
	}

	/**
	 * {@inheritdoc }
	 */]]></search>
			<add><![CDATA[		return static::$_type;
	}

	/**
	 * {@inheritdoc }
	 */
	public static function getSupportedFrequency()
	{
		return static::$_frequency;
	}

	/**
	 * {@inheritdoc }
	 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$return = array();
		if (!empty($template))
		{
			foreach ($members as $member)
			{
				$replacements['REALNAME'] = $members_data[$member]['real_name'];
				$langstrings = $this->_loadStringsByTemplate($template, $keys, $members, $members_data, $lang_files, $replacements);

				$return[] = array(]]></search>
			<add><![CDATA[		$return = array();
		if (!empty($template))
		{
			require_once(SUBSDIR . '/Notification.subs.php');

			foreach ($members as $member)
			{
				$replacements['REALNAME'] = $members_data[$member]['real_name'];
				$replacements['UNSUBSCRIBELINK'] = replaceBasicActionUrl('{script_url}?action=notify;sa=unsubscribe;token=' .
					getNotifierToken($member, $members_data[$member]['email_address'], $members_data[$member]['password_salt'], $task->notification_type, $task->id_target));
				$langstrings = $this->_loadStringsByTemplate($template, $keys, $members, $members_data, $lang_files, $replacements);

				$return[] = array(]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MentionTypeInterface.php -->		
	<file name="SUBSDIR/MentionType/MentionTypeInterface.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public static function getType();

	/**
	 * Returns the modules to enable when turning on the mention.
	 *]]></search>
			<add><![CDATA[	 */
	public static function getType();

	/**
	 * Returns which frequencies (notification, email, daily, weekly, etc) are supported
	 */
	public static function getSupportedFrequency();

	/**
	 * Returns the modules to enable when turning on the mention.
	 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 * Used by the Notifications class to retrieve the notifications to send.
	 *
	 * @param array $lang_data
	 * @param int[] $users
	 *
	 * @return mixed[] array(array(
	 *                  id_member_to (int),]]></search>
			<add><![CDATA[	 * Used by the Notifications class to retrieve the notifications to send.
	 *
	 * @param array $lang_data
	 * @param int[] $members
	 *
	 * @return mixed[] array(array(
	 *                  id_member_to (int),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 *                  last_id (int), ???
	 *                ))
	 */
	public function getNotificationBody($lang_data, $users);

	/**
	 * The Notifications_Task contains few data that may be necessary for the processing]]></search>
			<add><![CDATA[	 *                  last_id (int), ???
	 *                ))
	 */
	public function getNotificationBody($lang_data, $members);

	/**
	 * The Notifications_Task contains few data that may be necessary for the processing]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MentionmemMention.php -->		
	<file name="SUBSDIR/MentionType/MentionmemMention.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'mentionmem',
				$msgOptions['id'],
				$posterOptions['id'],
				array('id_members' => $this->_actually_mentioned, 'notifier_data' => $posterOptions, 'status' => $becomesApproved
					? 'new'
					: 'unapproved')
			));]]></search>
			<add><![CDATA[				'mentionmem',
				$msgOptions['id'],
				$posterOptions['id'],
				array('id_members' => $this->_actually_mentioned, 'notifier_data' => $posterOptions, 'subject' => $msgOptions['subject'], 'status' => $becomesApproved
					? 'new'
					: 'unapproved')
			));]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$replacements = array(
			'ACTIONNAME' => $this->_task['source_data']['notifier_data']['name'],
			'MSGLINK' => replaceBasicActionUrl('{script_url}?msg=' . $this->_task->id_target),
		);
]]></search>
			<add><![CDATA[
		$replacements = array(
			'ACTIONNAME' => $this->_task['source_data']['notifier_data']['name'],
			'SUBJECT' => $this->_task['source_data']['subject'],
			'MSGLINK' => replaceBasicActionUrl('{script_url}?msg=' . $this->_task->id_target),
		);
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for QuotedmemMention.php -->		
	<file name="SUBSDIR/MentionType/QuotedmemMention.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	public function post_after_save_post($msgOptions, $becomesApproved, $posterOptions)
	{
		$status = $becomesApproved ? 'new' : 'unapproved';
		$this->_sendNotification($msgOptions['body'], $msgOptions['id'], $status, $posterOptions);
	}

	/**
	 * Checks if a message has been quoted and if so notifies the owner
	 *
	 * @param string $text The message body
	 * @param int $msg_id The message id of the post containing the quote
	 * @param string $status
	 * @param mixed[] $posterOptions
	 */
	protected function _sendNotification($text, $msg_id, $status, $posterOptions)
	{
		$quoted_names = $this->_findQuotedMembers($text);

		if (!empty($quoted_names))
		{]]></search>
			<add><![CDATA[	public function post_after_save_post($msgOptions, $becomesApproved, $posterOptions)
	{
		$status = $becomesApproved ? 'new' : 'unapproved';
		$this->_sendNotification($msgOptions, $status, $posterOptions);
	}

	/**
	 * Checks if a message has been quoted and if so notifies the owner
	 *
	 * @param mixed[] $msgOptions The message options array
	 * @param string $status
	 * @param mixed[] $posterOptions
	 */
	protected function _sendNotification($msgOptions, $status, $posterOptions)
	{
		$quoted_names = $this->_findQuotedMembers($msgOptions['body']);

		if (!empty($quoted_names))
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		if (!empty($members_id))
		{
			$notifier = \Notifications::instance();
			$notifier->add(new \Notifications_Task(
				'quotedmem',
				$msg_id,
				$posterOptions['id'],
				array('id_members' => $members_id, 'notifier_data' => $posterOptions, 'status' => $status)
			));
		}
	}]]></search>
			<add><![CDATA[
		if (!empty($members_id))
		{
			// If the message was edited, attribute the quote to the starter not the modifier to prevent
			// the sending of another notification
			$modified = (isset($posterOptions['id_starter']));

			$notifier = \Notifications::instance();
			$notifier->add(new \Notifications_Task(
				'quotedmem',
				$msgOptions['id'],
				$modified ? $posterOptions['id_starter'] : $posterOptions['id'],
				array('id_members' => $members_id, 'notifier_data' => $posterOptions, 'status' => $status, 'subject' =>  $msgOptions['subject'],)
			));
		}
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$replacements = array(
			'ACTIONNAME' => $this->_task['source_data']['notifier_data']['name'],
			'MSGLINK' => replaceBasicActionUrl('{script_url}?msg=' . $this->_task->id_target),
		);
]]></search>
			<add><![CDATA[
		$replacements = array(
			'ACTIONNAME' => $this->_task['source_data']['notifier_data']['name'],
			'SUBJECT' => $this->_task['source_data']['subject'],
			'MSGLINK' => replaceBasicActionUrl('{script_url}?msg=' . $this->_task->id_target),
		);
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for RlikemsgMention.php -->		
	<file name="SUBSDIR/MentionType/RlikemsgMention.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	protected static $_type = 'rlikemsg';

	/**
	 * {@inheritdoc }
	 */]]></search>
			<add><![CDATA[	 */
	protected static $_type = 'rlikemsg';

	/**
	 * {@inheritdoc }
	 */
	protected static $_frequency = ['notification'];

	/**
	 * {@inheritdoc }
	 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	/**
	 * {@inheritdoc }
	 */
	public function getNotificationBody($lang_data, $users)
	{
		return array();
	}

	/**]]></search>
			<add><![CDATA[	}

	/**
	 * We don't support email notification of this action, just notification
	 */
	public function getNotificationBody($lang_data, $members)
	{
		return $this->_getNotificationStrings('', array('subject' => static::$_type, 'body' => static::$_type), $members, $this->_task);
	}

	/**]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Mentioning.php -->		
	<file name="SUBSDIR/Mentioning.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	public function create($mention_obj, $data)
	{
		global $user_info;

		$this->_data = $this->_prepareData($data);

		// Common checks to determine if we can go on
		if (!$this->_isValid())
			return array();

		// Cleanup, validate and remove the invalid values (0 and $user_info['id'])
		$id_targets = array_diff(array_map('intval', array_unique($this->_validator->uid)), array(0, $user_info['id']));

		if (empty($id_targets))
			return array();

		$mention_obj->setDb($this->_db);
		$actually_mentioned = $mention_obj->insert($user_info['id'], $id_targets, $this->_validator->msg, $this->_validator->log_time, $this->_data['status']);

		// Update the member mention count
		foreach ($actually_mentioned as $id_target)]]></search>
			<add><![CDATA[	 */
	public function create($mention_obj, $data)
	{
		$this->_data = $this->_prepareData($data);

		// Common checks to determine if we can go on
		if (!$this->_isValid())
			return array();

		// Cleanup, validate and remove the invalid values (0 and $this->_data['id_member_from'])
		$id_targets = array_diff(array_map('intval', array_unique($this->_validator->uid)), array(0, $this->_data['id_member_from']));

		if (empty($id_targets))
			return array();

		$mention_obj->setDb($this->_db);
		$actually_mentioned = $mention_obj->insert($this->_data['id_member_from'], $id_targets, $this->_validator->msg, $this->_validator->log_time, $this->_data['status']);

		// Update the member mention count
		foreach ($actually_mentioned as $id_target)]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MessageIcons.subs.php -->		
	<file name="SUBSDIR/MessageIcons.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		ORDER BY icon_order',
		array()
	);
}]]></search>
			<add><![CDATA[		ORDER BY icon_order',
		array()
	);
}

/**
 * Retrieves a list of message icons for a particular board
 *
 * - Based on the settings, the array will either contain a list of default
 *   message icons or a list of custom message icons retrieved from the database.
 * - The board_id is needed for the custom message icons (which can be set for
 *   each board individually).
 *
 * @param int $board_id
 * @return array
 */
function getMessageIcons($board_id)
{
	global $modSettings, $txt, $settings;

	$db = database();

	if (empty($modSettings['messageIcons_enable']))
	{
		loadLanguage('Post');

		$icons = array(
			array('value' => 'xx', 'name' => $txt['standard']),
			array('value' => 'thumbup', 'name' => $txt['thumbs_up']),
			array('value' => 'thumbdown', 'name' => $txt['thumbs_down']),
			array('value' => 'exclamation', 'name' => $txt['exclamation_point']),
			array('value' => 'question', 'name' => $txt['question_mark']),
			array('value' => 'lamp', 'name' => $txt['lamp']),
			array('value' => 'smiley', 'name' => $txt['icon_smiley']),
			array('value' => 'angry', 'name' => $txt['icon_angry']),
			array('value' => 'cheesy', 'name' => $txt['icon_cheesy']),
			array('value' => 'grin', 'name' => $txt['icon_grin']),
			array('value' => 'sad', 'name' => $txt['icon_sad']),
			array('value' => 'wink', 'name' => $txt['icon_wink']),
			array('value' => 'poll', 'name' => $txt['icon_poll']),
		);

		foreach ($icons as $k => $dummy)
		{
			$icons[$k]['url'] = $settings['images_url'] . '/post/' . $dummy['value'] . '.png';
			$icons[$k]['is_last'] = false;
		}
	}
	// Otherwise load the icons, and check we give the right image too...
	else
	{
		$icons = array();
		if (!Cache::instance()->getVar($icons, 'posting_icons-' . $board_id, 480))
		{
			$icon_data = $db->fetchQuery('
				SELECT 
					title, filename
				FROM {db_prefix}message_icons
				WHERE id_board IN (0, {int:board_id})
				ORDER BY icon_order',
				array(
					'board_id' => $board_id,
				)
			);
			$icons = array();
			foreach ($icon_data as $icon)
			{
				$icons[$icon['filename']] = array(
					'value' => $icon['filename'],
					'name' => $icon['title'],
					'url' => $settings[file_exists($settings['theme_dir'] . '/images/post/' . $icon['filename'] . '.png') ? 'images_url' : 'default_images_url'] . '/post/' . $icon['filename'] . '.png',
					'is_last' => false,
				);
			}

			Cache::instance()->put('posting_icons-' . $board_id, $icons, 480);
		}
	}

	return array_values($icons);
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MessageTopicIcons.class.php -->		
	<file name="SUBSDIR/MessageTopicIcons.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$this->_loadStableIcons();

		// Merge in additional ones
		$custom_icons = array_map(function($element) {
			return $element['first_icon'];
		}, $custom);
		$this->_stable_icons = array_merge($this->_stable_icons, $custom_icons);

		$this->_loadIcons();
	}

	/**
	 * Return the icon specified by idx, or the default icon for invalid names
	 *
	 * @param int|string $idx
	 * @return string
	 */
	public function __get($idx)
	{
		// Not a standard topic icon
		if (!isset($this->data[$idx]))
		{
			$this->_setUrl($idx);
		}

		return $this->data[$idx];
	}

	/**]]></search>
			<add><![CDATA[		$this->_loadStableIcons();

		// Merge in additional ones
		$this->_loadCustomIcons();
		$this->_merge_all_icons();
		$this->_loadIcons();
	}

	/**
	 * Use a passed custom array or fetch the ones available for the board in use
	 */
	private function _loadCustomIcons()
	{
		global $board;

		// Are custom even an option?
		if ($this->_allowCustomIcons() && empty($this->_custom_icons))
		{
			// Fetch any additional ones
			require_once(SUBSDIR . '/MessageIcons.subs.php');
			$this->_custom_icons = getMessageIcons(empty($board) ? 0 : $board);
		}
	}

	/**
	 * This function merges in any custom icons with our standard ones.
	 *
	 * @return array
	 */
	private function _merge_all_icons()
	{
		// Are custom even an option?
		if ($this->_allowCustomIcons())
		{
			// Merge in additional ones
			$custom_icons = array_map(function ($element) {
				return $element['value'];
			}, $this->_custom_icons);

			$this->_stable_icons = array_merge($this->_stable_icons, $custom_icons);
		}
	}

	/**
	 * Simply checks the ACP status of custom icons
	 *
	 * @return bool
	 */
	private function _allowCustomIcons()
	{
		global $modSettings;

		return !empty($modSettings['messageIcons_enable']);
	}

	/**
	 * Return the icon specified by idx
	 *
	 * @param int|string $key
	 * @return string
	 */
	public function __get($key)
	{
		// Not a standard topic icon
		if (!isset($this->data[$key]))
		{
			$this->_setUrl($key);
		}

		return $this->data[$key]['url'];
	}

	/**
	 * Return the icon URL specified by idx
	 *
	 * @param int|string $idx
	 * @return string
	 */
	public function getIconURL($idx)
	{
		$this->_checkValue($idx);

		return $this->data[$idx]['url'];
	}

	/**
	 * Return the name of the icon specified by idx
	 *
	 * @param int|string $idx
	 * @return string
	 */
	public function getIconName($idx)
	{
		$this->_checkValue($idx);

		return $this->data[$idx]['name'];
	}

	/**
	 * If the icon does not exist, sets a default
	 *
	 * @param $idx
	 */
	private function _checkValue($idx)
	{
		// Not a standard topic icon
		if (!isset($this->data[$idx]))
		{
			$this->data[$idx]['url'] = $this->data[$this->_default_icon]['url'];
			$this->data[$idx]['name'] = $this->_default_icon;
		}
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		if ($this->_check)
		{
			$this->data[$icon] = $settings[file_exists($this->_theme_dir . '/images/post/' . $icon . '.png')
				 ? self::IMAGE_URL
				 : self::DEFAULT_URL] . '/post/' . $icon . '.png';
		}
		else
		{
			$this->data[$icon] = $settings[self::IMAGE_URL] . '/post/' . $icon . '.png';
		}
	}
}]]></search>
			<add><![CDATA[
		if ($this->_check)
		{
			$this->data[$icon]['url'] = $settings[file_exists($this->_theme_dir . '/images/post/' . $icon . '.png')
				 ? self::IMAGE_URL
				 : self::DEFAULT_URL] . '/post/' . $icon . '.png';
		}
		else
		{
			$this->data[$icon]['url'] = $settings[self::IMAGE_URL] . '/post/' . $icon . '.png';
		}

		$this->data[$icon]['name'] = $icon;
	}
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MessagesDelete.class.php -->		
	<file name="SUBSDIR/MessagesDelete.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			);

			// Remove the mentions!
			$db->query('', '
				DELETE FROM {db_prefix}log_mentions
				WHERE id_target = {int:id_msg}
				AND mention_type IN ({array_string:mension_types})',
				array(
					'id_msg' => $message,
					'mension_types' => array('mentionmem', 'likemsg', 'rlikemsg'),
				)
			);

			// Remove the message!
			$db->query('', ']]></search>
			<add><![CDATA[			);

			// Remove the mentions!
			$this->deleteMessageMentions($message);

			// Remove the message!
			$db->query('', ']]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		return false;
	}

	/**
	 * Performs all the permission checks to see if the current user can
	 * delete the topic/message he would like to delete]]></search>
			<add><![CDATA[		return false;
	}

	/**
	 * When a message is removed, we need to remove associated mentions and updated the member
	 * mention count for anyone was mentioned in that message (like, quote, @, etc)
	 *
	 * @param int|int[] $messages
	 */
	public function deleteMessageMentions($messages)
	{
		$db = database();

		$mentionTypes = array('mentionmem', 'likemsg', 'rlikemsg', 'quotedmem');
		$messages = is_array($messages) ? $messages : array($messages);

		// Who was mentioned in these messages
		$request = $db->query('', '
			SELECT 
				DISTINCT(id_member) as id_member
			FROM {db_prefix}log_mentions
			WHERE id_target IN ({array_int:messages})
				AND mention_type IN ({array_string:mention_types})',
			array(
				'messages' => $messages,
				'mention_types' => $mentionTypes,
			)
		);
		$changeMe = array();
		while ($row = $db->fetch_assoc($request))
		{
			$changeMe[] = $row['id_member'];
		}
		$db->free_result($request);

		// Remove the mentions!
		$db->query('', '
			DELETE FROM {db_prefix}log_mentions
			WHERE id_target IN ({array_int:messages})
				AND mention_type IN ({array_string:mention_types})',
			array(
				'messages' => $messages,
				'mention_types' => $mentionTypes,
			)
		);

		// Update the mention count for this group
		require_once(SUBSDIR . '/Mentions.subs.php');
		foreach ($changeMe as $member)
		{
			countUserMentions(false, '', $member);
		}
	}

	/**
	 * Performs all the permission checks to see if the current user can
	 * delete the topic/message he would like to delete]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Notification.subs.php -->		
	<file name="SUBSDIR/Notification.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			SELECT
				mem.id_member, mem.email_address, mem.notify_regularity, mem.notify_types, mem.notify_send_body, mem.lngfile, mem.warning,
				ln.sent, mem.id_group, mem.additional_groups, b.member_groups, mem.id_post_group, b.name, b.id_profile,
				ln.id_board
			FROM {db_prefix}log_notify AS ln
				INNER JOIN {db_prefix}boards AS b ON (b.id_board = ln.id_board)
				INNER JOIN {db_prefix}members AS mem ON (mem.id_member = ln.id_member)]]></search>
			<add><![CDATA[			SELECT
				mem.id_member, mem.email_address, mem.notify_regularity, mem.notify_types, mem.notify_send_body, mem.lngfile, mem.warning,
				ln.sent, mem.id_group, mem.additional_groups, b.member_groups, mem.id_post_group, b.name, b.id_profile,
				ln.id_board, mem.password_salt
			FROM {db_prefix}log_notify AS ln
				INNER JOIN {db_prefix}boards AS b ON (b.id_board = ln.id_board)
				INNER JOIN {db_prefix}members AS mem ON (mem.id_member = ln.id_member)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					'POSTERNAME' => un_htmlspecialchars($data['name']),
					'TOPICLINKNEW' => $scripturl . '?topic=' . $id . '.new;topicseen#new',
					'TOPICLINK' => $scripturl . '?topic=' . $id . '.msg' . $data['last_id'] . '#msg' . $data['last_id'],
					'UNSUBSCRIBELINK' => $scripturl . '?action=notifyboard;board=' . $data['board'] . '.0',
					'SIGNATURE' => $data['signature'],
					'BOARDNAME' => $data['board_name'],
				);

				if ($type === 'remove')]]></search>
			<add><![CDATA[					'POSTERNAME' => un_htmlspecialchars($data['name']),
					'TOPICLINKNEW' => $scripturl . '?topic=' . $id . '.new;topicseen#new',
					'TOPICLINK' => $scripturl . '?topic=' . $id . '.msg' . $data['last_id'] . '#msg' . $data['last_id'],
					'UNSUBSCRIBELINK' => replaceBasicActionUrl('{script_url}?action=notify;sa=unsubscribe;token=' .
						getNotifierToken($row['id_member'], $row['email_address'], $row['password_salt'], 'board', $data['board'])),
					'SIGNATURE' => $data['signature'],
					'BOARDNAME' => $data['board_name'],
					'SUBSCRIPTION' => $txt['board'],
				);

				if ($type === 'remove')]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			mem.id_member, mem.email_address, mem.notify_regularity, mem.notify_types, mem.warning,
			mem.notify_send_body, mem.lngfile, mem.id_group, mem.additional_groups,mem.id_post_group,
			t.id_member_started, b.member_groups, b.name, b.id_profile, b.id_board,
			ln.id_topic, ln.sent
		FROM {db_prefix}log_notify AS ln
			INNER JOIN {db_prefix}members AS mem ON (mem.id_member = ln.id_member)
			INNER JOIN {db_prefix}topics AS t ON (t.id_topic = ln.id_topic)]]></search>
			<add><![CDATA[			mem.id_member, mem.email_address, mem.notify_regularity, mem.notify_types, mem.warning,
			mem.notify_send_body, mem.lngfile, mem.id_group, mem.additional_groups,mem.id_post_group,
			t.id_member_started, b.member_groups, b.name, b.id_profile, b.id_board,
			ln.id_topic, ln.sent, mem.password_salt
		FROM {db_prefix}log_notify AS ln
			INNER JOIN {db_prefix}members AS mem ON (mem.id_member = ln.id_member)
			INNER JOIN {db_prefix}topics AS t ON (t.id_topic = ln.id_topic)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'POSTERNAME' => un_htmlspecialchars($topicData[$row['id_topic']]['name']),
			'TOPICLINKNEW' => $scripturl . '?topic=' . $row['id_topic'] . '.new;topicseen#new',
			'TOPICLINK' => $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $data['last_id'] . '#msg' . $data['last_id'],
			'UNSUBSCRIBELINK' => $scripturl . '?action=notify;topic=' . $row['id_topic'] . '.0',
			'SIGNATURE' => $topicData[$row['id_topic']]['signature'],
			'BOARDNAME' => $row['name'],
		);

		if ($type == 'remove')]]></search>
			<add><![CDATA[			'POSTERNAME' => un_htmlspecialchars($topicData[$row['id_topic']]['name']),
			'TOPICLINKNEW' => $scripturl . '?topic=' . $row['id_topic'] . '.new;topicseen#new',
			'TOPICLINK' => $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $data['last_id'] . '#msg' . $data['last_id'],
			'UNSUBSCRIBELINK' => replaceBasicActionUrl('{script_url}?action=notify;sa=unsubscribe;token=' .
				getNotifierToken($row['id_member'], $row['email_address'], $row['password_salt'], 'topic', $row['id_topic'])),
			'SIGNATURE' => $topicData[$row['id_topic']]['signature'],
			'BOARDNAME' => $row['name'],
			'SUBSCRIPTION' => $txt['topic'],
		);

		if ($type == 'remove')]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		SELECT
			mem.id_member, mem.email_address, mem.notify_regularity, mem.notify_send_body, mem.lngfile, mem.warning,
			ln.sent, ln.id_board, mem.id_group, mem.additional_groups, b.member_groups, b.id_profile,
			mem.id_post_group
		FROM {db_prefix}log_notify AS ln
			INNER JOIN {db_prefix}boards AS b ON (b.id_board = ln.id_board)
			INNER JOIN {db_prefix}members AS mem ON (mem.id_member = ln.id_member)]]></search>
			<add><![CDATA[		SELECT
			mem.id_member, mem.email_address, mem.notify_regularity, mem.notify_send_body, mem.lngfile, mem.warning,
			ln.sent, ln.id_board, mem.id_group, mem.additional_groups, b.member_groups, b.id_profile,
			mem.id_post_group, mem.password_salt
		FROM {db_prefix}log_notify AS ln
			INNER JOIN {db_prefix}boards AS b ON (b.id_board = ln.id_board)
			INNER JOIN {db_prefix}members AS mem ON (mem.id_member = ln.id_member)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'TOPICLINK' => $scripturl . '?topic=' . $topicData[$key]['topic'] . '.new#new',
				'TOPICLINKNEW' => $scripturl . '?topic=' . $topicData[$key]['topic'] . '.new#new',
				'MESSAGE' => $send_body ? $topicData[$key]['body'] : '',
				'UNSUBSCRIBELINK' => $scripturl . '?action=notifyboard;board=' . $topicData[$key]['board'] . '.0',
				'SIGNATURE' => !empty($topicData[$key]['signature']) ? $topicData[$key]['signature'] : '',
				'BOARDNAME' => $board_names[$topicData[$key]['board']]['name'],
			);]]></search>
			<add><![CDATA[				'TOPICLINK' => $scripturl . '?topic=' . $topicData[$key]['topic'] . '.new#new',
				'TOPICLINKNEW' => $scripturl . '?topic=' . $topicData[$key]['topic'] . '.new#new',
				'MESSAGE' => $send_body ? $topicData[$key]['body'] : '',
				'UNSUBSCRIBELINK' => replaceBasicActionUrl('{script_url}?action=notify;sa=unsubscribe;token=' .
					getNotifierToken($rowmember['id_member'], $rowmember['email_address'], $rowmember['password_salt'], 'board', $topicData[$key]['board'])),
				'SIGNATURE' => !empty($topicData[$key]['signature']) ? $topicData[$key]['signature'] : '',
				'BOARDNAME' => $board_names[$topicData[$key]['board']]['name'],
			);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		SELECT
			mem.id_member, mem.email_address, mem.notify_regularity, mem.notify_types, mem.notify_send_body, mem.lngfile,
			ln.sent, mem.id_group, mem.additional_groups, b.member_groups, mem.id_post_group, t.id_member_started,
			ln.id_topic
		FROM {db_prefix}log_notify AS ln
			INNER JOIN {db_prefix}members AS mem ON (mem.id_member = ln.id_member)
			INNER JOIN {db_prefix}topics AS t ON (t.id_topic = ln.id_topic)]]></search>
			<add><![CDATA[		SELECT
			mem.id_member, mem.email_address, mem.notify_regularity, mem.notify_types, mem.notify_send_body, mem.lngfile,
			ln.sent, mem.id_group, mem.additional_groups, b.member_groups, mem.id_post_group, t.id_member_started,
			ln.id_topic, mem.password_salt
		FROM {db_prefix}log_notify AS ln
			INNER JOIN {db_prefix}members AS mem ON (mem.id_member = ln.id_member)
			INNER JOIN {db_prefix}topics AS t ON (t.id_topic = ln.id_topic)]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$sent_this_time = false;
		$replacements = array(
			'TOPICLINK' => $scripturl . '?topic=' . $row['id_topic'] . '.new;topicseen#new',
			'UNSUBSCRIBELINK' => $scripturl . '?action=notify;topic=' . $row['id_topic'] . '.0',
		);

		// Now loop through all the messages to send.]]></search>
			<add><![CDATA[		$sent_this_time = false;
		$replacements = array(
			'TOPICLINK' => $scripturl . '?topic=' . $row['id_topic'] . '.new;topicseen#new',
			'UNSUBSCRIBELINK' => replaceBasicActionUrl('{script_url}?action=notify;sa=unsubscribe;token=' .
				getNotifierToken($row['id_member'], $row['email_address'], $row['password_salt'], 'topic', $row['id_topic'])),
		);

		// Now loop through all the messages to send.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		return array();
	}
}]]></search>
			<add><![CDATA[		return array();
	}
}

/**
 * Creates a hash code using the notification details and our secret key
 *
 * - If no salt (secret key) has been set, creates a random one and saves it
 * in modSettings for future use
 *
 * @param string $memID member id
 * @param string $memEmail member email address
 * @param string $memSalt member salt
 * @param string $area area to unsubscribe
 * @param string $extra area specific data such as topic id or liked msg
 * @return string the token for the unsubscribe link
 */
function getNotifierToken($memID, $memEmail, $memSalt, $area, $extra)
{
	global $modSettings;

	// Generate a 22 digit random code suitable for Blowfish crypt.
	$tokenizer = new \Token_Hash();
	$blowfish_salt = '$2a$10$' . $tokenizer->generate_hash(22);
	$now = time();

	// Ideally we would just have a larger -per user- password_salt
	if (empty($modSettings['unsubscribe_site_salt']))
	{
		// extra 10 digits of salt
		$unsubscribe_site_salt = $tokenizer->generate_hash();
		updateSettings(array('unsubscribe_site_salt' => $unsubscribe_site_salt));
	}

	// Add member salt + site salt to the otherwise deterministic data
	$hash = crypt($area . $extra . $now . $memEmail . $memSalt . $modSettings['unsubscribe_site_salt'], $blowfish_salt);

	return urlencode(implode('_',
		array(
			$memID,
			substr($hash, 7),
			$area,
			$extra,
			$now
		)
	));
}

/**
 * Creates a hash code using the notification details and our secret key
 *
 * - If no site salt (secret key) has been set, simply fails
 *
 * @param string $memEmail member email address
 * @param string $memSalt member salt
 * @param string $area area to unsubscribe
 * @param string $hash the sent hash
 * @return bool
 */
function validateNotifierToken($memEmail, $memSalt, $area, $hash)
{
	global $modSettings;

	if (empty($modSettings['unsubscribe_site_salt']))
	{
		return false;
	}

	$expected = '$2a$10$' . $hash;
	$check = crypt($area . $memEmail . $memSalt . $modSettings['unsubscribe_site_salt'], $expected);

	// Basic safe compare as hash_equals is PHP 5.6+
	if (function_exists('hash_equals'))
	{
		return hash_equals($expected, $check);
	}

	$ret = strlen($expected) ^ strlen($check);
	$ret |= array_sum(unpack("C*", $expected ^ $check));

	return !$ret;
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for NotificationsTask.class.php -->		
	<file name="SUBSDIR/NotificationsTask.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		if ($this->_members_data === null)
		{
			require_once(SUBSDIR . '/Members.subs.php');
			$this->_members_data = getBasicMemberData($this->getMembers(), array('preferences' => true));
		}

		return $this->_members_data;]]></search>
			<add><![CDATA[		if ($this->_members_data === null)
		{
			require_once(SUBSDIR . '/Members.subs.php');
			$this->_members_data = getBasicMemberData($this->getMembers(), array('preferences' => true, 'authentication' => true));
		}

		return $this->_members_data;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Package.subs.php -->		
	<file name="SUBSDIR/Package.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * @param string $the_version
 * @return string|boolean highest install value string or false
 */
function matchHighestPackageVersion($versions, $reset = false, $the_version)
{
	static $near_version = 0;
]]></search>
			<add><![CDATA[ * @param string $the_version
 * @return string|boolean highest install value string or false
 */
function matchHighestPackageVersion($versions, $the_version, $reset = false)
{
	static $near_version = 0;
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$salt .= session_id();

	for ($i = 0; $i < $n; $i++)
		$pass{$i} = chr(ord($pass{$i}) ^ (ord($salt{$i}) - 32));

	return $pass;
}]]></search>
			<add><![CDATA[		$salt .= session_id();

	for ($i = 0; $i < $n; $i++)
		$pass[$i] = chr(ord($pass[$i]) ^ (ord($salt[$i]) - 32));

	return $pass;
}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[{
	$result = false;

	if (!isset($mode))
	{
		if (is_dir($file))
		{]]></search>
			<add><![CDATA[{
	$result = false;

	$mode = trim($mode);
	if (empty($mode) || !is_numeric($mode))
	{
		if (is_dir($file))
		{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	// Make sure we have a form of 0777 or '777' or '0777' so its safe for intval '8'
	if ($mode == decoct(octdec("$mode")))
		$result = @chmod($file, intval($mode, 8));

	return $result;]]></search>
			<add><![CDATA[	}

	// Make sure we have a form of 0777 or '777' or '0777' so its safe for intval '8'
	if (($mode % 10) >= 8)
		$mode = decoct($mode);
	if ($mode == decoct(octdec($mode)))
		$result = @chmod($file, intval($mode, 8));

	return $result;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Poll.subs.php -->		
	<file name="SUBSDIR/Poll.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		SELECT pc.id_choice, pc.label, pc.votes, COALESCE(lp.id_choice, -1) AS voted_this
		FROM {db_prefix}poll_choices AS pc
			LEFT JOIN {db_prefix}log_polls AS lp ON (lp.id_choice = pc.id_choice AND lp.id_poll = {int:id_poll} AND lp.id_member = {int:current_member} AND lp.id_member != {int:not_guest})
		WHERE pc.id_poll = {int:id_poll}',
		array(
			'current_member' => $id_member,
			'id_poll' => $id_poll,]]></search>
			<add><![CDATA[		SELECT pc.id_choice, pc.label, pc.votes, COALESCE(lp.id_choice, -1) AS voted_this
		FROM {db_prefix}poll_choices AS pc
			LEFT JOIN {db_prefix}log_polls AS lp ON (lp.id_choice = pc.id_choice AND lp.id_poll = {int:id_poll} AND lp.id_member = {int:current_member} AND lp.id_member != {int:not_guest})
		WHERE pc.id_poll = {int:id_poll}
		ORDER by pc.id_choice',
		array(
			'current_member' => $id_member,
			'id_poll' => $id_poll,]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Priority.class.php -->		
	<file name="SUBSDIR/Priority.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	/**
	 * Add a new entity to the pile
	 *
	 * @param string   $entity name of a entity
	 * @param int|null $priority an integer defining the priority of the entity.
	 */
	public function add($entity, $priority = null)
	{
		$this->_all_general[$entity] = $priority === null
			? $this->_general_highest_priority
			: (int) $priority;
		$this->_general_highest_priority = max($this->_all_general) + 100;]]></search>
			<add><![CDATA[	/**
	 * Add a new entity to the pile
	 *
	 * @param string   $layer name of a entity
	 * @param int|null $priority an integer defining the priority of the entity.
	 */
	public function add($layer, $priority = null)
	{
		$this->_all_general[$layer] = $priority === null
			? $this->_general_highest_priority
			: (int) $priority;
		$this->_general_highest_priority = max($this->_all_general) + 100;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	/**
	 * Add an entity to the pile before another existing entity
	 *
	 * @param string $entity the name of a entity
	 * @param string $following the name of the entity before which $entity must be added
	 */
	public function addBefore($entity, $following)
	{
		$this->_all_before[$entity] = $following;
	}

	/**]]></search>
			<add><![CDATA[	/**
	 * Add an entity to the pile before another existing entity
	 *
	 * @param string $layer the name of a entity
	 * @param string $following the name of the entity before which $entity must be added
	 */
	public function addBefore($layer, $following)
	{
		$this->_all_before[$layer] = $following;
	}

	/**]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Profile.subs.php -->		
	<file name="SUBSDIR/Profile.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	if (isset($_POST['passwrd2']) && $_POST['passwrd2'] != '')
	{
		require_once(SUBSDIR . '/Auth.subs.php');
		setLoginCookie(60 * $modSettings['cookieTime'], $context['id_member'], hash('sha256', Util::strtolower($cur_profile['member_name']) . un_htmlspecialchars($_POST['passwrd2']) . $cur_profile['password_salt']));
	}

	loadUserSettings();]]></search>
			<add><![CDATA[	if (isset($_POST['passwrd2']) && $_POST['passwrd2'] != '')
	{
		require_once(SUBSDIR . '/Auth.subs.php');
		$check = validateLoginPassword($_POST['passwrd2'], $_POST['passwrd1'], $cur_profile['member_name']);
		if ($check === true)
		{
			setLoginCookie(60 * $modSettings['cookieTime'], $context['id_member'], hash('sha256', $_POST['passwrd1'] . $cur_profile['password_salt']));
		}
	}

	loadUserSettings();]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ */
function getMemberNotificationsProfile($member_id)
{
	global $modSettings;

	if (empty($modSettings['enabled_mentions']))
		return array();]]></search>
			<add><![CDATA[ */
function getMemberNotificationsProfile($member_id)
{
	global $modSettings, $context;

	if (empty($modSettings['enabled_mentions']))
		return array();]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$enabled_mentions = explode(',', $modSettings['enabled_mentions']);
	$user_preferences = getUsersNotificationsPreferences($enabled_mentions, $member_id);
	$mention_types = array();

	foreach ($enabled_mentions as $type)
	{]]></search>
			<add><![CDATA[	$enabled_mentions = explode(',', $modSettings['enabled_mentions']);
	$user_preferences = getUsersNotificationsPreferences($enabled_mentions, $member_id);
	$mention_types = array();
	$push_enabled = false;

	foreach ($enabled_mentions as $type)
	{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$notif[$key] = array('id' => $val, 'enabled' => $user_preferences[$member_id][$type] === $key);
			if ($user_preferences[$member_id][$type] > 0)
				$type_on = true;
		}

		if (!empty($notif))
			$mention_types[$type] = array('data' => $notif, 'enabled' => $type_on);
	}

	return $mention_types;
}]]></search>
			<add><![CDATA[			$notif[$key] = array('id' => $val, 'enabled' => $user_preferences[$member_id][$type] === $key);
			if ($user_preferences[$member_id][$type] > 0)
				$type_on = true;

			if (!$push_enabled && $val === 'notification' && $user_preferences[$member_id][$type] === $key)
				$push_enabled = true;
		}

		if (!empty($notif))
			$mention_types[$type] = array('data' => $notif, 'enabled' => $type_on);
	}

	// If they enabled notifications alert, then lets ask for browser permission to show them
	// just blows smoke if they already gave it.
	$push_enabled &= !empty($modSettings['usernotif_desktop_enable']) && !empty($context['profile_updated']);
	if ($push_enabled)
	{
		addInlineJavascript('
			$(function() {
				Push.Permission.request();
			});', true);
	}

	return $mention_types;
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ProfileOptions.subs.php -->		
	<file name="SUBSDIR/ProfileOptions.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	);

	// If we are mentioning buddies, then let them know who's their buddy.
	if ($adding && !empty($modSettings['mentions_enabled']) && !empty($modSettings['mentions_buddy']))
	{
		$notifier = Notifications::instance();
	}]]></search>
			<add><![CDATA[	);

	// If we are mentioning buddies, then let them know who's their buddy.
	if ($adding && !empty($modSettings['mentions_enabled']))
	{
		$notifier = Notifications::instance();
	}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for QueryAnalysis.class.php -->		
	<file name="SUBSDIR/QueryAnalysis.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	protected function _is_select_query($query_data)
	{
		$is_select_query = substr(trim($query_data), 0, 6) == 'SELECT';
		$this->_select = '';

		if ($is_select_query)]]></search>
			<add><![CDATA[	 */
	protected function _is_select_query($query_data)
	{
		$is_select_query = substr(trim($query_data), 0, 6) == 'SELECT' || substr(trim($query_data), 0, 4) == 'WITH';
		$this->_select = '';

		if ($is_select_query)]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for RepairBoards.subs.php -->		
	<file name="SUBSDIR/RepairBoards.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				$row['myid_last_msg'] = (int) $row['myid_last_msg'];

				// Not really a problem?
				if ($row['myid_first_msg'] == $row['myid_first_msg'] && $row['myid_first_msg'] == $row['myid_first_msg'] && $row['approved'] == $row['firstmsg_approved'])
					return false;

				$memberStartedID = getMsgMemberID($row['myid_first_msg']);
				$memberUpdatedID = getMsgMemberID($row['myid_last_msg']);

				setTopicAttribute($row['id_topic'], array(
					'id_first_msg' => $row['myid_first_msg'],
					'id_member_started' => $memberStartedID,]]></search>
			<add><![CDATA[				$row['myid_last_msg'] = (int) $row['myid_last_msg'];

				// Not really a problem?
				if ($row['id_first_msg'] == $row['myid_first_msg'] && $row['id_last_msg'] == $row['myid_last_msg'] && $row['approved'] == $row['firstmsg_approved'])
					return false;

				$memberStartedID = getMsgMemberID($row['myid_first_msg']);
				$memberUpdatedID = getMsgMemberID($row['myid_last_msg']);

				require_once(SUBSDIR . '/Topic.subs.php');
				setTopicAttribute($row['id_topic'], array(
					'id_first_msg' => $row['myid_first_msg'],
					'id_member_started' => $memberStartedID,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				global $txt, $context;

				// A pretend error?
				if ($row['myid_first_msg'] == $row['myid_first_msg'] && $row['myid_first_msg'] == $row['myid_first_msg'] && $row['approved'] == $row['firstmsg_approved'])
					return false;

				if ($row['id_first_msg'] != $row['myid_first_msg'])
					$context['repair_errors'][] = sprintf($txt['repair_stats_topics_1'], $row['id_topic'], $row['id_first_msg']);
				if ($row['id_last_msg'] != $row['myid_last_msg'])]]></search>
			<add><![CDATA[				global $txt, $context;

				// A pretend error?
				if ($row['id_first_msg'] == $row['myid_first_msg'] && $row['id_last_msg'] == $row['myid_last_msg'] && $row['approved'] == $row['firstmsg_approved'])
					return false;
				if ($row['id_first_msg'] != $row['myid_first_msg'])
					$context['repair_errors'][] = sprintf($txt['repair_stats_topics_1'], $row['id_topic'], $row['id_first_msg']);
				if ($row['id_last_msg'] != $row['myid_last_msg'])]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for DailyDigest.php -->		
	<file name="SUBSDIR/ScheduledTask/DailyDigest.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		loadEssentialThemeData();

		// If the maillist function is on then so is the enhanced digest
		$maillist = !empty($modSettings['maillist_enabled']) && !empty($modSettings['pbe_digest_enabled']);
		if ($maillist)
			require_once(SUBSDIR . '/Emailpost.subs.php');
]]></search>
			<add><![CDATA[		loadEssentialThemeData();

		// If the maillist function is on then so is the enhanced digest
		$maillist = !empty($modSettings['maillist_enabled']) && !empty($modSettings['maillist_digest_enabled']);
		if ($maillist)
			require_once(SUBSDIR . '/Emailpost.subs.php');
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for UserAccessMentions.php -->		
	<file name="SUBSDIR/ScheduledTask/UserAccessMentions.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		$db = database();

		if (!empty($modSettings['user_access_mentions']))
		{
			$user_access_mentions = \Util::unserialize($modSettings['user_access_mentions']);]]></search>
			<add><![CDATA[
		$db = database();

		$mentionTypes = array('mentionmem', 'likemsg', 'rlikemsg', 'quotedmem');

		if (!empty($modSettings['user_access_mentions']))
		{
			$user_access_mentions = \Util::unserialize($modSettings['user_access_mentions']);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[							LIMIT {int:start}, {int:limit}',
							array(
								'current_member' => $member,
								'mention_types' => array('mentionmem', 'likemsg', 'rlikemsg', 'quotedmem'),
								'user_see_board' => ($can == 'can' ? '' : 'NOT ') . '(' . $user_see_board . (!empty($modSettings['recycle_enable']) && $modSettings['recycle_board'] > 0 ? ' AND b.id_board != ' . $modSettings['recycle_board'] : '') . ')',
								'start' => $start,
								'limit' => $limit,]]></search>
			<add><![CDATA[							LIMIT {int:start}, {int:limit}',
							array(
								'current_member' => $member,
								'mention_types' => $mentionTypes,
								'user_see_board' => ($can == 'can' ? '' : 'NOT ') . '(' . $user_see_board . (!empty($modSettings['recycle_enable']) && $modSettings['recycle_board'] > 0 ? ' AND b.id_board != ' . $modSettings['recycle_board'] : '') . ')',
								'start' => $start,
								'limit' => $limit,]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					AND mention_type IN ({array_string:mention_types})',
				array(
					'last_id_member' => $current_check,
					'mention_types' => array('mentionmem', 'likemsg', 'rlikemsg'),
				)
			);
			list ($remaining) = $db->fetch_row($request);]]></search>
			<add><![CDATA[					AND mention_type IN ({array_string:mention_types})',
				array(
					'last_id_member' => $current_check,
					'mention_types' => $mentionTypes,
				)
			);
			list ($remaining) = $db->fetch_row($request);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				LIMIT {int:limit}',
				array(
					'last_id_member' => $current_check,
					'mention_types' => array('mentionmem', 'likemsg', 'rlikemsg'),
					'limit' => $limit,
				)
			);]]></search>
			<add><![CDATA[				LIMIT {int:limit}',
				array(
					'last_id_member' => $current_check,
					'mention_types' => $mentionTypes,
					'limit' => $limit,
				)
			);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					LIMIT 1',
					array(
						'current_member' => $row['id_member'],
						'mention_types' => array('mentionmem', 'likemsg', 'rlikemsg', 'quotedmem'),
						'user_see_board' => 'NOT (' . $user_see_board . (!empty($modSettings['recycle_enable']) && $modSettings['recycle_board'] > 0 ? ' AND b.id_board != ' . $modSettings['recycle_board'] : '') . ')',
					)
				);]]></search>
			<add><![CDATA[					LIMIT 1',
					array(
						'current_member' => $row['id_member'],
						'mention_types' => $mentionTypes,
						'user_see_board' => 'NOT (' . $user_see_board . (!empty($modSettings['recycle_enable']) && $modSettings['recycle_board'] > 0 ? ' AND b.id_board != ' . $modSettings['recycle_board'] : '') . ')',
					)
				);]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Fulltext.php -->		
	<file name="SUBSDIR/Search/API/Fulltext.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		if (!empty($modSettings['search_simple_fulltext']))
		{
			$query_where[] = 'MATCH (body) AGAINST ({string:body_match})';
			$query_params['body_match'] = implode(' ', array_diff($words['indexed_words'], $query_params['excluded_index_words']));
		}
		else]]></search>
			<add><![CDATA[
		if (!empty($modSettings['search_simple_fulltext']))
		{
			$query_where[] = 'MATCH (body, subject) AGAINST ({string:body_match})';
			$query_params['body_match'] = implode(' ', array_diff($words['indexed_words'], $query_params['excluded_index_words']));
		}
		else]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// If we have bool terms to search, add them in
			if ($query_params['boolean_match'])
			{
				$query_where[] = 'MATCH (body) AGAINST ({string:boolean_match} IN BOOLEAN MODE)';
			}
		}
]]></search>
			<add><![CDATA[			// If we have bool terms to search, add them in
			if ($query_params['boolean_match'])
			{
				$query_where[] = 'MATCH (body, subject) AGAINST ({string:boolean_match} IN BOOLEAN MODE)';
			}
		}
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for DatabaseHandler.php -->		
	<file name="SUBSDIR/SessionHandler/DatabaseHandler.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			return false;
		}

		// First try to update an existing row...
		$this->_db->query('', '
			UPDATE {db_prefix}sessions
			SET data = {string:data}, last_update = {int:last_update}
			WHERE session_id = {string:session_id}',
			array(
				'last_update' => time(),
				'data' => $data,
				'session_id' => $sessionId,
			)
		);

		// If that didn't work, try inserting a new one.
		if ($this->_db->affected_rows() == 0)
		{
			$this->_db->insert('ignore',
				'{db_prefix}sessions',
				array('session_id' => 'string', 'data' => 'string', 'last_update' => 'int'),
				array($sessionId, $data, time()),
				array('session_id')
			);
		}

		return true;
	}
}]]></search>
			<add><![CDATA[			return false;
		}

		// Update the session data, replace if necessary
		$this->_db->insert('replace',
			'{db_prefix}sessions',
			array('session_id' => 'string', 'data' => 'string', 'last_update' => 'int'),
			array($sessionId, $data, time()),
			array('session_id')
		);

		return true;
	}
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for SessionHandler.php -->		
	<file name="SUBSDIR/SessionHandler/SessionHandler.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	/**
	 * {@inheritdoc}
	 */
	public function gc($maxlifetime)
	{
		return true;
	}]]></search>
			<add><![CDATA[	/**
	 * {@inheritdoc}
	 */
	public function gc($maxLifetime)
	{
		return true;
	}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for SessionHandlerInterface.php -->		
	<file name="SUBSDIR/SessionHandler/SessionHandlerInterface.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	/**
	 * Cleanup old sessions
	 *
	 * @param   int  $maxlifetime  Sessions that have not updated for
	 *                             the last maxlifetime seconds will be removed.
	 *
	 * @return  bool  The return value (usually TRUE on success, FALSE on failure).
	 *                Note this value is returned internally to PHP for processing.
	 */
	public function gc($maxlifetime);

	/**
	 * Initialize session]]></search>
			<add><![CDATA[	/**
	 * Cleanup old sessions
	 *
	 * @param   int  $maxLifetime  Sessions that have not updated for
	 *                             the last maxLifetime seconds will be removed.
	 *
	 * @return  bool  The return value (usually TRUE on success, FALSE on failure).
	 *                Note this value is returned internally to PHP for processing.
	 */
	public function gc($maxLifetime);

	/**
	 * Initialize session]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for File.php -->		
	<file name="SUBSDIR/SettingsFormAdapter/File.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:    BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:    2011 Simple Machines (http://www.simplemachines.org)
 * license:    BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				}
			}

			if (extension_loaded('Zend OPcache') && ini_get('opcache.enable') && stripos(BOARDDIR, ini_get('opcache.restrict_api')) !== 0)
			{
				opcache_invalidate(BOARDDIR . '/Settings.php');
			}]]></search>
			<add><![CDATA[				}
			}

			if (extension_loaded('Zend OPcache') && ini_get('opcache.enable') &&
				((ini_get('opcache.restrict_api') === '' || stripos(BOARDDIR, ini_get('opcache.restrict_api')) !== 0)))
			{
				opcache_invalidate(BOARDDIR . '/Settings.php');
			}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Smileys.subs.php -->		
	<file name="SUBSDIR/Smileys.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$cols['id'][] = $i;
		$cols['selected'][] = $i;
		$cols['path'][] = $set;
		$cols['name'][] = $set_names[$i];
	}

	$sort_flag = strpos($sort, 'DESC') === false ? SORT_ASC : SORT_DESC;]]></search>
			<add><![CDATA[		$cols['id'][] = $i;
		$cols['selected'][] = $i;
		$cols['path'][] = $set;
		$cols['name'][] = stripslashes($set_names[$i]);
	}

	$sort_flag = strpos($sort, 'DESC') === false ? SORT_ASC : SORT_DESC;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Themes.subs.php -->		
	<file name="SUBSDIR/Themes.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[function write_theme_info($name, $version, $theme_dir, $theme_values)
{
	$xml_info = '<' . '?xml version="1.0"?' . '>
	<theme-info xmlns="http://www.elkarte.net/xml/theme-info" xmlns:elk="http://www.elkarte.net/">
		<!-- For the id, always use something unique - put your name, a colon, and then the package name. -->
		<id>elk:' . Util::strtolower(str_replace(array(' '), '_', $name)) . '</id>
		<version>' . $version . '</version>]]></search>
			<add><![CDATA[function write_theme_info($name, $version, $theme_dir, $theme_values)
{
	$xml_info = '<' . '?xml version="1.0"?' . '>
	<theme-info xmlns="https://www.elkarte.net/xml/theme-info" xmlns:elk="https://www.elkarte.net/">
		<!-- For the id, always use something unique - put your name, a colon, and then the package name. -->
		<id>elk:' . Util::strtolower(str_replace(array(' '), '_', $name)) . '</id>
		<version>' . $version . '</version>]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Topic.subs.php -->		
	<file name="SUBSDIR/Topic.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			)
		);

		// Remove all mentions now that the topic is gone
		$db->query('', '
			DELETE FROM {db_prefix}log_mentions
			WHERE id_target IN ({array_int:messages})
				AND mention_type IN ({array_string:mension_types})',
			array(
				'messages' => $messages,
				'mension_types' => array('mentionmem', 'likemsg', 'rlikemsg'),
			)
		);
	}

	// Delete messages in each topic.]]></search>
			<add><![CDATA[			)
		);

		// Remove all message mentions now that the topic is gone
		$remover = new MessagesDelete($modSettings['recycle_enable'], $modSettings['recycle_board']);
		$remover->deleteMessageMentions($messages);
	}

	// Delete messages in each topic.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	$db = database();

	// Get the messages and stick them into an array.
	$request = $db->query('', '
		SELECT m.subject, COALESCE(mem.real_name, m.poster_name) AS real_name, m.poster_time, m.body, m.id_msg, m.smileys_enabled, m.id_member
		FROM {db_prefix}messages AS m
			LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = m.id_member)
		WHERE m.id_topic = {int:current_topic}' . (empty($messages['before']) ? '' : '
			AND m.id_msg < {int:msg_before}') . (empty($messages['after']) ? '' : '
			AND m.id_msg > {int:msg_after}') . (empty($messages['excluded']) ? '' : '
			AND m.id_msg NOT IN ({array_int:no_split_msgs})') . (empty($messages['included']) ? '' : '
			AND m.id_msg IN ({array_int:split_msgs})') . (!$only_approved ? '' : '
			AND approved = {int:is_approved}') . '
		ORDER BY m.id_msg DESC
		LIMIT {int:start}, {int:messages_per_page}',
		array(
			'current_topic' => $topic,
			'no_split_msgs' => !empty($messages['excluded']) ? $messages['excluded'] : array(),
			'split_msgs' => !empty($messages['included']) ? $messages['included'] : array(),
			'is_approved' => 1,
			'start' => $start,
			'messages_per_page' => $items_per_page,
			'msg_before' => !empty($messages['before']) ? (int) $messages['before'] : 0,
			'msg_after' => !empty($messages['after']) ? (int) $messages['after'] : 0,
		)
	);

	$messages = array();
	$parser = \BBC\ParserWrapper::instance();]]></search>
			<add><![CDATA[	$db = database();

	// Get the messages and stick them into an array.
    $request = $db->query('', '
		SELECT 
			m.subject, COALESCE(mem.real_name, m.poster_name) AS real_name, m.poster_time, m.body, 
			m.id_msg, m.smileys_enabled, m.id_member 
		FROM (
			SELECT 
				m.id_msg 
			FROM {db_prefix}messages AS m
			WHERE m.id_topic = {int:current_topic}' . (empty($messages['before']) ? '' : '
				AND m.id_msg < {int:msg_before}') . (empty($messages['after']) ? '' : '
				AND m.id_msg > {int:msg_after}') . (empty($messages['excluded']) ? '' : '
				AND m.id_msg NOT IN ({array_int:no_split_msgs})') . (empty($messages['included']) ? '' : '
				AND m.id_msg IN ({array_int:split_msgs})') . (!$only_approved ? '' : '
				AND approved = {int:is_approved}') . '
			ORDER BY m.id_msg DESC
			LIMIT {int:start}, {int:messages_per_page}) AS o 
		JOIN {db_prefix}messages as m ON o.id_msg=m.id_msg 
		LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = m.id_member)
		ORDER BY m.id_msg DESC',
        array(
            'current_topic' => $topic,
            'no_split_msgs' => !empty($messages['excluded']) ? $messages['excluded'] : array(),
            'split_msgs' => !empty($messages['included']) ? $messages['included'] : array(),
            'is_approved' => 1,
            'start' => $start,
            'messages_per_page' => $items_per_page,
            'msg_before' => !empty($messages['before']) ? (int) $messages['before'] : 0,
            'msg_after' => !empty($messages['after']) ? (int) $messages['after'] : 0,
        )
    );

	$messages = array();
	$parser = \BBC\ParserWrapper::instance();]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		'all_posters' => array(),
	);

	$request = $db->query('display_get_post_poster', '
		SELECT id_msg, id_member, approved
		FROM {db_prefix}messages
		WHERE id_topic = {int:current_topic}' . (!$modSettings['postmod_active'] || allowedTo('approve_posts') ? '' : '
		GROUP BY id_msg
		HAVING (approved = {int:is_approved}' . ($user_info['is_guest'] ? '' : ' OR id_member = {int:current_member}') . ')') . '
		ORDER BY id_msg ' . ($sort ? '' : 'DESC') . ($limit['messages_per_page'] == -1 ? '' : '
		LIMIT ' . $limit['start'] . ', ' . $limit['offset']),
		array(
			'current_member' => $user_info['id'],
			'current_topic' => $topic,
			'is_approved' => 1,
			'blank_id_member' => 0,
		)
	);
	while ($row = $db->fetch_assoc($request))
	{
		if (!empty($row['id_member']))
			$topic_details['all_posters'][$row['id_msg']] = $row['id_member'];
			$topic_details['messages'][] = $row['id_msg'];
	}
	$db->free_result($request);
]]></search>
			<add><![CDATA[		'all_posters' => array(),
	);

	// When evaluating potentially huge offsets, grab the ids only, first.
    // The performance impact is still significant going from three columns to one.
	$postMod = $modSettings['postmod_active'] && allowedTo('approve_posts');
    $request = $db->query('display_get_post_poster', '
		SELECT 
			m.id_msg, m.id_member
		FROM (
			SELECT
				id_msg
			FROM {db_prefix}messages
			WHERE id_topic = {int:current_topic}' . ($postMod ? '' : '
			AND (approved = {int:is_approved}' . ($user_info['is_guest'] ? '' : ' OR id_member = {int:current_member}') . ')') . '
			ORDER BY id_msg ' . ($sort ? '' : 'DESC') . ($limit['messages_per_page'] == -1 ? '' : '
			LIMIT ' . $limit['start'] . ', ' . $limit['offset']) . ') AS o 
		JOIN {db_prefix}messages as m ON o.id_msg=m.id_msg
		ORDER BY m.id_msg ' . ($sort ? '' : 'DESC'),
        array(
            'current_member' => $user_info['id'],
            'current_topic' => $topic,
            'is_approved' => 1,
            'blank_id_member' => 0,
        )
    );
	while ($row = $db->fetch_assoc($request))
	{
		if (!empty($row['id_member']))
			$topic_details['all_posters'][$row['id_msg']] = $row['id_member'];

		$topic_details['messages'][] = $row['id_msg'];
	}
	$db->free_result($request);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	// Get some topics to merge it with.
	$request = $db->query('', '
		SELECT t.id_topic, m.subject, m.id_member, COALESCE(mem.real_name, m.poster_name) AS poster_name
		FROM {db_prefix}topics AS t
			INNER JOIN {db_prefix}messages AS m ON (m.id_msg = t.id_first_msg)
			LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = m.id_member)
		WHERE t.id_board = {int:id_board}
			AND t.id_topic != {int:id_topic}' . (empty($approved) ? '
			AND t.approved = {int:is_approved}' : '') . '
		ORDER BY t.is_sticky DESC, t.id_last_msg DESC
		LIMIT {int:offset}, {int:limit}',
		array(
			'id_board' => $id_board,
			'id_topic' => $id_topic,]]></search>
			<add><![CDATA[
	// Get some topics to merge it with.
	$request = $db->query('', '
		SELECT t.id_topic, m.subject, m.id_member, COALESCE(mem.real_name, m.poster_name) AS poster_name 
		FROM (
			SELECT 
				t.id_topic 
			FROM {db_prefix}topics AS t
			WHERE t.id_board = {int:id_board}
				AND t.id_topic != {int:id_topic}' . (empty($approved) ? '
				AND t.approved = {int:is_approved}' : '') . '
			ORDER BY t.is_sticky DESC, t.id_last_msg DESC
			LIMIT {int:offset}, {int:limit}) AS o 
		INNER JOIN {db_prefix}topics AS t ON (o.id_topic = t.id_topic)
		INNER JOIN {db_prefix}messages AS m ON (m.id_msg = t.id_first_msg)
		LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = m.id_member)
		ORDER BY t.is_sticky DESC, t.id_last_msg DESC',
		array(
			'id_board' => $id_board,
			'id_topic' => $id_topic,]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for TopicUtil.class.php -->		
	<file name="SUBSDIR/TopicUtil.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		$messages_per_page = empty($modSettings['disableCustomPerPage']) && !empty($options['messages_per_page']) ? $options['messages_per_page'] : $modSettings['defaultMaxMessages'];
		$topicseen = $topicseen ? ';topicseen' : '';

		$icon_sources = new MessageTopicIcons(!empty($modSettings['messageIconChecks_enable']), $settings['theme_dir'], $topics_info);

		$parser = \BBC\ParserWrapper::instance();
]]></search>
			<add><![CDATA[		$messages_per_page = empty($modSettings['disableCustomPerPage']) && !empty($options['messages_per_page']) ? $options['messages_per_page'] : $modSettings['defaultMaxMessages'];
		$topicseen = $topicseen ? ';topicseen' : '';

		$icon_sources = new MessageTopicIcons(!empty($modSettings['messageIconChecks_enable']), $settings['theme_dir']);

		$parser = \BBC\ParserWrapper::instance();
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					'timestamp' => forum_time(true, $row['first_poster_time']),
					'subject' => $row['first_subject'],
					'preview' => trim($row['first_body']),
					'icon' => $row['first_icon'],
					'icon_url' => $icon_sources->{$row['first_icon']},
					'href' => $scripturl . '?topic=' . $row['id_topic'] . '.0' . $topicseen,
					'link' => '<a href="' . $scripturl . '?topic=' . $row['id_topic'] . '.0' . $topicseen . '">' . $row['first_subject'] . '</a>'
				),]]></search>
			<add><![CDATA[					'timestamp' => forum_time(true, $row['first_poster_time']),
					'subject' => $row['first_subject'],
					'preview' => trim($row['first_body']),
					'icon' => $icon_sources->getIconName($row['first_icon']),
					'icon_url' => $icon_sources->getIconURL($row['first_icon']),
					'href' => $scripturl . '?topic=' . $row['id_topic'] . '.0' . $topicseen,
					'link' => '<a href="' . $scripturl . '?topic=' . $row['id_topic'] . '.0' . $topicseen . '">' . $row['first_subject'] . '</a>'
				),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					'timestamp' => forum_time(true, $row['last_poster_time']),
					'subject' => $row['last_subject'],
					'preview' => trim($row['last_body']),
					'icon' => $row['last_icon'],
					'icon_url' => $icon_sources->{$row['last_icon']},
					'href' => $scripturl . '?topic=' . $row['id_topic'] . $url_fragment,
					'link' => '<a href="' . $scripturl . '?topic=' . $row['id_topic'] . $url_fragment . '" ' . ($row['num_replies'] == 0 ? '' : 'rel="nofollow"') . '>' . $row['last_subject'] . '</a>',
				),]]></search>
			<add><![CDATA[					'timestamp' => forum_time(true, $row['last_poster_time']),
					'subject' => $row['last_subject'],
					'preview' => trim($row['last_body']),
					'icon' =>  $icon_sources->getIconName($row['last_icon']),
					'icon_url' => $icon_sources->getIconURL($row['last_icon']),
					'href' => $scripturl . '?topic=' . $row['id_topic'] . $url_fragment,
					'link' => '<a href="' . $scripturl . '?topic=' . $row['id_topic'] . $url_fragment . '" ' . ($row['num_replies'] == 0 ? '' : 'rel="nofollow"') . '>' . $row['last_subject'] . '</a>',
				),]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				'is_hot' => !empty($modSettings['useLikesNotViews']) ? $row['num_likes'] >= $modSettings['hotTopicPosts'] : $row['num_replies'] >= $modSettings['hotTopicPosts'],
				'is_very_hot' => !empty($modSettings['useLikesNotViews']) ? $row['num_likes'] >= $modSettings['hotTopicVeryPosts'] : $row['num_replies'] >= $modSettings['hotTopicVeryPosts'],
				'is_posted_in' => false,
				'icon' => $row['first_icon'],
				'icon_url' => $icon_sources->{$row['first_icon']},
				'subject' => $row['first_subject'],
				'new' => !empty($row['id_msg_modified']) && $row['new_from'] <= $row['id_msg_modified'],
				'new_from' => $row['new_from'],]]></search>
			<add><![CDATA[				'is_hot' => !empty($modSettings['useLikesNotViews']) ? $row['num_likes'] >= $modSettings['hotTopicPosts'] : $row['num_replies'] >= $modSettings['hotTopicPosts'],
				'is_very_hot' => !empty($modSettings['useLikesNotViews']) ? $row['num_likes'] >= $modSettings['hotTopicVeryPosts'] : $row['num_replies'] >= $modSettings['hotTopicVeryPosts'],
				'is_posted_in' => false,
				'icon' => $icon_sources->getIconName($row['first_icon']),
				'icon_url' => $icon_sources->getIconURL($row['first_icon']),
				'subject' => $row['first_subject'],
				'new' => !empty($row['id_msg_modified']) && $row['new_from'] <= $row['id_msg_modified'],
				'new_from' => $row['new_from'],]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				$topics[$row['id_topic']]['first_post']['started_by'] = sprintf($txt['topic_started_by_in'], '<strong>' . $topics[$row['id_topic']]['first_post']['member']['link'] . '</strong>', '<em>' . $topics[$row['id_topic']]['board']['link'] . '</em>');
			}

			if (!empty($row['avatar']) || !empty($row['id_attach']))
			{
				$topics[$row['id_topic']]['last_post']['member']['avatar'] = determineAvatar($row);
			}]]></search>
			<add><![CDATA[				$topics[$row['id_topic']]['first_post']['started_by'] = sprintf($txt['topic_started_by_in'], '<strong>' . $topics[$row['id_topic']]['first_post']['member']['link'] . '</strong>', '<em>' . $topics[$row['id_topic']]['board']['link'] . '</em>');
			}

			if (isset($row['avatar']) || !empty($row['id_attach']))
			{
				$topics[$row['id_topic']]['last_post']['member']['avatar'] = determineAvatar($row);
			}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for UnTgz.class.php -->		
	<file name="SUBSDIR/UnTgz.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		foreach ($this->_current as $key => $value)
		{
			if (in_array($key, $octdec))
				$this->_current[$key] = octdec(trim($value));
			else
				$this->_current[$key] = trim($value);
		}]]></search>
			<add><![CDATA[		foreach ($this->_current as $key => $value)
		{
			if (in_array($key, $octdec))
			{
				$value = trim($value);
				if (!empty($value) && is_numeric($value))
				{
				if (($value % 10) >= 8)
					$value = decoct($value);
					$value = octdec($value);
				}
				$this->_current[$key] = $value;
			}
			else
				$this->_current[$key] = trim($value);
		}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Unread.class.php -->		
	<file name="SUBSDIR/Unread.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:		BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	const UNREAD = 0;
	const UNREADREPLIES = 1;

	/** @var bool */
	private $_have_temp_table = false;
	/** @var bool */
	private $_ascending = false;
	/** @var string */]]></search>
			<add><![CDATA[	const UNREAD = 0;
	const UNREADREPLIES = 1;

	/** @var bool */
	private $_ascending = false;
	/** @var string */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		return $this->_ascending;
	}

	/**
	 * Tries to create a temporary table according to the type of action the
	 * class is performing
	 */
	public function createTempTable()
	{
		if ($this->_action === self::UNREAD)
			$this->_recent_log_topics_unread_tempTable();
		else
		{
			$board = !empty($this->_query_parameters['boards'][0]) && count($this->_query_parameters['boards']) === 1 ? $this->_query_parameters['boards'][0] : 0;

			$this->_unreadreplies_tempTable($board);
		}
	}

	/**
	 * Sets if the data returned by the class will include a shorted version
	 * of the body of the last message.]]></search>
			<add><![CDATA[		return $this->_ascending;
	}

	/**
	 * Sets if the data returned by the class will include a shorted version
	 * of the body of the last message.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			$this->_preview_bodies = (int) $chars;
	}

	/**
	 * If a temporary table has been created
	 */
	public function hasTempTable()
	{
		return $this->_have_temp_table;
	}

	/**
	 * Counts the number of unread topics or messages
	 *]]></search>
			<add><![CDATA[			$this->_preview_bodies = (int) $chars;
	}

	/**
	 * Counts the number of unread topics or messages
	 *]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				LEFT JOIN {db_prefix}boards AS b ON (b.id_board = t.id_board)' : '
				LEFT JOIN {db_prefix}boards AS b ON (b.id_board = ms.id_board)') . '
				LEFT JOIN {db_prefix}members AS mems ON (mems.id_member = ms.id_member)
				LEFT JOIN {db_prefix}members AS meml ON (meml.id_member = ml.id_member)' . ($this->_have_temp_table ? '
				LEFT JOIN {db_prefix}log_topics_unread AS lt ON (lt.id_topic = t.id_topic)' : '
				LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = t.id_topic AND lt.id_member = {int:current_member})') . (!empty($custom_joins) ? implode("\n\t\t\t\t", $custom_joins) : '') . '
				LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = t.id_board AND lmr.id_member = {int:current_member})
			WHERE t.id_board IN ({array_int:boards})
				AND t.id_last_msg >= {int:min_message}]]></search>
			<add><![CDATA[				LEFT JOIN {db_prefix}boards AS b ON (b.id_board = t.id_board)' : '
				LEFT JOIN {db_prefix}boards AS b ON (b.id_board = ms.id_board)') . '
				LEFT JOIN {db_prefix}members AS mems ON (mems.id_member = ms.id_member)
				LEFT JOIN {db_prefix}members AS meml ON (meml.id_member = ml.id_member)
				LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = t.id_topic AND lt.id_member = {int:current_member})' . (!empty($custom_joins) ? implode("\n\t\t\t\t", $custom_joins) : '') . '
				LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = t.id_board AND lmr.id_member = {int:current_member})
			WHERE t.id_board IN ({array_int:boards})
				AND t.id_last_msg >= {int:min_message}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	private function _countUnreadReplies()
	{
		if (!empty($this->_have_temp_table))
		{
			$request = $this->_db->query('', '
				SELECT COUNT(*)
				FROM {db_prefix}topics_posted_in AS pi
					LEFT JOIN {db_prefix}log_topics_posted_in AS lt ON (lt.id_topic = pi.id_topic)
				WHERE pi.id_board IN ({array_int:boards})
					AND COALESCE(lt.id_msg, pi.id_msg) < pi.id_last_msg',
				array_merge($this->_query_parameters, array(
				))
			);
			list ($this->_num_topics) = $this->_db->fetch_row($request);
			$this->_db->free_result($request);
			$this->_min_message = 0;
		}
		else
		{
			$request = $this->_db->query('unread_fetch_topic_count', '
				SELECT COUNT(DISTINCT t.id_topic), MIN(t.id_last_msg)
				FROM {db_prefix}topics AS t
					INNER JOIN {db_prefix}messages AS m ON (m.id_topic = t.id_topic)
					LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = t.id_topic AND lt.id_member = {int:current_member})
					LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = t.id_board AND lmr.id_member = {int:current_member})
				WHERE t.id_board IN ({array_int:boards})
					AND m.id_member = {int:current_member}
					AND COALESCE(lt.id_msg, lmr.id_msg, 0) < t.id_last_msg' . ($this->_post_mod ? '
					AND t.approved = {int:is_approved}' : '') . ($this->_unwatch ? '
					AND COALESCE(lt.unwatched, 0) != 1' : ''),
				array_merge($this->_query_parameters, array(
					'current_member' => $this->_user_id,
					'is_approved' => 1,
				))
			);
			list ($this->_num_topics, $this->_min_message) = $this->_db->fetch_row($request);
			$this->_db->free_result($request);
		}
	}

	/**]]></search>
			<add><![CDATA[	 */
	private function _countUnreadReplies()
	{
		$request = $this->_db->query('unread_fetch_topic_count', '
			SELECT COUNT(DISTINCT t.id_topic), MIN(t.id_last_msg)
			FROM {db_prefix}topics AS t
				INNER JOIN {db_prefix}messages AS m ON (m.id_topic = t.id_topic)
				LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = t.id_topic AND lt.id_member = {int:current_member})
				LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = t.id_board AND lmr.id_member = {int:current_member})
			WHERE t.id_board IN ({array_int:boards})
				AND m.id_member = {int:current_member}
				AND COALESCE(lt.id_msg, lmr.id_msg, 0) < t.id_last_msg' . ($this->_post_mod ? '
				AND t.approved = {int:is_approved}' : '') . ($this->_unwatch ? '
				AND COALESCE(lt.unwatched, 0) != 1' : ''),
			array_merge($this->_query_parameters, array(
				'current_member' => $this->_user_id,
				'is_approved' => 1,
			))
		);
		list ($this->_num_topics, $this->_min_message) = $this->_db->fetch_row($request);
		$this->_db->free_result($request);
	}

	/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		$request = $this->_db->query('', '
			SELECT COUNT(*), MIN(t.id_last_msg)
			FROM {db_prefix}topics AS t' . (!empty($this->_have_temp_table) ? '
				LEFT JOIN {db_prefix}log_topics_unread AS lt ON (lt.id_topic = t.id_topic)' : '
				LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = t.id_topic AND lt.id_member = {int:current_member})') . '
				LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = t.id_board AND lmr.id_member = {int:current_member})
			WHERE t.id_board IN ({array_int:boards})' . ($this->_showing_all_topics && !empty($this->_earliest_msg) ? '
				AND t.id_last_msg > {int:earliest_msg}' : (!$this->_showing_all_topics && $is_first_login ? ']]></search>
			<add><![CDATA[	{
		$request = $this->_db->query('', '
			SELECT COUNT(*), MIN(t.id_last_msg)
			FROM {db_prefix}topics AS t
				LEFT JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = t.id_topic AND lt.id_member = {int:current_member})
				LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = t.id_board AND lmr.id_member = {int:current_member})
			WHERE t.id_board IN ({array_int:boards})' . ($this->_showing_all_topics && !empty($this->_earliest_msg) ? '
				AND t.id_last_msg > {int:earliest_msg}' : (!$this->_showing_all_topics && $is_first_login ? ']]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	 */
	private function _getUnreadReplies($start, $limit, $include_avatars = false)
	{
		if (!empty($this->_have_temp_table))
		{
			$request = $this->_db->query('', '
				SELECT t.id_topic
				FROM {db_prefix}topics_posted_in AS t
					LEFT JOIN {db_prefix}log_topics_posted_in AS lt ON (lt.id_topic = t.id_topic)
				WHERE t.id_board IN ({array_int:boards})
					AND COALESCE(lt.id_msg, t.id_msg) < t.id_last_msg
				ORDER BY {raw:order}
				LIMIT {int:offset}, {int:limit}',
				array_merge($this->_query_parameters, array(
					'order' => (in_array($this->_sort_query, array('t.id_last_msg', 't.id_topic')) ? $this->_sort_query : 't.sort_key') . ($this->_ascending ? '' : ' DESC'),
					'offset' => $start,
					'limit' => $limit,
				))
			);
		}
		else
		{
			$request = $this->_db->query('unread_replies', '
				SELECT DISTINCT t.id_topic
				FROM {db_prefix}topics AS t
					INNER JOIN {db_prefix}messages AS m ON (m.id_topic = t.id_topic AND m.id_member = {int:current_member})' . (strpos($this->_sort_query, 'ms.') === false ? '' : ']]></search>
			<add><![CDATA[	 */
	private function _getUnreadReplies($start, $limit, $include_avatars = false)
	{
        $request = $this->_db->query('unread_replies', '
				SELECT DISTINCT t.id_topic
				FROM {db_prefix}topics AS t
					INNER JOIN {db_prefix}messages AS m ON (m.id_topic = t.id_topic AND m.id_member = {int:current_member})' . (strpos($this->_sort_query, 'ms.') === false ? '' : ']]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				WHERE t.id_board IN ({array_int:boards})
					AND t.id_last_msg >= {int:min_message}
					AND COALESCE(lt.id_msg, lmr.id_msg, 0) < t.id_last_msg' .
					($this->_post_mod ? ' AND t.approved = {int:is_approved}' : '') .
					($this->_unwatch ? ' AND COALESCE(lt.unwatched, 0) != 1' : '') . '
				ORDER BY {raw:order}
				LIMIT {int:offset}, {int:limit}',
				array_merge($this->_query_parameters, array(
					'current_member' => $this->_user_id,
					'min_message' => $this->_min_message,
					'is_approved' => 1,
					'order' => $this->_sort_query . ($this->_ascending ? '' : ' DESC'),
					'offset' => $start,
					'limit' => $limit,
				))
			);
		}
		$topics = array();
		while ($row = $this->_db->fetch_assoc($request))
			$topics[] = $row['id_topic'];]]></search>
			<add><![CDATA[				WHERE t.id_board IN ({array_int:boards})
					AND t.id_last_msg >= {int:min_message}
					AND COALESCE(lt.id_msg, lmr.id_msg, 0) < t.id_last_msg' .
            ($this->_post_mod ? ' AND t.approved = {int:is_approved}' : '') .
            ($this->_unwatch ? ' AND COALESCE(lt.unwatched, 0) != 1' : '') . '
				ORDER BY {raw:order}
				LIMIT {int:offset}, {int:limit}',
            array_merge($this->_query_parameters, array(
                'current_member' => $this->_user_id,
                'min_message' => $this->_min_message,
                'is_approved' => 1,
                'order' => $this->_sort_query . ($this->_ascending ? '' : ' DESC'),
                'offset' => $start,
                'limit' => $limit,
            ))
        );

		$topics = array();
		while ($row = $this->_db->fetch_assoc($request))
			$topics[] = $row['id_topic'];]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
		return Topic_Util::prepareContext($return, true, ((int) $this->_preview_bodies) + 128);
	}

	/**
	 * Handle creation of temporary tables to track unread replies.
	 * The main benefit of this temporary table is not that it's faster;
	 * it's that it avoids locks later.
	 *
	 * @param int $board_id - id of a board if looking at the unread of a single
	 *            board, 0 if looking at the unread of the entire forum
	 */
	private function _unreadreplies_tempTable($board_id)
	{
		$this->_db->query('', '
			DROP TABLE IF EXISTS {db_prefix}topics_posted_in',
			array(
			)
		);

		$this->_db->query('', '
			DROP TABLE IF EXISTS {db_prefix}log_topics_posted_in',
			array(
			)
		);

		$sortKey_joins = array(
			'ms.subject' => '
				INNER JOIN {db_prefix}messages AS ms ON (ms.id_msg = t.id_first_msg)',
			'COALESCE(mems.real_name, ms.poster_name)' => '
				INNER JOIN {db_prefix}messages AS ms ON (ms.id_msg = t.id_first_msg)
				LEFT JOIN {db_prefix}members AS mems ON (mems.id_member = ms.id_member)',
		);

		$this->_db->skip_next_error();
		$this->_have_temp_table = $this->_db->query('', '
			CREATE TEMPORARY TABLE {db_prefix}topics_posted_in (
				id_topic mediumint(8) unsigned NOT NULL default {string:string_zero},
				id_board smallint(5) unsigned NOT NULL default {string:string_zero},
				id_last_msg int(10) unsigned NOT NULL default {string:string_zero},
				id_msg int(10) unsigned NOT NULL default {string:string_zero},
				PRIMARY KEY (id_topic)
			)
			SELECT t.id_topic, t.id_board, t.id_last_msg, COALESCE(lmr.id_msg, 0) AS id_msg' . (!in_array($this->_sort_query, array('t.id_last_msg', 't.id_topic')) ? ', ' . $this->_sort_query . ' AS sort_key' : '') . '
			FROM {db_prefix}messages AS m
				INNER JOIN {db_prefix}topics AS t ON (t.id_topic = m.id_topic)' . ($this->_unwatch ? '
				LEFT JOIN {db_prefix}log_topics AS lt ON (t.id_topic = lt.id_topic AND lt.id_member = {int:current_member})' : '') . '
				LEFT JOIN {db_prefix}log_mark_read AS lmr ON (lmr.id_board = t.id_board AND lmr.id_member = {int:current_member})' . (isset($sortKey_joins[$this->_sort_query]) ? $sortKey_joins[$this->_sort_query] : '') . '
			WHERE m.id_member = {int:current_member}' . (!empty($board_id) ? '
				AND t.id_board = {int:current_board}' : '') . ($this->_post_mod ? '
				AND t.approved = {int:is_approved}' : '') . ($this->_unwatch ? '
				AND COALESCE(lt.unwatched, 0) != 1' : '') . '
			GROUP BY m.id_topic',
			array(
				'current_board' => $board_id,
				'current_member' => $this->_user_id,
				'is_approved' => 1,
				'string_zero' => '0',
			)
		) !== false;

		// If that worked, create a sample of the log_topics table too.
		if ($this->_have_temp_table)
		{
			$this->_db->skip_next_error();
			$this->_have_temp_table = $this->_db->query('', '
				CREATE TEMPORARY TABLE {db_prefix}log_topics_posted_in (
					PRIMARY KEY (id_topic)
				)
				SELECT lt.id_topic, lt.id_msg
				FROM {db_prefix}log_topics AS lt
					INNER JOIN {db_prefix}topics_posted_in AS pi ON (pi.id_topic = lt.id_topic)
				WHERE lt.id_member = {int:current_member}',
				array(
					'current_member' => $this->_user_id,
				)
			) !== false;
		}
	}

	/**
	 * Creates a temporary table for logging of unread topics
	 */
	private function _recent_log_topics_unread_tempTable()
	{
		$this->_db->query('', '
			DROP TABLE IF EXISTS {db_prefix}log_topics_unread',
			array(
			)
		);

		$this->_db->skip_next_error();
		// Let's copy things out of the log_topics table, to reduce searching.
		$this->_have_temp_table = $this->_db->query('', '
			CREATE TEMPORARY TABLE {db_prefix}log_topics_unread (
				PRIMARY KEY (id_topic)
			)
			SELECT lt.id_topic, lt.id_msg, lt.unwatched
			FROM {db_prefix}topics AS t
				INNER JOIN {db_prefix}log_topics AS lt ON (lt.id_topic = t.id_topic)
			WHERE lt.id_member = {int:current_member}
				AND t.id_board IN ({array_int:boards})' . (empty($this->_earliest_msg) ? '' : '
				AND t.id_last_msg > {int:earliest_msg}') . ($this->_post_mod ? '
				AND t.approved = {int:is_approved}' : '') . ($this->_unwatch ? '
				AND lt.unwatched != 1' : ''),
			array_merge($this->_query_parameters, array(
				'current_member' => $this->_user_id,
				'earliest_msg' => $this->_earliest_msg,
				'is_approved' => 1,
			))
		) !== false;
	}
}]]></search>
			<add><![CDATA[
		return Topic_Util::prepareContext($return, true, ((int) $this->_preview_bodies) + 128);
	}
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for UserNotification.class.php -->		
	<file name="SUBSDIR/UserNotification.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	}

	/**
	 * Prepares the javascript for desktop notifications.
	 */
	protected function _addDesktopNotifications()
	{
		loadJavascriptFile('desktop-notify.js');
		addInlineJavascript('
			$(function() {
				ElkNotifier.add(new ElkDesktop(
					{\'icon\': $(\'head\').find("link[rel=\'shortcut icon\']").attr("href")}
				));]]></search>
			<add><![CDATA[	}

	/**
	 * Prepares the javascript for desktop notifications.  The service worker is used on
	 * mobile devices (at least chrome) and needs to be in the root for proper global access.
	 */
	protected function _addDesktopNotifications()
	{
		loadJavascriptFile('push.min.js');
		loadJavascriptFile('desktop-notify.js');
		addInlineJavascript('
			$(function() {
				Push.config({serviceWorker: "./elkServiceWorker.min.js"}); 
				
				ElkNotifier.add(new ElkDesktop(
					{\'icon\': $(\'head\').find("link[rel=\'shortcut icon\']").attr("href")}
				));]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Util.class.php -->		
	<file name="SUBSDIR/Util.class.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	{
		global $modSettings;

		// Preg_replace space characters
		$space_chars = '\x{A0}\x{AD}\x{2000}-\x{200F}\x{201F}\x{202F}\x{3000}\x{FEFF}';

		if (empty($modSettings['disableEntityCheck']))
			$check = preg_replace('~^(?:[ \t\n\r\x0B\x00' . $space_chars . ']|&nbsp;)+|(?:[ \t\n\r\x0B\x00]|&nbsp;)+$~u', '', preg_replace_callback(self::$_entity_check_reg, 'entity_fix__callback', $string));
		else
			$check = preg_replace('~^(?:[ \t\n\r\x0B\x00' . $space_chars . ']|&nbsp;)+|(?:[ \t\n\r\x0B\x00]|&nbsp;)+$~u', '', $string);

		return $check;
	}]]></search>
			<add><![CDATA[	{
		global $modSettings;

		// Preg_replace for any kind of whitespace or invisible separator
		// and invisible control characters and unused code points
		$space_chars = '\p{Z}\p{C}';

		if (empty($modSettings['disableEntityCheck']))
		{
			$check = preg_replace('~^(?:[' . $space_chars . ']|&nbsp;)+|(?:[' . $space_chars . ']|&nbsp;)+$~u', '', preg_replace_callback(self::$_entity_check_reg, 'entity_fix__callback', $string));
		}
		else
		{
			$check = preg_replace('~^(?:[' . $space_chars . ']|&nbsp;)+|(?:[' . $space_chars . ']|&nbsp;)+$~u', '', $string);
		}

		return $check;
	}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for VerificationControls.class.php -->		
	<file name="SUBSDIR/VerificationControls.class.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	);

	// Need GD for CAPTCHA images
	if (!in_array('gd', get_loaded_extensions()))
	{
		array_unshift($known_verifications,'captcha');
	}]]></search>
			<add><![CDATA[	);

	// Need GD for CAPTCHA images
	if (in_array('gd', get_loaded_extensions()))
	{
		array_unshift($known_verifications,'captcha');
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			FROM {db_prefix}antispam_questions' . ($filter === null || !isset($available_filters[$filter['type']]) ? '' : '
			WHERE ' . $available_filters[$filter['type']]),
			array(
				'current_filter' => $filter['value'],
			)
		);
		while ($row = $db->fetch_assoc($request))]]></search>
			<add><![CDATA[			FROM {db_prefix}antispam_questions' . ($filter === null || !isset($available_filters[$filter['type']]) ? '' : '
			WHERE ' . $available_filters[$filter['type']]),
			array(
				'current_filter' => $filter === null ? '' : $filter['value'],
			)
		);
		while ($row = $db->fetch_assoc($request))]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Who.subs.php -->		
	<file name="SUBSDIR/Who.subs.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			'<a href="http://users.tpg.com.au/j_birch/plugins/superfish/">Superfish</a> | &copy; Joel Birch | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="https://github.com/tubalmartin/YUI-CSS-compressor-PHP-port">YUI-CSS compressor (PHP port)</a> | &copy; Yahoo! Inc | Licensed under <a href="http://opensource.org/licenses/BSD-3-Clause">The BSD License</a>',
			'<a href="http://lab.ejci.net/favico.js/">favico.js</a> | &copy; Miroslav Magda | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="https://github.com/ttsvetko/HTML5-Desktop-Notifications">HTML5 Desktop Notifications</a> | &copy; Tsvetan Tsvetkov | Licensed under <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>',
		),
	);
]]></search>
			<add><![CDATA[			'<a href="http://users.tpg.com.au/j_birch/plugins/superfish/">Superfish</a> | &copy; Joel Birch | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="https://github.com/tubalmartin/YUI-CSS-compressor-PHP-port">YUI-CSS compressor (PHP port)</a> | &copy; Yahoo! Inc | Licensed under <a href="http://opensource.org/licenses/BSD-3-Clause">The BSD License</a>',
			'<a href="http://lab.ejci.net/favico.js/">favico.js</a> | &copy; Miroslav Magda | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
			'<a href="https://github.com/ttsvetko/HTML5-Desktop-Notifications">Push.js</a> | &copy; Tyler Nickerson | Licensed under <a href="http://opensource.org/licenses/MIT">The MIT License (MIT)</a>',
		),
	);
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	call_integration_hook('integrate_credits', array(&$credits));

	// Copyright information
	$credits['copyrights']['elkarte'] = '&copy; 2012 - 2017 ElkArte Forum contributors';
	return $credits;
}]]></search>
			<add><![CDATA[	call_integration_hook('integrate_credits', array(&$credits));

	// Copyright information
	$credits['copyrights']['elkarte'] = '&copy; 2012 - 2021 ElkArte Forum contributors';
	return $credits;
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Display.template.php -->		
	<file name="THEMEDIR/Display.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[									</li>';

			echo '
								</ul>';
		}

		// Hide likes if its off]]></search>
			<add><![CDATA[									</li>';

			echo '
								</ul>
							</li>';
		}

		// Hide likes if its off]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			echo '
							<div class="quickReplyContent">
								<textarea cols="600" rows="7" class="quickreply" name="message" id="message" tabindex="', $context['tabindex']++, '"></textarea>
							</div>';
		}
		else
		{
			echo '
							', template_control_richedit($context['post_box_name'], 'smileyBox_message', 'bbcBox_message');
		}

		echo '
							<div id="post_confirm_buttons" class="submitbutton">
								<input type="submit" name="post" value="', $txt['post'], '" onclick="return submitThisOnce(this);" accesskey="s" tabindex="', $context['tabindex']++, '" />
								<input type="submit" name="preview" value="', $txt['preview'], '" onclick="return submitThisOnce(this);" accesskey="p" tabindex="', $context['tabindex']++, '" />';

		// Spellcheck button?
		if ($context['show_spellchecking'])
			echo '
								<input type="button" value="', $txt['spell_check'], '" onclick="spellCheck(\'postmodify\', \'message\', ', (empty($options['use_editor_quick_reply']) ? 'false' : 'true'), ')" tabindex="', $context['tabindex']++, '" />';

		// Draft save button?
		if (!empty($context['drafts_save']))
			echo '
								<input type="button" name="save_draft" value="', $txt['draft_save'], '" onclick="return confirm(' . JavaScriptEscape($txt['draft_save_note']) . ') && submitThisOnce(this);" accesskey="d" tabindex="', $context['tabindex']++, '" />
								';

		echo '
							</div>';

		// Show the draft last saved on area
		if (!empty($context['drafts_autosave']) && !empty($options['drafts_autosave_enabled']))]]></search>
			<add><![CDATA[			echo '
							<div class="quickReplyContent">
								<textarea cols="600" rows="7" class="quickreply" name="message" id="message" tabindex="', $context['tabindex']++, '"></textarea>
							<div id="post_confirm_buttons" class="submitbutton">
								<input type="submit" name="post" value="', $txt['post'], '" onclick="return submitThisOnce(this);" accesskey="s" tabindex="', $context['tabindex']++, '" />
								<input type="submit" name="preview" value="', $txt['preview'], '" onclick="return submitThisOnce(this);" accesskey="p" tabindex="', $context['tabindex']++, '" />';

			// Spellcheck button?
			if ($context['show_spellchecking'])
				echo '
								<input type="button" value="', $txt['spell_check'], '" onclick="spellCheck(\'postmodify\', \'message\', ', (empty($options['use_editor_quick_reply']) ? 'false' : 'true'), ')" tabindex="', $context['tabindex']++, '" />';

			// Draft save button?
			if (!empty($context['drafts_save']))
				echo '
								<input type="button" name="save_draft" value="', $txt['draft_save'], '" onclick="return confirm(' . JavaScriptEscape($txt['draft_save_note']) . ') && submitThisOnce(this);" accesskey="d" tabindex="', $context['tabindex']++, '" />
								<input type="hidden" id="id_draft" name="id_draft" value="', empty($context['id_draft']) ? 0 : $context['id_draft'], '" />';

			echo '
							</div>';
		}
		else
		{
			echo '
							', template_control_richedit($context['post_box_name'], 'smileyBox_message', 'bbcBox_message');

			// Show our submit buttons before any more options
			echo '
							<div id="post_confirm_buttons" class="submitbutton">
								', template_control_richedit_buttons($context['post_box_name']), '
							</div>';
		}

		// Show the draft last saved on area
		if (!empty($context['drafts_autosave']) && !empty($options['drafts_autosave_enabled']))]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		</script>';

	// Spell check for quick modify and quick reply (w/o the editor)
	if ($context['show_spellchecking'])
		echo '
			<form name="spell_form" id="spell_form" method="post" accept-charset="UTF-8" target="spellWindow" action="', $scripturl, '?action=spellcheck">
				<input type="hidden" id="spellstring" name="spellstring" value="" />]]></search>
			<add><![CDATA[		</script>';

	// Spell check for quick modify and quick reply (w/o the editor)
	if ($context['show_spellchecking'] && empty($options['use_editor_quick_reply']))
		echo '
			<form name="spell_form" id="spell_form" method="post" accept-charset="UTF-8" target="spellWindow" action="', $scripturl, '?action=spellcheck">
				<input type="hidden" id="spellstring" name="spellstring" value="" />]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for GenericControls.template.php -->		
	<file name="THEMEDIR/GenericControls.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			var $editor_data = {},
				$editor_container = {};

			function elk_editor() {',
				!empty($context['bbcodes_handlers']) ? $context['bbcodes_handlers'] : '', '
				$("#', $editor_id, '").sceditor({
					style: "', $settings['theme_url'], '/css/', $context['theme_variant_url'], 'jquery.sceditor.elk_wiz', $context['theme_variant'], '.css', CACHE_STALE, '",
					width: "100%",]]></search>
			<add><![CDATA[			var $editor_data = {},
				$editor_container = {};

			function elk_editor() {
				$("#', $editor_id, '").sceditor({
					style: "', $settings['theme_url'], '/css/', $context['theme_variant_url'], 'jquery.sceditor.elk_wiz', $context['theme_variant'], '.css', CACHE_STALE, '",
					width: "100%",]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				foreach ($smileyRow['smileys'] as $smiley)
				{
					echo '
							', JavaScriptEscape($smiley['code']), ': {url: ', JavaScriptEscape($settings['smileys_url'] . '/' . $smiley['filename']), ', tooltip: ', JavaScriptEscape($smiley['description']), '}', empty($smiley['isLast']) ? ',' : '';
				}

				if (empty($smileyRow['isLast']) && $numRows !== 1)]]></search>
			<add><![CDATA[				foreach ($smileyRow['smileys'] as $smiley)
				{
					echo '
							', JavaScriptEscape($smiley['code']), ': {url: ', JavaScriptEscape(rtrim($settings['smileys_url'], '/\\') . '/' . $smiley['filename']), ', tooltip: ', JavaScriptEscape($smiley['description']), '}', empty($smiley['isLast']) ? ',' : '';
				}

				if (empty($smileyRow['isLast']) && $numRows !== 1)]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for GenericMessages.template.php -->		
	<file name="THEMEDIR/GenericMessages.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[									<li class="listlevel2 karma">' . $modSettings['karmaLabel'] . ' +' . $message['member']['karma']['good'] . '/-' . $message['member']['karma']['bad'] . '</li>';

		// Is this user allowed to modify this member's karma?
		if ($message['member']['karma']['allow'])
			$poster_div .= '
									<li class="listlevel2 karma_allow">
										<a class="linklevel2" href="' . $message['member']['karma']['applaud_url'] . '">' . $modSettings['karmaApplaudLabel'] . '</a>' .]]></search>
			<add><![CDATA[									<li class="listlevel2 karma">' . $modSettings['karmaLabel'] . ' +' . $message['member']['karma']['good'] . '/-' . $message['member']['karma']['bad'] . '</li>';

		// Is this user allowed to modify this member's karma?
		if (!empty($message['member']['karma']['allow']))
			$poster_div .= '
									<li class="listlevel2 karma_allow">
										<a class="linklevel2" href="' . $message['member']['karma']['applaud_url'] . '">' . $modSettings['karmaApplaudLabel'] . '</a>' .]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// Don't show an icon if they haven't specified a website.
			if ($message['member']['website']['url'] != '' && !isset($context['disabled_fields']['website']))
				$poster_div .= '
											<li class="cf_icon"><a href="' . $message['member']['website']['url'] . '" title="' . $message['member']['website']['title'] . '" target="_blank" class="new_win">' . ($settings['use_image_buttons'] ? '<i class="icon i-website" title="' . $message['member']['website']['title'] . '"></i>' : $txt['www']) . '</a></li>';

			// Don't show the email address if they want it hidden.
			if ($context['can_send_email'])]]></search>
			<add><![CDATA[			// Don't show an icon if they haven't specified a website.
			if ($message['member']['website']['url'] != '' && !isset($context['disabled_fields']['website']))
				$poster_div .= '
											<li class="cf_icon"><a href="' . $message['member']['website']['url'] . '" title="' . $message['member']['website']['title'] . '" target="_blank" rel="noopener noreferrer" class="new_win">' . ($settings['use_image_buttons'] ? '<i class="icon i-website" title="' . $message['member']['website']['title'] . '"></i>' : $txt['www']) . '</a></li>';

			// Don't show the email address if they want it hidden.
			if ($context['can_send_email'])]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Maillist.template.php -->		
	<file name="THEMEDIR/Maillist.template.php">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	echo '
		<h2 class="category_header">', $txt['show_notice'], '</h2>
		<h2 class="category_header">', $context['notice_subject'], '</h2>
		<h2 class="category_header">', $context['notice_from'], '</h2>
		<h2 class="category_header">', $context['to'], '</h2>
		<div class="warningbox">', $txt['email_failure'], ': ', $context['error_code'], '</div>
		<div class="content">
			<dl>
				<dt>]]></search>
			<add><![CDATA[
	echo '
		<h2 class="category_header">', $txt['show_notice'], '</h2>
		<div class="content">
			<ul>
				<li><strong>' . $txt['subject'] . ': </strong>', $context['notice_subject'], '</li>
				<li><strong>' . $txt['from'] . ': </strong>', $context['notice_from'], '</li>
				<li><strong>' . $txt['to'] . ': </strong>', $context['to'], '</li>
			</ul>
			<p class="warningbox">', $txt['email_failure'], ': ', $context['error_code'], '</p>
		</div>
		<div class="content">
			<dl>
				<dt>]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageMembergroups.template.php -->		
	<file name="THEMEDIR/ManageMembergroups.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					<dd>
						<fieldset id="group_type">
							<legend>', $txt['membergroups_edit_select_group_type'], '</legend>
							<input type="radio" name="group_type" id="group_type_private" value="0" checked="checked" onclick="swapPostGroup(0);" />
							<label for="group_type_private">', $txt['membergroups_group_type_private'], '</label><br />';
]]></search>
			<add><![CDATA[					<dd>
						<fieldset id="group_type">
							<legend>', $txt['membergroups_edit_select_group_type'], '</legend>
							<br />
							<input type="radio" name="group_type" id="group_type_private" value="0" checked="checked" onclick="swapPostGroup(0);" />
							<label for="group_type_private">', $txt['membergroups_group_type_private'], '</label><br />';
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					<dd>
						<fieldset id="group_type">
							<legend>', $txt['membergroups_edit_select_group_type'], '</legend>
							<input type="radio" name="group_type" id="group_type_private" value="0" ', !$context['group']['is_post_group'] && $context['group']['type'] == 0 ? 'checked="checked"' : '', ' onclick="swapPostGroup(0);" />
							<label for="group_type_private">', $txt['membergroups_group_type_private'], '</label><br />';
]]></search>
			<add><![CDATA[					<dd>
						<fieldset id="group_type">
							<legend>', $txt['membergroups_edit_select_group_type'], '</legend>
							<br />
							<input type="radio" name="group_type" id="group_type_private" value="0" ', !$context['group']['is_post_group'] && $context['group']['type'] == 0 ? 'checked="checked"' : '', ' onclick="swapPostGroup(0);" />
							<label for="group_type_private">', $txt['membergroups_group_type_private'], '</label><br />';
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MessageIndex.template.php -->		
	<file name="THEMEDIR/MessageIndex.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	if (!$context['no_topic_listing'])
	{
		// We know how to sprite these
		$message_icon_sprite = array('clip' => '', 'lamp' => '', 'poll' => '', 'question' => '', 'xx' => '', 'moved' => '', 'exclamation' => '', 'thumbup' => '', 'thumbdown' => '');

		// If Quick Moderation is enabled start the form.
		if (!empty($context['can_quick_mod']) && $options['display_quick_mod'] > 0 && !empty($context['topics']))
			echo ']]></search>
			<add><![CDATA[
	if (!$context['no_topic_listing'])
	{
		// If Quick Moderation is enabled start the form.
		if (!empty($context['can_quick_mod']) && $options['display_quick_mod'] > 0 && !empty($context['topics']))
			echo ']]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			echo '
			<li class="', $color_class, '">
				<div class="topic_info">
					<p class="topic_icons', isset($message_icon_sprite[$topic['first_post']['icon']]) ? ' topicicon i-' . $topic['first_post']['icon'] : '', '">';

			if (!isset($message_icon_sprite[$topic['first_post']['icon']]))
				echo '
						<img src="', $topic['first_post']['icon_url'], '" alt="" />';
]]></search>
			<add><![CDATA[			echo '
			<li class="', $color_class, '">
				<div class="topic_info">
					<p class="topic_icons', empty($modSettings['messageIcons_enable']) ? ' topicicon i-' . $topic['first_post']['icon'] : '', '">';

			if (!empty($modSettings['messageIcons_enable']))
				echo '
						<img src="', $topic['first_post']['icon_url'], '" alt="" />';
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Notify.template.php -->		
	<file name="THEMEDIR/Notify.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				<strong><a href="', $scripturl, '?action=notifyboard;sa=', $context['notification_set'] ? 'off' : 'on', ';board=', $context['current_board'], '.', $context['start'], ';', $context['session_var'], '=', $context['session_id'], '">', $txt['yes'], '</a> - <a href="', $context['board_href'], '">', $txt['no'], '</a></strong>
			</p>
		</div>';
}]]></search>
			<add><![CDATA[				<strong><a href="', $scripturl, '?action=notifyboard;sa=', $context['notification_set'] ? 'off' : 'on', ';board=', $context['current_board'], '.', $context['start'], ';', $context['session_var'], '=', $context['session_id'], '">', $txt['yes'], '</a> - <a href="', $context['board_href'], '">', $txt['no'], '</a></strong>
			</p>
		</div>';
}

/**
 * Something to show confirmation when they have unsubscribed from mention/topic/board/etc
 */
function template_notify_unsubscribe()
{
	global $context, $txt;

	echo '
		<h2 class="category_header hdicon cat_img_mail">
			', $txt['unnotify'], '
		</h2>
		<div class="well centertext">
			<p>', $context['unsubscribe_message'], '</p>
		</div>';
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Post.template.php -->		
	<file name="THEMEDIR/Post.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.6
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				var inlineAttach = ElkInlineAttachments(\'#postAttachment2,#postAttachment\', \'' . $context['post_box_name'] . '\', {
					trigger: $(\'<div class="share icon i-share" />\'),
					template: ' . JavaScriptEscape('<div class="insertoverlay">
						<input type="button" class="button" value="insert">
						<ul data-group="tabs" class="tabs">
							<li data-tab="size">' . $txt['ila_opt_size'] . '</li><li data-tab="align">' . $txt['ila_opt_align'] . '</li>
						</ul>]]></search>
			<add><![CDATA[				var inlineAttach = ElkInlineAttachments(\'#postAttachment2,#postAttachment\', \'' . $context['post_box_name'] . '\', {
					trigger: $(\'<div class="share icon i-share" />\'),
					template: ' . JavaScriptEscape('<div class="insertoverlay">
						<input type="button" class="button" value="' . $txt['insert'] . '">
						<ul data-group="tabs" class="tabs">
							<li data-tab="size">' . $txt['ila_opt_size'] . '</li><li data-tab="align">' . $txt['ila_opt_align'] . '</li>
						</ul>]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ProfileInfo.template.php -->		
	<file name="THEMEDIR/ProfileInfo.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[						<i class="icon i-website" title="', $txt['website'], '"></i>
					</dt>
					<dd>
						<a href="', $context['member']['website']['url'], '" target="_blank" class="new_win">', $context['member']['website']['title'] == '' ? $context['member']['website']['url'] : $context['member']['website']['title'], '</a>
					</dd>';
	}
]]></search>
			<add><![CDATA[						<i class="icon i-website" title="', $txt['website'], '"></i>
					</dt>
					<dd>
						<a href="', $context['member']['website']['url'], '" target="_blank" rel="noopener noreferrer" class="new_win">', $context['member']['website']['title'] == '' ? $context['member']['website']['url'] : $context['member']['website']['title'], '</a>
					</dd>';
	}
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Recent.template.php -->		
	<file name="THEMEDIR/Recent.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ */
function template_unread()
{
	global $context, $txt, $scripturl;

	$message_icon_sprite = array('clip' => '', 'lamp' => '', 'poll' => '', 'question' => '', 'xx' => '', 'moved' => '', 'exclamation' => '', 'thumbup' => '', 'thumbdown' => '');

	if (!empty($context['topics']))
	{]]></search>
			<add><![CDATA[ */
function template_unread()
{
	global $context, $txt, $scripturl, $modSettings;

	if (!empty($context['topics']))
	{]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			echo '
							<li class="', $color_class, '">
								<div class="topic_info">
									<p class="topic_icons', isset($message_icon_sprite[$topic['first_post']['icon']]) ? ' topicicon i-' . $topic['first_post']['icon'] : '', '">';

			if (!isset($message_icon_sprite[$topic['first_post']['icon']]))
				echo '
										<img src="', $topic['first_post']['icon_url'], '" alt="" />';
]]></search>
			<add><![CDATA[			echo '
							<li class="', $color_class, '">
								<div class="topic_info">
									<p class="topic_icons', empty($modSettings['messageIcons_enable']) ? ' topicicon i-' . $topic['first_post']['icon'] : '', '">';

			if (!empty($modSettings['messageIcons_enable']))
				echo '
										<img src="', $topic['first_post']['icon_url'], '" alt="" />';
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Xml.template.php -->		
	<file name="THEMEDIR/Xml.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		<generator uri="http://www.elkarte.net" version="', strtr(FORUM_VERSION, array('ElkArte' => '')), '">ElkArte</generator>
		<author>
			<name>', strip_tags(un_htmlspecialchars($context['forum_name'])), '</name>
		</author>';]]></search>
			<add><![CDATA[		<generator uri="https://www.elkarte.net" version="', strtr(FORUM_VERSION, array('ElkArte' => '')), '">ElkArte</generator>
		<author>
			<name>', strip_tags(un_htmlspecialchars($context['forum_name'])), '</name>
		</author>';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for index_light.css -->		
	<file name="THEMEDIR/css/_light/index_light.css">
		<operation>
			<search position="replace"><![CDATA[	#main_menu .linklevel1 .icon-menu:hover {
		background: #F4F4F4;
	}
}

/* This one does up to 540 screens. */]]></search>
			<add><![CDATA[	#main_menu .linklevel1 .icon-menu:hover {
		background: #F4F4F4;
	}

	.statusbar .insertoverlay .button {
		border-radius: 4px;
	}
}

/* This one does up to 540 screens. */]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for icons_svg.css -->		
	<file name="THEMEDIR/css/icons_svg.css">
		<operation>
			<search position="replace"><![CDATA[
.i-instagram::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23000000' viewBox='0 0 32 32'%3E%3Cpath d='M16 2.881c4.275 0 4.781 0.019 6.462 0.094 1.563 0.069 2.406 0.331 2.969 0.55 0.744 0.288 1.281 0.638 1.837 1.194 0.563 0.563 0.906 1.094 1.2 1.838 0.219 0.563 0.481 1.412 0.55 2.969 0.075 1.688 0.094 2.194 0.094 6.463s-0.019 4.781-0.094 6.463c-0.069 1.563-0.331 2.406-0.55 2.969-0.288 0.744-0.637 1.281-1.194 1.837-0.563 0.563-1.094 0.906-1.837 1.2-0.563 0.219-1.413 0.481-2.969 0.55-1.688 0.075-2.194 0.094-6.463 0.094s-4.781-0.019-6.463-0.094c-1.563-0.069-2.406-0.331-2.969-0.55-0.744-0.288-1.281-0.637-1.838-1.194-0.563-0.563-0.906-1.094-1.2-1.837-0.219-0.563-0.481-1.413-0.55-2.969-0.075-1.688-0.094-2.194-0.094-6.463s0.019-4.781 0.094-6.463c0.069-1.563 0.331-2.406 0.55-2.969 0.288-0.744 0.638-1.281 1.194-1.838 0.563-0.563 1.094-0.906 1.838-1.2 0.563-0.219 1.412-0.481 2.969-0.55 1.681-0.075 2.188-0.094 6.463-0.094zM16 0c-4.344 0-4.887 0.019-6.594 0.094-1.7 0.075-2.869 0.35-3.881 0.744-1.056 0.412-1.95 0.956-2.837 1.85-0.894 0.888-1.438 1.781-1.85 2.831-0.394 1.019-0.669 2.181-0.744 3.881-0.075 1.713-0.094 2.256-0.094 6.6s0.019 4.887 0.094 6.594c0.075 1.7 0.35 2.869 0.744 3.881 0.413 1.056 0.956 1.95 1.85 2.837 0.887 0.887 1.781 1.438 2.831 1.844 1.019 0.394 2.181 0.669 3.881 0.744 1.706 0.075 2.25 0.094 6.594 0.094s4.888-0.019 6.594-0.094c1.7-0.075 2.869-0.35 3.881-0.744 1.050-0.406 1.944-0.956 2.831-1.844s1.438-1.781 1.844-2.831c0.394-1.019 0.669-2.181 0.744-3.881 0.075-1.706 0.094-2.25 0.094-6.594s-0.019-4.887-0.094-6.594c-0.075-1.7-0.35-2.869-0.744-3.881-0.394-1.063-0.938-1.956-1.831-2.844-0.887-0.887-1.781-1.438-2.831-1.844-1.019-0.394-2.181-0.669-3.881-0.744-1.712-0.081-2.256-0.1-6.6-0.1v0z' /%3E%3Cpath d='M16 7.781c-4.537 0-8.219 3.681-8.219 8.219s3.681 8.219 8.219 8.219 8.219-3.681 8.219-8.219c0-4.537-3.681-8.219-8.219-8.219zM16 21.331c-2.944 0-5.331-2.387-5.331-5.331s2.387-5.331 5.331-5.331c2.944 0 5.331 2.387 5.331 5.331s-2.387 5.331-5.331 5.331z' /%3E%3Cpath d='M26.462 7.456c0 1.060-0.859 1.919-1.919 1.919s-1.919-0.859-1.919-1.919c0-1.060 0.859-1.919 1.919-1.919s1.919 0.859 1.919 1.919z'/%3E%3C/svg%3E");
}]]></search>
			<add><![CDATA[
.i-instagram::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23000000' viewBox='0 0 32 32'%3E%3Cpath d='M16 2.881c4.275 0 4.781 0.019 6.462 0.094 1.563 0.069 2.406 0.331 2.969 0.55 0.744 0.288 1.281 0.638 1.837 1.194 0.563 0.563 0.906 1.094 1.2 1.838 0.219 0.563 0.481 1.412 0.55 2.969 0.075 1.688 0.094 2.194 0.094 6.463s-0.019 4.781-0.094 6.463c-0.069 1.563-0.331 2.406-0.55 2.969-0.288 0.744-0.637 1.281-1.194 1.837-0.563 0.563-1.094 0.906-1.837 1.2-0.563 0.219-1.413 0.481-2.969 0.55-1.688 0.075-2.194 0.094-6.463 0.094s-4.781-0.019-6.463-0.094c-1.563-0.069-2.406-0.331-2.969-0.55-0.744-0.288-1.281-0.637-1.838-1.194-0.563-0.563-0.906-1.094-1.2-1.837-0.219-0.563-0.481-1.413-0.55-2.969-0.075-1.688-0.094-2.194-0.094-6.463s0.019-4.781 0.094-6.463c0.069-1.563 0.331-2.406 0.55-2.969 0.288-0.744 0.638-1.281 1.194-1.838 0.563-0.563 1.094-0.906 1.838-1.2 0.563-0.219 1.412-0.481 2.969-0.55 1.681-0.075 2.188-0.094 6.463-0.094zM16 0c-4.344 0-4.887 0.019-6.594 0.094-1.7 0.075-2.869 0.35-3.881 0.744-1.056 0.412-1.95 0.956-2.837 1.85-0.894 0.888-1.438 1.781-1.85 2.831-0.394 1.019-0.669 2.181-0.744 3.881-0.075 1.713-0.094 2.256-0.094 6.6s0.019 4.887 0.094 6.594c0.075 1.7 0.35 2.869 0.744 3.881 0.413 1.056 0.956 1.95 1.85 2.837 0.887 0.887 1.781 1.438 2.831 1.844 1.019 0.394 2.181 0.669 3.881 0.744 1.706 0.075 2.25 0.094 6.594 0.094s4.888-0.019 6.594-0.094c1.7-0.075 2.869-0.35 3.881-0.744 1.050-0.406 1.944-0.956 2.831-1.844s1.438-1.781 1.844-2.831c0.394-1.019 0.669-2.181 0.744-3.881 0.075-1.706 0.094-2.25 0.094-6.594s-0.019-4.887-0.094-6.594c-0.075-1.7-0.35-2.869-0.744-3.881-0.394-1.063-0.938-1.956-1.831-2.844-0.887-0.887-1.781-1.438-2.831-1.844-1.019-0.394-2.181-0.669-3.881-0.744-1.712-0.081-2.256-0.1-6.6-0.1v0z' /%3E%3Cpath d='M16 7.781c-4.537 0-8.219 3.681-8.219 8.219s3.681 8.219 8.219 8.219 8.219-3.681 8.219-8.219c0-4.537-3.681-8.219-8.219-8.219zM16 21.331c-2.944 0-5.331-2.387-5.331-5.331s2.387-5.331 5.331-5.331c2.944 0 5.331 2.387 5.331 5.331s-2.387 5.331-5.331 5.331z' /%3E%3Cpath d='M26.462 7.456c0 1.060-0.859 1.919-1.919 1.919s-1.919-0.859-1.919-1.919c0-1.060 0.859-1.919 1.919-1.919s1.919 0.859 1.919 1.919z'/%3E%3C/svg%3E");
}

/* A few smiles */
.i-angry::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23E2B70F' viewBox='0 0 32 32'%3E%3Cpath d='M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3zm6.003 21.398C20.779 22.362 18.549 21 16 21s-4.779 1.362-6.003 3.398l-2.573-1.544c1.749-2.908 4.935-4.855 8.576-4.855s6.827 1.946 8.576 4.855l-2.573 1.544zm1.967-15.64a1 1 0 01-.728 1.213 9.195 9.195 0 00-1.779.667 2 2 0 11-3.46 1.254c.064-1.483 1.413-2.467 2.55-3.036 1.086-.543 2.159-.814 2.205-.826a1 1 0 011.213.728zm-15.94 0a1 1 0 011.213-.728c.045.011 1.119.283 2.205.826 1.137.569 2.486 1.553 2.55 3.036a2 2 0 11-3.46-1.254 9.195 9.195 0 00-1.779-.667 1.001 1.001 0 01-.728-1.213z'/%3E%3C/svg%3E");
}

.i-wink::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23E2B70F' viewBox='0 0 32 32'%3E%3Cpath d='M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3zm.961 19.22c4.383-.866 7.785-2.861 9.014-5.519C25.298 21.95 20.928 26 15.636 26c-3.726 0-6.996-2.009-8.84-5.03 2.2 1.721 6.079 2.056 10.165 1.249zM20 11c0-1.657.895-3 2-3s2 1.343 2 3-.895 3-2 3-2-1.343-2-3zm-9 .609c-1.306 0-2.417.489-2.829 1.172C8.06 12.598 8 11.776 8 11.57c0-.971 1.343-1.758 3-1.758s3 .787 3 1.758c0 .206-.061 1.028-.171 1.211-.412-.683-1.522-1.172-2.829-1.172z'/%3E%3C/svg%3E");
}

.i-smiley::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23E2B70F' viewBox='0 0 32 32'%3E%3Cpath d='M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3zm-8 7a2 2 0 113.999-.001A2 2 0 018 10zm12 0a2 2 0 113.999-.001A2 2 0 0120 10zm2.003 9.602l2.573 1.544c-1.749 2.908-4.935 4.855-8.576 4.855s-6.827-1.946-8.576-4.855l2.573-1.544C11.221 21.638 13.451 23 16 23s4.779-1.362 6.003-3.398z'/%3E%3C/svg%3E");
}

.i-grin::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23E2B70F' viewBox='0 0 32 32'%3E%3Cpath d='M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3zM6 16v2c0 4.4 3.6 8 8 8h4c4.4 0 8-3.6 8-8v-2H6zm6 7.656a6.033 6.033 0 01-2.236-1.42A5.955 5.955 0 018 18h4v5.656zM18 24h-4v-6h4v6zm4.236-1.764A6.008 6.008 0 0120 23.656V18h4a5.96 5.96 0 01-1.764 4.236zM7.042 12c.305 0 .566-.22.616-.522C7.85 10.332 8.835 9.5 9.999 9.5s2.149.832 2.341 1.978a.625.625 0 001.232.001A3.629 3.629 0 009.998 7.25a3.629 3.629 0 00-3.574 4.229.625.625 0 00.616.521zm12 0c.305 0 .566-.22.616-.522.192-1.146 1.177-1.978 2.341-1.978s2.149.832 2.341 1.978a.625.625 0 001.232.001 3.629 3.629 0 00-3.574-4.229 3.629 3.629 0 00-3.574 4.229.625.625 0 00.617.521z'/%3E%3C/svg%3E");
}
/* FBD558 */
.i-cheesy::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23E2B70F' viewBox='0 0 32 32'%3E%3Cpath d='M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3zm0 15.711c3.623 0 7.07-.963 10-2.654-.455 5.576-4.785 9.942-10 9.942s-9.544-4.371-10-9.947a20.027 20.027 0 0010 2.658zM8 11c0-1.657.895-3 2-3s2 1.343 2 3-.895 3-2 3-2-1.343-2-3zm12 0c0-1.657.895-3 2-3s2 1.343 2 3-.895 3-2 3-2-1.343-2-3z'/%3E%3C/svg%3E");
}

.i-sad::before {
	content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23E2B70F' viewBox='0 0 32 32'%3E%3Cpath d='M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3zm-8 7a2 2 0 113.999-.001A2 2 0 018 10zm12 0a2 2 0 113.999-.001A2 2 0 0120 10zM9.997 24.398l-2.573-1.544c1.749-2.908 4.935-4.855 8.576-4.855s6.827 1.946 8.576 4.855l-2.573 1.544C20.779 22.362 18.549 21 16 21s-4.779 1.362-6.003 3.398z'/%3E%3C/svg%3E");
}]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for index.css -->		
	<file name="THEMEDIR/css/index.css">
		<operation>
			<search position="replace"><![CDATA[#quick_edit_body_container .editor {
	width: 100%;
	margin-bottom: 10px;
}
#quick_edit_body_container .input_text {
	width: 85%;]]></search>
			<add><![CDATA[#quick_edit_body_container .editor {
	width: 100%;
	margin-bottom: 10px;
	padding: 2px;
	box-sizing: border-box
}
#quick_edit_body_container .input_text {
	width: 85%;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
#postmodify #message {
	width: 100%;
}

#postmodify .lastedit {]]></search>
			<add><![CDATA[
#postmodify #message {
	width: 100%;
	padding: 2px;
	box-sizing: border-box;
}

#postmodify .lastedit {]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[}

.search_results_posts .topic_moderation {
	padding: 1.3em 1em 0 0;
	width: 2em;
	vertical-align: top;
}
]]></search>
			<add><![CDATA[}

.search_results_posts .topic_moderation {
	padding: 1.0em 1.0em 0 0;
	width: 4em;
	vertical-align: top;
}
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		margin: 1em auto;
		display: block;
	}

	/*.listlevel1#button_profile .linklevel1 {
		min-width: 0.5em;]]></search>
			<add><![CDATA[		margin: 1em auto;
		display: block;
	}
	.statusbar .insertoverlay .button {
		left: 0;
		top: -3em;
		border-radius: 4px;
	}

	/*.listlevel1#button_profile .linklevel1 {
		min-width: 0.5em;]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for index.template.php -->		
	<file name="THEMEDIR/index.template.php">
		<operation>
			<search position="replace"><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.4
 *
 */
]]></search>
			<add><![CDATA[ * copyright:	2011 Simple Machines (http://www.simplemachines.org)
 * license:  	BSD, See included LICENSE.TXT for terms and conditions.
 *
 * @version 1.1.7
 *
 */
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// How do we get anchors only, where they will work? Spans and strong only where necessary?
		'page_index_template' => array(
			'base_link' => '<li class="linavPages"><a class="navPages" href="{base_link}" role="menuitem">%2$s</a></li>',
			'previous_page' => '<span class="previous_page" role="menuitem">{prev_txt}</span>',
			'current_page' => '<li class="linavPages"><strong class="current_page" role="menuitem">%1$s</strong></li>',
			'next_page' => '<span class="next_page" role="menuitem">{next_txt}</span>',
			'expand_pages' => '<li class="linavPages expand_pages" role="menuitem" {custom}> <a href="#">...</a> </li>',
			'all' => '<span class="linavPages all_pages" role="menuitem">{all_txt}</span>',
		),

		// @todo find a better place if we are going to create a notifications template]]></search>
			<add><![CDATA[		// How do we get anchors only, where they will work? Spans and strong only where necessary?
		'page_index_template' => array(
			'base_link' => '<li class="linavPages"><a class="navPages" href="{base_link}" role="menuitem">%2$s</a></li>',
			'previous_page' => '<span class="previous_page">{prev_txt}</span>',
			'current_page' => '<li class="linavPages"><strong class="current_page" role="menuitem">%1$s</strong></li>',
			'next_page' => '<span class="next_page">{next_txt}</span>',
			'expand_pages' => '<li class="linavPages expand_pages" role="menuitem" {custom}> <a href="#">...</a> </li>',
			'all' => '<span class="linavPages all_pages">{all_txt}</span>',
		),

		// @todo find a better place if we are going to create a notifications template]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Admin.english.php -->		
	<file name="LANGUAGEDIR/english/Admin.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['remove_groups'] = 'Remove all groups';

$txt['admin_repair'] = 'Repair All boards and topics';
$txt['admin_main_welcome'] = 'This is your &quot;%1$s&quot;.  From here, you can edit settings, maintain your forum, view logs, install packages, manage themes, and many other things.<br /><br />If you have any trouble, please look at the &quot;Support &amp; Credits&quot; page.  If the information there doesn\'t help you, feel free to <a href="http://www.elkarte.net/index.php" target="_blank" class="new_win">look to us for help</a> with the problem.<br />You may also find answers to your questions or problems by clicking the <i class="helpicon i-help"><s>Help</s></i> symbols for more information on the related functions.';
$txt['admin_news_desc'] = 'Please place one news item per box. BBC tags, such as <span>[b]</span>, <span>[i]</span> and <span>[u]</span> are allowed in your news, as well as smileys. Clear a news item\'s text box to remove it.';
$txt['administrators'] = 'Forum Administrators';
$txt['admin_reserved_desc'] = 'Reserved names will keep members from registering certain user names or using these words in their displayed names. Choose the options you wish to use from the bottom before submitting.';]]></search>
			<add><![CDATA[$txt['remove_groups'] = 'Remove all groups';

$txt['admin_repair'] = 'Repair All boards and topics';
$txt['admin_main_welcome'] = 'This is your &quot;%1$s&quot;.  From here, you can edit settings, maintain your forum, view logs, install packages, manage themes, and many other things.<br /><br />If you have any trouble, please look at the &quot;Support &amp; Credits&quot; page.  If the information there doesn\'t help you, feel free to <a href="https://www.elkarte.net/index.php" target="_blank" class="new_win">look to us for help</a> with the problem.<br />You may also find answers to your questions or problems by clicking the <i class="helpicon i-help"><s>Help</s></i> symbols for more information on the related functions.';
$txt['admin_news_desc'] = 'Please place one news item per box. BBC tags, such as <span>[b]</span>, <span>[i]</span> and <span>[u]</span> are allowed in your news, as well as smileys. Clear a news item\'s text box to remove it.';
$txt['administrators'] = 'Forum Administrators';
$txt['admin_reserved_desc'] = 'Reserved names will keep members from registering certain user names or using these words in their displayed names. Choose the options you wish to use from the bottom before submitting.';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for EmailTemplates.english.php -->		
	<file name="LANGUAGEDIR/english/EmailTemplates.english.php">
		<operation>
			<search position="replace"><![CDATA[// Since all of these strings are being used in emails, numeric entities should be used.

// Do not translate anything that is between {}, they are used as replacement variables and MUST remain exactly how they are.
//   Additionally do not translate the @additioinal_parmas: line or the variable names in the lines that follow it.  You may
//   translate the description of the variable.  Do not translate @description:, however you may translate the rest of that line.

// Do not use block comments in this file, they will have special meaning.]]></search>
			<add><![CDATA[// Since all of these strings are being used in emails, numeric entities should be used.

// Do not translate anything that is between {}, they are used as replacement variables and MUST remain exactly how they are.
//   Additionally do not translate the @additional_params: line or the variable names in the lines that follow it.  You may
//   translate the description of the variable.  Do not translate @description:, however you may translate the rest of that line.

// Do not use block comments in this file, they will have special meaning.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['admin_backup_database_subject'] = 'A database backup has been taken';
$txt['admin_backup_database_body'] = '{REALNAME},

this email is to to inform you that {BAK_REALNAME} has just downloaded a backup of the database at {FORUMNAME}.

{REGARDS}';
]]></search>
			<add><![CDATA[$txt['admin_backup_database_subject'] = 'A database backup has been taken';
$txt['admin_backup_database_body'] = '{REALNAME},

This email is to inform you that {BAK_REALNAME} has just downloaded a backup of the database at {FORUMNAME}.

{REGARDS}';
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['notify_new_buddy_subject'] = '{ACTIONNAME} added you as buddy';
$txt['notify_new_buddy_body'] = '{REALNAME},

this email is to to inform you that {ACTIONNAME} has just has added you as buddy at {FORUMNAME}.

{REGARDS}';
$txt['notify_new_buddy_digest'] = 'You have been added as buddy by:';
$txt['notify_new_buddy_snippet'] = '{ACTIONNAME}';
]]></search>
			<add><![CDATA[$txt['notify_new_buddy_subject'] = '{ACTIONNAME} added you as buddy';
$txt['notify_new_buddy_body'] = '{REALNAME},

We wanted to let you know that {ACTIONNAME} has just added you as a buddy 
at {FORUMNAME}.  

{REGARDS}


You can unsubscribe to further "new buddy" notifications by using this link:
{UNSUBSCRIBELINK}
';
$txt['notify_new_buddy_digest'] = 'You have been added as buddy by:';
$txt['notify_new_buddy_snippet'] = '{ACTIONNAME}';
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	@additional_params: notify_new_likemsg
		ACTIONNAME:  The user name of the member that liked the message.
		MSGLINK:  The url to the message liked.
	@description: A notification email sent to the members whose message has been liked
*/
$txt['notify_new_likemsg_subject'] = 'A message received a like';
$txt['notify_new_likemsg_body'] = '{REALNAME},

this email is to to inform you that {ACTIONNAME} has just has liked the message {MSGLINK} at {FORUMNAME}.

{REGARDS}';
$txt['notify_new_likemsg_digest'] = 'The following messages has been liked:';
$txt['notify_new_likemsg_snippet'] = '{MSGLINK}';
]]></search>
			<add><![CDATA[	@additional_params: notify_new_likemsg
		ACTIONNAME:  The user name of the member that liked the message.
		MSGLINK:  The url to the message liked.
		SUBJECT: The subject of the message
	@description: A notification email sent to the members whose message has been liked
*/
$txt['notify_new_likemsg_subject'] = 'A message received a like';
$txt['notify_new_likemsg_body'] = '{REALNAME},

We wanted to let you know that {ACTIONNAME} has just liked your message 
in the "{SUBJECT}" topic at {FORUMNAME}.  
You can view that message by following this link:
{MSGLINK}

{REGARDS}


You can unsubscribe to further "liked by" notifications by using this link:
{UNSUBSCRIBELINK}
';
$txt['notify_new_likemsg_digest'] = 'The following messages has been liked:';
$txt['notify_new_likemsg_snippet'] = '{MSGLINK}';
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	@additional_params: notify_mentionmem
		ACTIONNAME:  The user name of the member that mentioned someone.
		MSGLINK:  The url to the message where someone has been mentioned.
	@description: A notification email sent to the members mentioned by someone else in a message
*/
$txt['notify_mentionmem_subject'] = 'You have been mentioned';
$txt['notify_mentionmem_body'] = '{REALNAME},

this email is to to inform you that {ACTIONNAME} has just mentioned you in the message {MSGLINK} at {FORUMNAME}.

{REGARDS}';
$txt['notify_mentionmem_digest'] = 'You have been mentioned in the followin messages:';
$txt['notify_mentionmem_snippet'] = '{MSGLINK}';

/**
	@additional_params: notify_quotedmem
		ACTIONNAME:  The user name of the member that quoted someone's message.
		MSGLINK:  The url to the message where someone has been quoted.
	@description: A notification email sent to the members quoted in someone else message
*/
$txt['notify_quotedmem_subject'] = 'A message has been quoted';
$txt['notify_quotedmem_body'] = '{REALNAME},

this email is to to inform you that {ACTIONNAME} has just quoted one of your messages in {MSGLINK} at {FORUMNAME}.

{REGARDS}';
$txt['notify_quotedmem_digest'] = 'Your messages have been quoted in:';
$txt['notify_quotedmem_snippet'] = '{MSGLINK}';
]]></search>
			<add><![CDATA[	@additional_params: notify_mentionmem
		ACTIONNAME:  The user name of the member that mentioned someone.
		MSGLINK:  The url to the message where someone has been mentioned.
        SUBJECT: The subject of the message
	@description: A notification email sent to the members mentioned by someone else in a message
*/
$txt['notify_mentionmem_subject'] = 'You have been mentioned';
$txt['notify_mentionmem_body'] = '{REALNAME},

We wanted to let you know that {ACTIONNAME} has just mentioned you in a message 
in the "{SUBJECT}" topic at {FORUMNAME}.  
You can view that message by following this link:
{MSGLINK}

{REGARDS}


You can unsubscribe to further "mentioned" notifications by using this link:
{UNSUBSCRIBELINK}
';
$txt['notify_mentionmem_digest'] = 'You have been mentioned in the following messages:';
$txt['notify_mentionmem_snippet'] = '{MSGLINK}';

/**
	@additional_params: notify_quotedmem
		ACTIONNAME:  The user name of the member that quoted someone's message.
		MSGLINK:  The url to the message where someone has been quoted.
        SUBJECT: The subject of the message
	@description: A notification email sent to the members quoted in someone else message
*/
$txt['notify_quotedmem_subject'] = 'Your message has been quoted';
$txt['notify_quotedmem_body'] = '{REALNAME},

We wanted to let you know that {ACTIONNAME} at {FORUMNAME} has just quoted
your messages in the "{SUBJECT}" topic.  You can view that message by 
following this link:
{MSGLINK}

{REGARDS}


You can unsubscribe to further "quoted message" notifications by using this link:
{UNSUBSCRIBELINK}
';
$txt['notify_quotedmem_digest'] = 'Your messages have been quoted in:';
$txt['notify_quotedmem_snippet'] = '{MSGLINK}';
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Help.english.php -->		
	<file name="LANGUAGEDIR/english/Help.english.php">
		<operation>
			<search position="replace"><![CDATA[	Topics and Replies: This will do the same as above, and additionally will remove all topic threads started by this member.';

$helptxt['live_news'] = '<strong>Live announcements</strong><br />
	This box shows recently updated announcements from <a href="http://www.elkarte.net/" target="_blank" class="new_win">www.elkarte.net/</a>.
	You should check here every now and then for updates, new releases, and important information from ElkArte.';

$helptxt['registrations'] = '<strong>Registration Management</strong><br />]]></search>
			<add><![CDATA[	Topics and Replies: This will do the same as above, and additionally will remove all topic threads started by this member.';

$helptxt['live_news'] = '<strong>Live announcements</strong><br />
	This box shows recently updated announcements from <a href="https://www.elkarte.net/" target="_blank" class="new_win">www.elkarte.net/</a>.
	You should check here every now and then for updates, new releases, and important information from ElkArte.';

$helptxt['registrations'] = '<strong>Registration Management</strong><br />]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$helptxt['max_image_width'] = 'This allows you to set a maximum size for posted pictures. Pictures smaller than the maximum will not be affected. This also determines how attached images are displayed when a thumbnail is clicked on.';
$helptxt['mail_type'] = 'This setting allows you to choose either PHP\'s default settings, or to override those settings with SMTP.  PHP doesn\'t support using authentication with SMTP (which many hosts require now) so if you want that you should select SMTP.  Please note that SMTP can be slower, and some servers will not take user names and passwords.<br /><br />You don\'t need to fill in the SMTP settings if this is set to PHP\'s default.';
$helptxt['mail_batch_size'] = 'This setting determines how many emails will be sent per page load and can not be set greater than the maximum allowed per minute.<br />Leaving this as 0, the system will automatically determine a batch size to evenly spread the load and fill the quota.<br />If you want to set your own values, setting this to the same value as your limit is a good option for low per minute limits, or 1/6 of the limit for higher per minute limits.';

$helptxt['attachmentEnable'] = 'Enable/Disable the attachment system or disable only new attachments leaving old one available.';
$helptxt['attachmentRecodeLineEndings'] = 'Enabling this will re-code line endings of text based files (txt, css, html, php, xml) based on your server (Windows, Mac or Unix).';]]></search>
			<add><![CDATA[$helptxt['max_image_width'] = 'This allows you to set a maximum size for posted pictures. Pictures smaller than the maximum will not be affected. This also determines how attached images are displayed when a thumbnail is clicked on.';
$helptxt['mail_type'] = 'This setting allows you to choose either PHP\'s default settings, or to override those settings with SMTP.  PHP doesn\'t support using authentication with SMTP (which many hosts require now) so if you want that you should select SMTP.  Please note that SMTP can be slower, and some servers will not take user names and passwords.<br /><br />You don\'t need to fill in the SMTP settings if this is set to PHP\'s default.';
$helptxt['mail_batch_size'] = 'This setting determines how many emails will be sent per page load and can not be set greater than the maximum allowed per minute.<br />Leaving this as 0, the system will automatically determine a batch size to evenly spread the load and fill the quota.<br />If you want to set your own values, setting this to the same value as your limit is a good option for low per minute limits, or 1/6 of the limit for higher per minute limits.';
$helptxt['smtp_client'] = 'Used to identify this client to the SMTP server.<br />The field should contain the fully-qualified domain name (FQDN) of the SMTP client. In situations in which the client system does not have a meaningful domain name you can instead use an address literal formatted as [ipv4] or [IPv6:ipv6 address].<br />If left blank the system will attempt to detect this value for you.';

$helptxt['attachmentEnable'] = 'Enable/Disable the attachment system or disable only new attachments leaving old one available.';
$helptxt['attachmentRecodeLineEndings'] = 'Enabling this will re-code line endings of text based files (txt, css, html, php, xml) based on your server (Windows, Mac or Unix).';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$helptxt['allow_hideOnline'] = 'With this option enabled all members will be able to hide their online status from other users (except administrators). If disabled only users who can moderate the forum can hide their presence. Note that disabling this option will not change any member\'s current status - it just stops them from hiding themselves in the future.';

$helptxt['latest_support'] = 'This panel shows you some of the most common problems and questions on your server configuration. Don\'t worry, this information isn\'t logged or anything.<br /><br />If this stays as &quot;Retrieving support information...&quot;, your computer probably cannot connect to the website.';
$helptxt['latest_packages'] = 'Here you can see some of the most popular and some random packages, with quick and easy installations.<br /><br />If this section doesn\'t show up, your computer probably cannot connect to <a href="http://www.elkarte.net/" target="_blank" class="new_win">www.elkarte.net/</a>.';
$helptxt['latest_themes'] = 'This area shows a few of the latest and most popular themes from <a href="http://www.elkarte.net/" target="_blank" class="new_win">www.elkarte.net/</a>.  It may not show up properly if your computer can\'t find <a href="http://www.elkarte.net/" target="_blank" class="new_win">www.elkarte.net/</a>, though.';

$helptxt['secret_why_blank'] = 'For your security, your password and the answer to your secret question are encrypted so that ElkArte will never tell you, or anyone else, what they are.';
$helptxt['moderator_why_missing'] = 'Since moderation is done on a board-by-board basis, you have to make members moderators from the <a href="%1$s?action=admin;area=manageboards" target="_blank" class="new_win">board management interface</a>.';]]></search>
			<add><![CDATA[$helptxt['allow_hideOnline'] = 'With this option enabled all members will be able to hide their online status from other users (except administrators). If disabled only users who can moderate the forum can hide their presence. Note that disabling this option will not change any member\'s current status - it just stops them from hiding themselves in the future.';

$helptxt['latest_support'] = 'This panel shows you some of the most common problems and questions on your server configuration. Don\'t worry, this information isn\'t logged or anything.<br /><br />If this stays as &quot;Retrieving support information...&quot;, your computer probably cannot connect to the website.';
$helptxt['latest_packages'] = 'Here you can see some of the most popular and some random packages, with quick and easy installations.<br /><br />If this section doesn\'t show up, your computer probably cannot connect to <a href="https://www.elkarte.net/" target="_blank" class="new_win">www.elkarte.net/</a>.';
$helptxt['latest_themes'] = 'This area shows a few of the latest and most popular themes from <a href="https://www.elkarte.net/" target="_blank" class="new_win">www.elkarte.net/</a>.  It may not show up properly if your computer can\'t find <a href="https://www.elkarte.net/" target="_blank" class="new_win">www.elkarte.net/</a>, though.';

$helptxt['secret_why_blank'] = 'For your security, your password and the answer to your secret question are encrypted so that ElkArte will never tell you, or anyone else, what they are.';
$helptxt['moderator_why_missing'] = 'Since moderation is done on a board-by-board basis, you have to make members moderators from the <a href="%1$s?action=admin;area=manageboards" target="_blank" class="new_win">board management interface</a>.';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Install.english.php -->		
	<file name="LANGUAGEDIR/english/Install.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['installer_language'] = 'Language';
$txt['installer_language_set'] = 'Set';
$txt['congratulations'] = 'Congratulations, the installation process is complete!';
$txt['congratulations_help'] = 'If at any time you need support, or the forum fails to work properly, please remember that <a href="http://www.elkarte.net/index.php" target="_blank" class="new_win">help is available</a> if you need it.';
$txt['still_writable'] = 'Your installation directory is still writable.  It\'s a good idea to chmod it so that it is not writable for security reasons.';
$txt['delete_installer'] = 'Click here to try to delete the install directory now.';
$txt['delete_installer_maybe'] = '<em>(doesn\'t work on all servers.)</em>';
$txt['go_to_your_forum'] = 'Now you can see <a href="%1$s">your newly installed forum</a> and begin to use it.  You should first make sure you are logged in, after which you will be able to access the administration center.';
$txt['good_luck'] = 'Thanks for installing ElkArte!';

$txt['install_welcome'] = 'Welcome';
$txt['install_welcome_desc'] = 'Welcome to ElkArte. This script will guide you through the process for installing %1$s. We\'ll gather a few details about your forum over the next few steps, and after a couple of minutes your forum will be ready for use.';]]></search>
			<add><![CDATA[$txt['installer_language'] = 'Language';
$txt['installer_language_set'] = 'Set';
$txt['congratulations'] = 'Congratulations, the installation process is complete!';
$txt['congratulations_help'] = 'If at any time you need support, or the forum fails to work properly, please remember that <a href="https://www.elkarte.net/index.php" target="_blank" class="new_win">help is available</a> if you need it.';
$txt['still_writable'] = 'Your installation directory is still writable.  It\'s a good idea to chmod it so that it is not writable for security reasons.';
$txt['delete_installer'] = 'Click here to try to delete the install directory now.';
$txt['delete_installer_maybe'] = '<em>(doesn\'t work on all servers.)</em>';
$txt['go_to_your_forum'] = 'Now you can see <a href="%1$s">your newly installed forum</a> and begin to use it.  You should first make sure you are logged in, after which you will be able to access the administration center.';
$txt['good_luck'] = 'Thanks for installing ElkArte!';
$txt['try_again'] = 'Click here to try again.';

$txt['install_welcome'] = 'Welcome';
$txt['install_welcome_desc'] = 'Welcome to ElkArte. This script will guide you through the process for installing %1$s. We\'ll gather a few details about your forum over the next few steps, and after a couple of minutes your forum will be ready for use.';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['user_refresh_install_desc'] = 'While installing, the installer found that (with the details you provided) one or more of the tables this installer might create already existed.<br />Any missing tables in your installation have been recreated with the default data, but no data was deleted from existing tables.';

$txt['default_topic_subject'] = 'Welcome to ElkArte!';
$txt['default_topic_message'] = 'Welcome to ElkArte!<br /><br />We hope you enjoy using this software and building your community.&nbsp; If you have any problems, please feel free to [url=http://www.elkarte.net/index.php]ask us for assistance[/url].<br /><br />Thanks!<br />The ElkArte Community.';
$txt['default_board_name'] = 'General Discussion';
$txt['default_board_description'] = 'Feel free to talk about anything and everything in this board.';
$txt['default_category_name'] = 'General Category';]]></search>
			<add><![CDATA[$txt['user_refresh_install_desc'] = 'While installing, the installer found that (with the details you provided) one or more of the tables this installer might create already existed.<br />Any missing tables in your installation have been recreated with the default data, but no data was deleted from existing tables.';

$txt['default_topic_subject'] = 'Welcome to ElkArte!';
$txt['default_topic_message'] = 'Welcome to ElkArte!<br /><br />We hope you enjoy using this software and building your community.&nbsp; If you have any problems, please feel free to [url=https://www.elkarte.net/index.php]ask us for assistance[/url].<br /><br />Thanks!<br />The ElkArte Community.';
$txt['default_board_name'] = 'General Discussion';
$txt['default_board_description'] = 'Feel free to talk about anything and everything in this board.';
$txt['default_category_name'] = 'General Category';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['error_missing_files'] = 'Unable to find crucial installation files in the directory of this script!<br /><br />Please make sure you uploaded the entire installation package, including the sql file, and then try again.';
$txt['error_session_save_path'] = 'Please inform your host that the <strong>session.save_path specified in php.ini</strong> is not valid!  It needs to be changed to a directory that <strong>exists</strong>, and is <strong>writable</strong> by the user PHP is running under.<br />';
$txt['error_windows_chmod'] = 'You\'re on a windows server, and some crucial files are not writable.  Please ask your host to give <strong>write permissions</strong> to the user PHP is running under for the files in your ElkArte installation.  The following files or directories need to be writable:';
$txt['error_ftp_no_connect'] = 'Unable to connect to FTP server with this combination of details.';
$txt['error_db_file'] = 'Cannot find database source script! Please check file %1$s is within your forum source directory.';
$txt['error_db_connect'] = 'Cannot connect to the database server with the supplied data.<br /><br />If you are not sure about what to type in, please contact your host.';]]></search>
			<add><![CDATA[$txt['error_missing_files'] = 'Unable to find crucial installation files in the directory of this script!<br /><br />Please make sure you uploaded the entire installation package, including the sql file, and then try again.';
$txt['error_session_save_path'] = 'Please inform your host that the <strong>session.save_path specified in php.ini</strong> is not valid!  It needs to be changed to a directory that <strong>exists</strong>, and is <strong>writable</strong> by the user PHP is running under.<br />';
$txt['error_windows_chmod'] = 'You\'re on a windows server, and some crucial files are not writable.  Please ask your host to give <strong>write permissions</strong> to the user PHP is running under for the files in your ElkArte installation.  The following files or directories need to be writable:';
$txt['settings_error'] = 'Your settings could not be saved to Settings.php, the file is not writable.';
$txt['error_ftp_no_connect'] = 'Unable to connect to FTP server with this combination of details.';
$txt['error_db_file'] = 'Cannot find database source script! Please check file %1$s is within your forum source directory.';
$txt['error_db_connect'] = 'Cannot connect to the database server with the supplied data.<br /><br />If you are not sure about what to type in, please contact your host.';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['error_subs_missing'] = 'Unable to find the sources/Subs.php file.  Please make sure it was uploaded properly, and then try again.';
$txt['error_db_alter_priv'] = 'The database account you specified does not have permission to ALTER, CREATE, and/or DROP tables in the database; this is necessary for ElkArte to function properly.';
$txt['error_versions_do_not_match'] = 'The installer has detected another version of ElkArte already installed with the specified information.  If you are trying to upgrade, you should use the upgrader, not the installer.<br /><br />Otherwise, you may wish to use different information, or create a backup and then delete the data currently in the database.';
$txt['error_mod_security'] = 'The installer has detected the mod_security module is installed on your web server. Mod_security will block submitted forms even before ElkArte gets a say in anything. ElkArte has a built-in security scanner that will work more effectively than mod_security and that won\'t block submitted forms.<br /><br /><a href="http://www.elkarte.net/redirect/mod_security" target="_blank" class="new_win">More information about disabling mod_security</a>';
$txt['error_mod_security_no_write'] = 'The installer has detected the mod_security module is installed on your web server. Mod_security will block submitted forms even before ElkArte gets a say in anything. ElkArte has a built-in security scanner that will work more effectively than mod_security and that won\'t block submitted forms.<br /><br /><a href="http://www.elkarte.net/redirect/mod_security" target="_blank" class="new_win">More information about disabling mod_security</a><br /><br />Alternatively, you may wish to use your FTP client to chmod .htaccess in the forum directory to be writable (777), and then refresh this page.';
$txt['error_utf8_version'] = 'The current version of your database doesn\'t support the use of the UTF-8 character set. You can not install ElkArte';
$txt['error_valid_email_needed'] = 'You have not entered a valid email address.';
$txt['error_already_installed'] = 'The installer has detected that you already have ElkArte installed. It is strongly advised that you do <strong>not</strong> try to overwrite an existing installation - continuing with installation <strong>may result in the loss or corruption of existing data</strong>.<ul><li>If you have just finished installing your forum, please delete the install directory from your server. {try_delete}</li><li>If you wish to upgrade please use the <a href="./upgrade.php"><strong>upgrade script</strong></a>.</li><li>If you wish to overwrite your existing installation, including all data, it\'s recommended that you delete the existing database tables and replace Settings.php and try again.</li></ul>';]]></search>
			<add><![CDATA[$txt['error_subs_missing'] = 'Unable to find the sources/Subs.php file.  Please make sure it was uploaded properly, and then try again.';
$txt['error_db_alter_priv'] = 'The database account you specified does not have permission to ALTER, CREATE, and/or DROP tables in the database; this is necessary for ElkArte to function properly.';
$txt['error_versions_do_not_match'] = 'The installer has detected another version of ElkArte already installed with the specified information.  If you are trying to upgrade, you should use the upgrader, not the installer.<br /><br />Otherwise, you may wish to use different information, or create a backup and then delete the data currently in the database.';
$txt['error_mod_security'] = 'The installer has detected the mod_security module is installed on your web server. Mod_security will block submitted forms even before ElkArte gets a say in anything. ElkArte has a built-in security scanner that will work more effectively than mod_security and that won\'t block submitted forms.<br /><br /><a href="https://www.elkarte.net/redirect/mod_security" target="_blank" class="new_win">More information about disabling mod_security</a>';
$txt['error_mod_security_no_write'] = 'The installer has detected the mod_security module is installed on your web server. Mod_security will block submitted forms even before ElkArte gets a say in anything. ElkArte has a built-in security scanner that will work more effectively than mod_security and that won\'t block submitted forms.<br /><br /><a href="https://www.elkarte.net/redirect/mod_security" target="_blank" class="new_win">More information about disabling mod_security</a><br /><br />Alternatively, you may wish to use your FTP client to chmod .htaccess in the forum directory to be writable (777), and then refresh this page.';
$txt['error_utf8_version'] = 'The current version of your database doesn\'t support the use of the UTF-8 character set. You can not install ElkArte';
$txt['error_valid_email_needed'] = 'You have not entered a valid email address.';
$txt['error_already_installed'] = 'The installer has detected that you already have ElkArte installed. It is strongly advised that you do <strong>not</strong> try to overwrite an existing installation - continuing with installation <strong>may result in the loss or corruption of existing data</strong>.<ul><li>If you have just finished installing your forum, please delete the install directory from your server. {try_delete}</li><li>If you wish to upgrade please use the <a href="./upgrade.php"><strong>upgrade script</strong></a>.</li><li>If you wish to overwrite your existing installation, including all data, it\'s recommended that you delete the existing database tables and replace Settings.php and try again.</li></ul>';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['error_settings_do_not_exist'] = 'Elkarte is not able to find and create the file/s <strong>%1$s</strong>. Please use ftp to go to the directory of your forum and rename the sample files provided with the installation package as follows before running again this script: <ul>%2$s</ul> If any of the files do not exist, create an empty file with the same name.';
$txt['error_warning_notice'] = 'Warning!';
$txt['error_script_outdated'] = 'This install script is out of date! The current version of ElkArte is %1$s but this install script is for %2$s.<br />
	It is recommended that you visit the <a href="http://www.elkarte.net/" target="_blank" class="new_win">ElkArte</a> website to ensure you are installing the latest version.';
$txt['error_db_filename'] = 'You must enter a name for the database file name for SQLite.';
$txt['error_db_prefix_numeric'] = 'The selected database type does not support the use of numeric prefixes.';
$txt['error_invalid_characters_username'] = 'Invalid character used in user name.';]]></search>
			<add><![CDATA[$txt['error_settings_do_not_exist'] = 'Elkarte is not able to find and create the file/s <strong>%1$s</strong>. Please use ftp to go to the directory of your forum and rename the sample files provided with the installation package as follows before running again this script: <ul>%2$s</ul> If any of the files do not exist, create an empty file with the same name.';
$txt['error_warning_notice'] = 'Warning!';
$txt['error_script_outdated'] = 'This install script is out of date! The current version of ElkArte is %1$s but this install script is for %2$s.<br />
	It is recommended that you visit the <a href="https://www.elkarte.net/" target="_blank" class="new_win">ElkArte</a> website to ensure you are installing the latest version.';
$txt['error_db_filename'] = 'You must enter a name for the database file name for SQLite.';
$txt['error_db_prefix_numeric'] = 'The selected database type does not support the use of numeric prefixes.';
$txt['error_invalid_characters_username'] = 'Invalid character used in user name.';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['upgrade_error_script_js'] = 'The upgrade script cannot find script.js or it is out of date. Make sure your theme paths are correct. You can download a settings check and repair script from <a href="https://github.com/elkarte/tools/downloads" target="_blank" class="new_win">ElkArte tools</a>.';

$txt['upgrade_warning_lots_data'] = 'This upgrade script has detected that your forum contains a lot of data which needs upgrading. This process may take quite some time depending on your server and forum size, and for very large forums (~300,000 messages) may take several hours to complete.';
$txt['upgrade_warning_out_of_date'] = 'This upgrade script is out of date! The current version of ElkArte is <em id="elkVersion">??</em> but this upgrade script is for <em id="installedVersion">%1$s</em>.<br /><br />It is recommended that you visit the <a href="http://www.elkarte.net/" target="_blank" class="new_win">ElkArte Community</a> website to ensure you are upgrading to the latest version.';]]></search>
			<add><![CDATA[$txt['upgrade_error_script_js'] = 'The upgrade script cannot find script.js or it is out of date. Make sure your theme paths are correct. You can download a settings check and repair script from <a href="https://github.com/elkarte/tools/downloads" target="_blank" class="new_win">ElkArte tools</a>.';

$txt['upgrade_warning_lots_data'] = 'This upgrade script has detected that your forum contains a lot of data which needs upgrading. This process may take quite some time depending on your server and forum size, and for very large forums (~300,000 messages) may take several hours to complete.';
$txt['upgrade_warning_out_of_date'] = 'This upgrade script is out of date! The current version of ElkArte is <em id="elkVersion">??</em> but this upgrade script is for <em id="installedVersion">%1$s</em>.<br /><br />It is recommended that you visit the <a href="https://www.elkarte.net/" target="_blank" class="new_win">ElkArte Community</a> website to ensure you are upgrading to the latest version.';
$txt['upgrade_warning_already_done'] = 'You are already running <em>ElkArte %1$s</em> no upgrade is available!  You must <strong>delete</strong> the install directory and then proceed to <a href="%2$s">your forum</a>';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Maillist.english.php -->		
	<file name="LANGUAGEDIR/english/Maillist.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['email_at'] = 'at';

// Our digest strings for the digest "template"
$txt['digest_preview'] = "\n     <*> Topic Preview:\n     ";
$txt['digest_see_full'] = "\n\n     <*> See the full Topic at the following link:\n     <*> ";
$txt['digest_reply_preview'] = "\n     <*> Latest Reply Preview:\n     ";
$txt['digest_unread_reply_link'] = "\n\n     <*> See your unread replies to this topic at the following link:\n     <*> ";
$txt['message_attachments'] = '<*> This message has %d images/files associated with it.
<*> To see them please follow this link: %s';
]]></search>
			<add><![CDATA[$txt['email_at'] = 'at';

// Our digest strings for the digest "template"
$txt['digest_preview'] = "\n     <*> Topic Summary:\n     ";
$txt['digest_see_full'] = "\n\n     <*> See the full Topic at the following link:\n     <*> ";
$txt['digest_reply_preview'] = "\n     <*> Latest Reply:\n     ";
$txt['digest_unread_reply_link'] = "\n\n     <*> See all your unread replies to this topic at the following link:\n     <*> ";
$txt['message_attachments'] = '<*> This message has %d images/files associated with it.
<*> To see them please follow this link: %s';
]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for MaillistTemplates.english.php -->		
	<file name="LANGUAGEDIR/english/MaillistTemplates.english.php">
		<operation>
			<search position="replace"><![CDATA[<*> You can see this message by using this link:
    {TOPICLINK}

<*> Unsubscribe to this by using this link:
    {UNSUBSCRIBELINK}

{EMAILREGARDS}';]]></search>
			<add><![CDATA[<*> You can see this message by using this link:
    {TOPICLINK}

<*> Unsubscribe to this board by using this link:
    {UNSUBSCRIBELINK}

{EMAILREGARDS}';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[<*> You can go to your first unread message by using this link:
    {TOPICLINKNEW}

<*> Unsubscribe to this by using this link:
    {UNSUBSCRIBELINK}

{EMAILREGARDS}';]]></search>
			<add><![CDATA[<*> You can go to your first unread message by using this link:
    {TOPICLINKNEW}

<*> Unsubscribe to this board by using this link:
    {UNSUBSCRIBELINK}

{EMAILREGARDS}';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[<*> You can go to your first unread message by using this link:
    {TOPICLINKNEW}

<*> Unsubscribe to this by using this link:
    {UNSUBSCRIBELINK}

{EMAILREGARDS}';]]></search>
			<add><![CDATA[<*> You can go to your first unread message by using this link:
    {TOPICLINKNEW}

<*> Unsubscribe to this {SUBSCRIPTION} by using this link:
    {UNSUBSCRIBELINK}

{EMAILREGARDS}';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[<*> You can go to your first unread message by using this link:
    {TOPICLINKNEW}

<*> Unsubscribe to this by using this link:
    {UNSUBSCRIBELINK}

{EMAILREGARDS}';]]></search>
			<add><![CDATA[<*> You can go to your first unread message by using this link:
    {TOPICLINKNEW}

<*> Unsubscribe to this {SUBSCRIPTION} by using this link:
    {UNSUBSCRIBELINK}

{EMAILREGARDS}';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageBoards.english.php -->		
	<file name="LANGUAGEDIR/english/ManageBoards.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['mboards_redirect'] = 'Redirect to a web address';
$txt['mboards_redirect_desc'] = 'Enable this option to redirect anyone who clicks on this board to another web address.';
$txt['mboards_redirect_url'] = 'Address to redirect users to';
$txt['mboards_redirect_url_desc'] = 'For example: &quot;http://www.elkarte.net&quot;.';
$txt['mboards_redirect_reset'] = 'Reset redirect count';
$txt['mboards_redirect_reset_desc'] = 'Selecting this will reset the redirection count for this board to zero.';
$txt['mboards_current_redirects'] = 'Currently: %1$s';]]></search>
			<add><![CDATA[$txt['mboards_redirect'] = 'Redirect to a web address';
$txt['mboards_redirect_desc'] = 'Enable this option to redirect anyone who clicks on this board to another web address.';
$txt['mboards_redirect_url'] = 'Address to redirect users to';
$txt['mboards_redirect_url_desc'] = 'For example: &quot;https://www.elkarte.net&quot;.';
$txt['mboards_redirect_reset'] = 'Reset redirect count';
$txt['mboards_redirect_reset_desc'] = 'Selecting this will reset the redirection count for this board to zero.';
$txt['mboards_current_redirects'] = 'Currently: %1$s';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageMail.english.php -->		
	<file name="LANGUAGEDIR/english/ManageMail.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['mail_type'] = 'Mail type';
$txt['mail_type_default'] = '(PHP default)';
$txt['smtp_host'] = 'SMTP server';
$txt['smtp_port'] = 'SMTP port';
$txt['smtp_starttls'] = 'STARTTLS';
$txt['smtp_username'] = 'SMTP username';]]></search>
			<add><![CDATA[$txt['mail_type'] = 'Mail type';
$txt['mail_type_default'] = '(PHP default)';
$txt['smtp_host'] = 'SMTP server';
$txt['smtp_client'] = 'SMTP client';
$txt['smtp_port'] = 'SMTP port';
$txt['smtp_starttls'] = 'STARTTLS';
$txt['smtp_username'] = 'SMTP username';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for ManageThemes.english.php -->		
	<file name="LANGUAGEDIR/english/ManageThemes.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['themeadmin_list_desc'] = 'In the Theme Settings area you can view the list of themes that you have installed, change their directory paths and settings, and uninstall them.';
$txt['themeadmin_reset_desc'] = 'In the Member Options area you have the ability to change theme-specific options that affect all members. You will only see those themes that have their own set of option settings.';
$txt['themeadmin_edit_desc'] = 'In the Modify Themes area you can alter the stylesheet and source code of your installed themes. You will need a basic understanding of CSS and PHP to effectively change a theme and not break your forum at the same time.';
$txt['themeadmin_modify_styles'] = 'Changing a themes style is risky so be certain of what you are doing. Always have a backup copy of the theme directory that you are working in to use to recover from an error with. For help with this before you start, visit the <a href="http://www.elkarte.net/index.php" target="_blank" class="new_win">ElkArte Community</a>.';

$txt['themeadmin_list_heading'] = 'Theme Settings';
$txt['themeadmin_list_tip'] = 'The layout settings may be different for each installed theme. Edit the installed themes to set their individual options, change their directory or URL settings, or to find other options.';]]></search>
			<add><![CDATA[$txt['themeadmin_list_desc'] = 'In the Theme Settings area you can view the list of themes that you have installed, change their directory paths and settings, and uninstall them.';
$txt['themeadmin_reset_desc'] = 'In the Member Options area you have the ability to change theme-specific options that affect all members. You will only see those themes that have their own set of option settings.';
$txt['themeadmin_edit_desc'] = 'In the Modify Themes area you can alter the stylesheet and source code of your installed themes. You will need a basic understanding of CSS and PHP to effectively change a theme and not break your forum at the same time.';
$txt['themeadmin_modify_styles'] = 'Changing a themes style is risky so be certain of what you are doing. Always have a backup copy of the theme directory that you are working in to use to recover from an error with. For help with this before you start, visit the <a href="https://www.elkarte.net/index.php" target="_blank" class="new_win">ElkArte Community</a>.';

$txt['themeadmin_list_heading'] = 'Theme Settings';
$txt['themeadmin_list_tip'] = 'The layout settings may be different for each installed theme. Edit the installed themes to set their individual options, change their directory or URL settings, or to find other options.';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Mentions.english.php -->		
	<file name="LANGUAGEDIR/english/Mentions.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['mentions_markunread'] = 'Mark as unread';

$txt['mentions_settings'] = 'Notifications Settings';
$txt['mentions_settings_desc'] = 'In this area you can configure the methods your member will be able to select in order to receive notifications. The "in forum" notifications method cannod be denied, for any other method you can decide to allow it or not.';
$txt['mentions_enabled'] = 'Enable site notifications';
$txt['mentions_buddy'] = 'Add a mention when a member is added to someone\'s buddy list';
$txt['mentions_dont_notify_rlike'] = 'Don\'t inform the member when a post has a liked removed';]]></search>
			<add><![CDATA[$txt['mentions_markunread'] = 'Mark as unread';

$txt['mentions_settings'] = 'Notifications Settings';
$txt['mentions_settings_desc'] = 'In this area you can configure the methods your members will be able to select in order to receive notifications. The "in forum" notifications method cannot be denied, for any other method you can decide to allow it or not.';
$txt['mentions_enabled'] = 'Enable site notifications';
$txt['mentions_buddy'] = 'Add a mention when a member is added to someone\'s buddy list';
$txt['mentions_dont_notify_rlike'] = 'Don\'t inform the member when a post has a liked removed';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for Post.english.php -->		
	<file name="LANGUAGEDIR/english/Post.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['lock_after_post'] = 'Lock after Post';
$txt['notify_replies'] = 'Notify me of replies.';
$txt['lock_topic'] = 'Lock this topic.';
$txt['shortcuts'] = 'shortcuts: alt+s submit/post or alt+p preview';
$txt['shortcuts_drafts'] = 'shortcuts: alt+s submit/post, alt+p preview or alt+d save draft';
$txt['shortcuts_firefox'] = 'shortcuts: shift+alt+s submit/post or shift+alt+p preview';
$txt['shortcuts_drafts_firefox'] = 'shortcuts: shift+alt+s submit/post, shift+alt+p preview or shift+alt+d save draft';
$txt['option'] = 'Option';
$txt['reset_votes'] = 'Reset vote count';
$txt['reset_votes_check'] = 'Check this if you want to reset all vote counts to 0.';]]></search>
			<add><![CDATA[$txt['lock_after_post'] = 'Lock after Post';
$txt['notify_replies'] = 'Notify me of replies.';
$txt['lock_topic'] = 'Lock this topic.';
$txt['shortcuts'] = 'shortcuts: shift+alt+s submit/post or shift+alt+p preview';
$txt['shortcuts_drafts'] = 'shortcuts: shift+alt+s submit/post, shift+alt+p preview or shift+alt+d save draft';
$txt['option'] = 'Option';
$txt['reset_votes'] = 'Reset vote count';
$txt['reset_votes_check'] = 'Check this if you want to reset all vote counts to 0.';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
$txt['digest_subject_daily'] = 'Daily Digest';
$txt['digest_subject_weekly'] = 'Weekly Digest';
$txt['digest_intro_daily'] = 'Below is a summary of all activity in your subscribed boards and topics at %1$s today. To unsubscribe please visit the link below.';
$txt['digest_intro_weekly'] = 'Below is a summary of all activity in your subscribed boards and topics at %1$s this week. To unsubscribe please visit the link below.';
$txt['digest_new_topics'] = 'The following topics were started';
$txt['digest_new_topics_line'] = '"%1$s" in the %2$s board';
$txt['digest_new_replies'] = 'Replies have been made in the following topics';]]></search>
			<add><![CDATA[
$txt['digest_subject_daily'] = 'Daily Digest';
$txt['digest_subject_weekly'] = 'Weekly Digest';
$txt['digest_intro_daily'] = 'Below is a summary of today\'s activity for your subscriptions at %1$s. To unsubscribe please visit the following link.';
$txt['digest_intro_weekly'] = 'Below is a summary of the weekly activity for your subscriptions at %1$s. To unsubscribe please visit the following link.';
$txt['digest_new_topics'] = 'The following topics were started';
$txt['digest_new_topics_line'] = '"%1$s" in the %2$s board';
$txt['digest_new_replies'] = 'Replies have been made in the following topics';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[// Post settings (when I implement the post interface)
$txt['ila_insert'] = 'Insert Attachment %1$d in the message';
$txt['ila_title'] = 'End-of-post expandable thumbnail ';
$txt['ila_opt_size'] = 'Size';
$txt['ila_opt_align'] = 'Alignment';
$txt['ila_opt_size_thumb'] = 'Thumbnail';]]></search>
			<add><![CDATA[// Post settings (when I implement the post interface)
$txt['ila_insert'] = 'Insert Attachment %1$d in the message';
$txt['ila_title'] = 'End-of-post expandable thumbnail ';
$txt['insert'] = 'Insert';
$txt['ila_opt_size'] = 'Size';
$txt['ila_opt_align'] = 'Alignment';
$txt['ila_opt_size_thumb'] = 'Thumbnail';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for index.english.php -->		
	<file name="LANGUAGEDIR/english/index.english.php">
		<operation>
			<search position="replace"><![CDATA[$txt['go_up'] = 'Go Up';
$txt['go_down'] = 'Go Down';

$forum_copyright = '<a href="http://www.elkarte.net" title="ElkArte Forum" target="_blank" class="new_win">Powered by %1$s</a> | <a href="{credits_url}" title="Credits" target="_blank" class="new_win" rel="nofollow">Credits</a>';

$txt['birthdays'] = 'Birthdays:';
$txt['events'] = 'Events:';]]></search>
			<add><![CDATA[$txt['go_up'] = 'Go Up';
$txt['go_down'] = 'Go Down';

$forum_copyright = '<a href="https://www.elkarte.net" title="ElkArte Forum" target="_blank" class="new_win">Powered by %1$s</a> | <a href="{credits_url}" title="Credits" target="_blank" class="new_win" rel="nofollow">Credits</a>';

$txt['birthdays'] = 'Birthdays:';
$txt['events'] = 'Events:';]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$txt['notifyboard_turnon'] = 'Do you want a notification email when someone posts a new topic in this board?';
$txt['notifyboard_turnoff'] = 'Are you sure you do not want to receive new topic notifications for this board?';

$txt['find_members'] = 'Find Members';
$txt['find_username'] = 'Name, username, or email address';
$txt['find_buddies'] = 'Show Buddies Only?';]]></search>
			<add><![CDATA[$txt['notifyboard_turnon'] = 'Do you want a notification email when someone posts a new topic in this board?';
$txt['notifyboard_turnoff'] = 'Are you sure you do not want to receive new topic notifications for this board?';

$txt['notify_board_unsubscribed'] = 'The email, %2$s, has been successfully unsubscribed and will no longer be sent notifications from the "%1$s" board.';
$txt['notify_topic_unsubscribed'] = 'The email, %2$s, has been successfully unsubscribed and will no longer be sent notifications on the "%1$s" topic.';
$txt['notify_mention_unsubscribed'] = 'The email, %2$s, has been successfully unsubscribed and will no longer be sent "%1$s" notifications.';
$txt['notify_default_unsubscribed'] = 'Your request has been successfully processed.';

$txt['find_members'] = 'Find Members';
$txt['find_username'] = 'Name, username, or email address';
$txt['find_buddies'] = 'Show Buddies Only?';]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for desktop-notify.js -->		
	<file name="THEMEDIR/scripts/desktop-notify.js">
		<operation>
			<search position="replace"><![CDATA[/*! HTML5 Notification - v3.0.0 - 2016-09-19

Copyright 2016 Tsvetan Tsvetkov

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** @namespace window */
/** @namespace window.webkitNotifications */
/** @namespace window.external */
(function() {
    /*
     Safari native methods required for Notifications do NOT run in strict mode.
     */
    //'use strict';
    // local variables
    var PERMISSION_DEFAULT = "default";
    // The user decision is unknown; in this case the application will act as if permission was denied.
    var PERMISSION_GRANTED = "granted";
    // The user has explicitly granted permission for the current origin to display system notifications.
    var PERMISSION_DENIED = "denied";
    // The user has explicitly denied permission for the current origin to display system notifications.
    var PERMISSION_NOTSUPPORTED = "notsupported";
    // The Notification API is not supported on current environment
    // map for the old permission values
    var PERMISSIONS = [ PERMISSION_GRANTED, PERMISSION_DEFAULT, PERMISSION_DENIED, PERMISSION_NOTSUPPORTED ];
    var DIRESCTIONS = [ "auto", "ltr", "rtl" ];
    /*
        IE does not support Notifications in the same meaning as other modern browsers.
        On the other side, IE9+(except MS Edge) implement flashing pinned site taskbar buttons.
        Each time new IE Notification is create, previous flashing and icon overlay is cleared.
        So, we need to keep track of the notification that calls close method.
     */
    var IENotificationIndex = -1;
    var IECloseNotificationEvents = [ "click", "scroll", "focus" ];
    var getIco = function(icon) {
        var lastIndex = icon.lastIndexOf(".");
        return (lastIndex !== -1 ? icon.substr(0, lastIndex) : icon) + ".ico";
    };
    /*
     * Internal Notificaiton constructor. Keeps the original Notification
     * constructor if any or use empty function constructor for browsers
     * that do not support Notifications
     */
    var _Notification = window.Notification || /* Opera Mobile/Android Browser */
    window.webkitNotifications && WebKitNotification || /* IE9+ pinned site */
    "external" in window && "msIsSiteMode" in window.external && window.external.msIsSiteMode() !== undefined && IENotification || /* Notifications Not supported. Return dummy constructor */
    DummyNotification;
    /**
     * @constructor DummyNotification
     */
    function DummyNotification() {
        var dummyElement = document.createElement("div");
        this.addEventListener = function(eventName, callback) {
            dummyElement.addEventListener(eventName, callback.bind(this));
        };
        this.removeEventListener = function(eventName, callback) {
            dummyElement.removeEventListener(eventName, callback.bind(this));
        };
        this.dispatchEvent = function(eventName) {
            if (typeof eventName !== "string") {
                return;
            }
            try {
                dummyElement.dispatchEvent(new Event(eventName));
            } catch (e) {
                var event = document.createEvent("Event");
                event.initEvent(eventName, false, true);
                dummyElement.dispatchEvent(event);
            }
        };
    }
    Object.defineProperty(DummyNotification, "permission", {
        enumerable: true,
        get: function() {
            return PERMISSION_NOTSUPPORTED;
        }
    });
    Object.defineProperty(DummyNotification, "requestPermission", {
        enumerable: true,
        writable: true,
        value: function(callback) {
            callback(this.permission);
        }
    });
    /**
     * @constructor IENotification
     */
    function IENotification(title, options) {
        DummyNotification.call(this);
        var notificationIndex = IENotificationIndex;
        Object.defineProperties(this, {
            close: {
                value: function(event) {
                    if (notificationIndex === IENotificationIndex) {
                        window.external.msSiteModeClearIconOverlay();
                        // Remove close events
                        IECloseNotificationEvents.forEach(function(event) {
                            window.removeEventListener(event, this.close);
                        }.bind(this));
                        this.dispatchEvent("click");
                        this.dispatchEvent("close");
                        notificationIndex = null;
                    }
                }.bind(this)
            }
        });
        // Clear any previous icon overlay
        this.close();
        // Set icon
        if (this.icon) {
            window.external.msSiteModeSetIconOverlay(getIco(this.icon), this.description || this.title);
        }
        // Blink icon
        window.external.msSiteModeActivate();
        // Trigger show event
        this.dispatchEvent("show");
        // Attach close event to window
        IECloseNotificationEvents.forEach(function(event) {
            window.addEventListener(event, this.close);
        }.bind(this));
        // Increment notification index
        notificationIndex = ++IENotificationIndex;
    }
    Object.defineProperty(IENotification, "permission", {
        enumerable: true,
        get: function() {
            var isTabPinned = window.external.msIsSiteMode();
            return isTabPinned ? PERMISSION_GRANTED : PERMISSION_DENIED;
        }
    });
    Object.defineProperty(IENotification, "requestPermission", {
        enumerable: true,
        writable: true,
        value: function(callback) {
            return new Promise(function(resolve, reject) {
                if (this.permission === PERMISSION_DENIED) {
                    alert(this.PERMISSION_REQUEST_MESSAGE);
                }
                resolve(this.permission);
            }.bind(this));
        }
    });
    Object.defineProperty(IENotification, "PERMISSION_REQUEST_MESSAGE", {
        writable: true,
        value: "IE supports notifications in pinned mode only. Pin this page on your taskbar to receive notifications."
    });
    /**
     * @constructor WebKitNotification
     */
    function WebKitNotification() {}
    Object.defineProperty(WebKitNotification, "permission", {
        enumerable: true,
        get: function() {
            return PERMISSIONS[window.webkitNotifications.checkPermission()];
        }
    });
    Object.defineProperty(WebKitNotification, "requestPermission", {
        enumerable: true,
        writable: true,
        value: function(callback) {
            return new Promise(function(resolve, reject) {
                window.webkitNotifications.requestPermission(function(permission) {
                    resolve(permission);
                });
            });
        }
    });
    /*
        [Safari] Safari6 do not support Notification.permission.
        Instead, it support Notification.permissionLevel()
     */
    if (!_Notification.permission) {
        Object.defineProperty(_Notification, "permission", {
            enumerable: true,
            get: function() {
                return _Notification.permissionLevel && _Notification.permissionLevel();
            }
        });
    }
    /**
     * @constructor Notification
     */
    function Notification(title, options) {
        var dir;
        var notification;
        if (!arguments.length) {
            throw TypeError('Failed to construct "Notification": 1 argument required, but only 0 present.');
        }
        /*
            Chrome display notifications when title is empty screen, but
            Safari do NOT.

            Set title to non-display characted in order to display notifications
            in Safari as well when title is empty.
         */
        if (title === "") {
            title = "\b";
        }
        if (arguments.length > 1 && "object" !== typeof options) {
            throw TypeError('Failed to construct "Notification": parameter 2 ("options") is not an object.');
        }
        dir = Object(options).dir;
        if (dir !== undefined && DIRESCTIONS.indexOf(dir) === -1) {
            throw TypeError('Failed to construct "Notification": The provided value "' + dir + '" is not a valid enum value of type NotificationDirection.');
        }
        options = Object(options);
        notification = new _Notification(title, options);
        /* TODO: actions property */
        /* TODO: badge property */
        if (!notification.body) {
            Object.defineProperty(notification, "body", {
                value: String(options.body || "")
            });
        }
        if (!notification.data) {
            Object.defineProperty(notification, "data", {
                value: options.data || null
            });
        }
        if (!notification.dir) {
            Object.defineProperty(notification, "dir", {
                value: dir || DIRESCTIONS[0]
            });
        }
        if (!notification.icon) {
            Object.defineProperty(notification, "icon", {
                value: String(options.icon || "")
            });
        }
        if (!notification.lang) {
            Object.defineProperty(notification, "lang", {
                value: String(options.lang || "")
            });
        }
        /* TODO: noscreen property */
        /* TODO: renotify property */
        if (!notification.requireInteraction) {
            Object.defineProperty(notification, "requireInteraction", {
                value: Boolean(options.requireInteraction)
            });
        }
        /* TODO: sound property */
        if (!notification.silent) {
            Object.defineProperty(notification, "silent", {
                value: Boolean(options.silent)
            });
        }
        if (!notification.tag) {
            Object.defineProperty(notification, "tag", {
                value: String(options.tag || "")
            });
        }
        if (!notification.title) {
            Object.defineProperty(notification, "title", {
                value: String(title)
            });
        }
        if (!notification.timestamp) {
            Object.defineProperty(notification, "timestamp", {
                value: new Date().getTime()
            });
        }
        /* TODO: vibrate property */
        return notification;
    }
    Object.defineProperty(Notification, "permission", {
        enumerable: true,
        get: function() {
            return _Notification.permission;
        }
    });
    /*
        Notification.requestPermission should return a Promise(by spec).
        Keep the original method and replace it with a custom one that
        checks if the call of Notification.requestPermission returns a promise
        and if not, then return a custom object that simulates the Promise object.

        Specification:
        Notification.requestPermission().then(callback);

        Old Spec:
        Notification.requestPermission(callback);
     */
    Object.defineProperty(Notification, "requestPermission", {
        enumerable: true,
        value: function() {
            return new Promise(function(resolve, reject) {
                var promise = _Notification.requestPermission(function(permission) {
                    resolve(permission);
                });
                if (!(promise instanceof Promise)) {
                    return;
                }
                resolve(promise);
            });
        }
    });
    window.Notification = Notification;
})();

/*!
 * @name      ElkArte Forum
 * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 *
 * This bits acts as middle-man between the notify (above) and the ElkNotifications
 * providing the interface required by the latter.]]></search>
			<add><![CDATA[/*!
 * @name      ElkArte Forum
 * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 * This bits acts as middle-man between the notify (above) and the ElkNotifications
 * providing the interface required by the latter.]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	var ElkDesktop = (function (opt) {
		'use strict';
		opt = (opt) ? opt : {};
		var notif,
			alreadyChecked = false,
			alreadyAsked = false,
			permission_granted = false;

		var init = function (opt) {
			notif = Notification;
		};

		var send = function (request) {
			if (request.desktop_notifications.new_from_last > 0) {
				if (!hasPermissions())
					return;

				var myNotification = new Notification(request.desktop_notifications.title, {
					body: request.desktop_notifications.message,
					icon: opt.icon
				});
			}
		};

		var hasPermissions = function () {
			if (alreadyChecked)
				return permission_granted;

			if (alreadyAsked === false && notif.permission === "default" && notif.permission !== "notsupported") {
				notif.requestPermission();
				alreadyAsked = true;
			}

			permission_granted = notif.permission === "granted";
			alreadyChecked = notif.permission !== "default";

			return permission_granted;
		};

		init(opt);
		return {
			send: send
		};
	});

	// AMD / RequireJS
	if (typeof define !== 'undefined' && define.amd) {
		define([], function () {
			return ElkDesktop;
		});
	}
	// CommonJS
	else if (typeof module !== 'undefined' && module.exports) {
		module.exports = ElkDesktop;
	}
	// included directly via <script> tag
	else {
		this.ElkDesktop = ElkDesktop;
	}
})();]]></search>
			<add><![CDATA[	var ElkDesktop = (function (opt) {
		'use strict';
		opt = (opt) ? opt : {};

		var send = function (request) {
			if (request.desktop_notifications.new_from_last > 0) {
				if (hasPermissions(request))
				{
					Push.create(request.desktop_notifications.title, {
						body: request.desktop_notifications.message,
						icon: opt.icon,
						link: request.desktop_notifications.link
					});
				}
			}
		};

		var hasPermissions = function () {
			if (Push.Permission.has())
				return true;

			if (Push.Permission.get() === "default") {
				return Push.Permission.request();
			}

			return false;
		};

		return {
			send: send
		};
	});

	this.ElkDesktop = ElkDesktop;
})();]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for drafts.plugin.js -->		
	<file name="THEMEDIR/scripts/drafts.plugin.js">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 */

/**
 *
 * This file contains javascript associated with the drafts auto function as it
 * relates to an sceditor invocation
 */]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 */

/**
 * This file contains javascript associated with the drafts auto function as it
 * relates to an sceditor invocation
 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		}

		// Prevent autosave on post/save selection by mouse or keyboard
		var $_form_submitt =  $('#' + formID + ' .button_submit');
		$_form_submitt.on('mousedown', oInstance, function() {
			oInstance.opts._bInDraftMode = true;
		});]]></search>
			<add><![CDATA[		}

		// Prevent autosave on post/save selection by mouse or keyboard
		var $_form_submitt =  $('#' + formID + ' [name="post"]');
		$_form_submitt.on('mousedown', oInstance, function() {
			oInstance.opts._bInDraftMode = true;
		});]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for elk_jquery_embed.js -->		
	<file name="THEMEDIR/scripts/elk_jquery_embed.js">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.6
 *
 * Original code from Aziz, redone and refactored for ElkArte
 */]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 *
 * Original code from Aziz, redone and refactored for ElkArte
 */]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				startAtPar = '&start=' + startAtSeconds.toString();
			}

			var embedURL = '//www.youtube.com/embed/' + videoID + '?rel=0' + startAtPar,
				tag = embedOrIMG(embed, a, '//img.youtube.com/vi/' + videoID + '/0.jpg', embedURL, embedURL + '&autoplay=1' );

			return [oSettings.youtube, tag];]]></search>
			<add><![CDATA[				startAtPar = '&start=' + startAtSeconds.toString();
			}

			var embedURL = '//www.youtube-nocookie.com/embed/' + videoID + '?rel=0' + startAtPar,
				tag = embedOrIMG(embed, a, '//img.youtube.com/vi/' + videoID + '/0.jpg', embedURL, embedURL + '&autoplay=1' );

			return [oSettings.youtube, tag];]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for elk_jquery_plugins.js -->		
	<file name="THEMEDIR/scripts/elk_jquery_plugins.js">
		<operation>
			<search position="replace"><![CDATA[ */

/*!
 * hoverIntent v1.9.0 // 2014.08.11 // jQuery v1.9.1+
 * http://cherne.net/brian/resources/jquery.hoverIntent.html
 *
 * You may use hoverIntent under the terms of the MIT license. Basically that
 * means you are free to use hoverIntent as long as this header is left intact.
 * Copyright 2007, 2014 Brian Cherne
 */

/* hoverIntent is similar to jQuery's built-in "hover" method except that
 * instead of firing the handlerIn function immediately, hoverIntent checks
 * to see if the user's mouse has slowed down (beneath the sensitivity
 * threshold) before firing the event. The handlerOut function is only]]></search>
			<add><![CDATA[ */

/*!
 * hoverIntent v1.10.1 // 2019.10.05 // jQuery v1.7.0+
 * http://briancherne.github.io/jquery-hoverIntent/
 *
 * You may use hoverIntent under the terms of the MIT license. Basically that
 * means you are free to use hoverIntent as long as this header is left intact.
 * Copyright 2007-2019 Brian Cherne
 */

/**
 * hoverIntent is similar to jQuery's built-in "hover" method except that
 * instead of firing the handlerIn function immediately, hoverIntent checks
 * to see if the user's mouse has slowed down (beneath the sensitivity
 * threshold) before firing the event. The handlerOut function is only]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[ * @author Brian Cherne <brian(at)cherne(dot)net>
 */

(function(factory) {
	'use strict';
	if (typeof define === 'function' && define.amd) {
		define(['jquery'], factory);
	} else if (jQuery && !jQuery.fn.hoverIntent) {
		factory(jQuery);
	}]]></search>
			<add><![CDATA[ * @author Brian Cherne <brian(at)cherne(dot)net>
 */

;(function(factory) {
	'use strict';
	if (typeof define === 'function' && define.amd) {
		define(['jquery'], factory);
	} else if (typeof module === 'object' && module.exports) {
		module.exports = factory(require('jquery'));
	} else if (jQuery && !jQuery.fn.hoverIntent) {
		factory(jQuery);
	}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	// current X and Y position of mouse, updated during mousemove tracking (shared across instances)
	var cX, cY;

	// saves the current pointer position coordinated based on the given mouse event
	var track = function(ev) {
		cX = ev.pageX;
		cY = ev.pageY;]]></search>
			<add><![CDATA[	// current X and Y position of mouse, updated during mousemove tracking (shared across instances)
	var cX, cY;

	// saves the current pointer position coordinates based on the given mousemove event
	var track = function(ev) {
		cX = ev.pageX;
		cY = ev.pageY;]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[	var compare = function(ev,$el,s,cfg) {
		// compare mouse positions to see if pointer has slowed enough to trigger `over` function
		if ( Math.sqrt( (s.pX-cX)*(s.pX-cX) + (s.pY-cY)*(s.pY-cY) ) < cfg.sensitivity ) {
			$el.off('mousemove.hoverIntent'+s.namespace,track);
			delete s.timeoutId;
			// set hoverIntent state as active for this element (so `out` handler can eventually be called)
			s.isActive = true;
			// clear coordinate data
			delete s.pX; delete s.pY;
			return cfg.over.apply($el[0],[ev]);
		} else {]]></search>
			<add><![CDATA[	var compare = function(ev,$el,s,cfg) {
		// compare mouse positions to see if pointer has slowed enough to trigger `over` function
		if ( Math.sqrt( (s.pX-cX)*(s.pX-cX) + (s.pY-cY)*(s.pY-cY) ) < cfg.sensitivity ) {
			$el.off(s.event,track);
			delete s.timeoutId;
			// set hoverIntent state as active for this element (permits `out` handler to trigger)
			s.isActive = true;
			// overwrite old mouseenter event coordinates with most recent pointer position
			ev.pageX = cX; ev.pageY = cY;
			// clear coordinate data from state object
			delete s.pX; delete s.pY;
			return cfg.over.apply($el[0],[ev]);
		} else {]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[
	// triggers given `out` function at configured `timeout` after a mouseleave and clears state
	var delay = function(ev,$el,s,out) {
		delete $el.data('hoverIntent')[s.id];
		return out.apply($el[0],[ev]);
	};
]]></search>
			<add><![CDATA[
	// triggers given `out` function at configured `timeout` after a mouseleave and clears state
	var delay = function(ev,$el,s,out) {
		var data = $el.data('hoverIntent');
		if (data) {
			delete data[s.id];
		}
		return out.apply($el[0],[ev]);
	};
]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[		// extend the default configuration and parse parameters
		var cfg = $.extend({}, _cfg);
		if ( $.isPlainObject(handlerIn) ) {
			cfg = $.extend(cfg, handlerIn );
		} else if ($.isFunction(handlerOut)) {
			cfg = $.extend(cfg, { over: handlerIn, out: handlerOut, selector: selector } );
		} else {
			cfg = $.extend(cfg, { over: handlerIn, out: handlerIn, selector: handlerOut } );]]></search>
			<add><![CDATA[		// extend the default configuration and parse parameters
		var cfg = $.extend({}, _cfg);
		if ( $.isPlainObject(handlerIn) ) {
			cfg = $.extend(cfg, handlerIn);
			if ( !$.isFunction(cfg.out) ) {
				cfg.out = cfg.over;
			}
		} else if ( $.isFunction(handlerOut) ) {
			cfg = $.extend(cfg, { over: handlerIn, out: handlerOut, selector: selector } );
		} else {
			cfg = $.extend(cfg, { over: handlerIn, out: handlerIn, selector: handlerOut } );]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[			// timeoutId = timeout ID, reused for tracking mouse position and delaying "out" handler
			// isActive = plugin state, true after `over` is called just until `out` is called
			// pX, pY = previously-measured pointer coordinates, updated at each polling interval
			// namespace = string used as namespace for per-instance event management

			// clear any existing timeout
			if (state.timeoutId) { state.timeoutId = clearTimeout(state.timeoutId); }

			// event namespace, used to register and unregister mousemove tracking
			var namespace = state.namespace = '.hoverIntent'+instanceId;

			// handle the event, based on its type
			if (e.type === 'mouseenter') {]]></search>
			<add><![CDATA[			// timeoutId = timeout ID, reused for tracking mouse position and delaying "out" handler
			// isActive = plugin state, true after `over` is called just until `out` is called
			// pX, pY = previously-measured pointer coordinates, updated at each polling interval
			// event = string representing the namespaced event used for mouse tracking

			// clear any existing timeout
			if (state.timeoutId) { state.timeoutId = clearTimeout(state.timeoutId); }

			// namespaced event used to register and unregister mousemove tracking
			var mousemove = state.event = 'mousemove.hoverIntent.hoverIntent'+instanceId;

			// handle the event, based on its type
			if (e.type === 'mouseenter') {]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				// set "previous" X and Y position based on initial entry point
				state.pX = ev.pageX; state.pY = ev.pageY;
				// update "current" X and Y position based on mousemove
				$el.on('mousemove.hoverIntent'+namespace,track);
				// start polling interval (self-calling timeout) to compare mouse coordinates over time
				state.timeoutId = setTimeout( function(){compare(ev,$el,state,cfg);} , cfg.interval );
			} else { // "mouseleave"
				// do nothing if not already active
				if (!state.isActive) { return; }
				// unbind expensive mousemove event
				$el.off('mousemove.hoverIntent'+namespace,track);
				// if hoverIntent state is true, then call the mouseOut function after the specified delay
				state.timeoutId = setTimeout( function(){delay(ev,$el,state,cfg.out);} , cfg.timeout );
			}]]></search>
			<add><![CDATA[				// set "previous" X and Y position based on initial entry point
				state.pX = ev.pageX; state.pY = ev.pageY;
				// update "current" X and Y position based on mousemove
				$el.off(mousemove,track).on(mousemove,track);
				// start polling interval (self-calling timeout) to compare mouse coordinates over time
				state.timeoutId = setTimeout( function(){compare(ev,$el,state,cfg);} , cfg.interval );
			} else { // "mouseleave"
				// do nothing if not already active
				if (!state.isActive) { return; }
				// unbind expensive mousemove event
				$el.off(mousemove,track);
				// if hoverIntent state is true, then call the mouseOut function after the specified delay
				state.timeoutId = setTimeout( function(){delay(ev,$el,state,cfg.out);} , cfg.timeout );
			}]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[

/*
 * jQuery Superfish Menu Plugin 1.7.9
 * Copyright (c) 2013 Joel Birch
 *
 * Dual licensed under the MIT and GPL licenses:
 *	http://www.opensource.org/licenses/mit-license.php]]></search>
			<add><![CDATA[

/*
 * jQuery Superfish Menu Plugin - v1.7.10
 * Copyright (c) 2018 Joel Birch
 *
 * Dual licensed under the MIT and GPL licenses:
 *	http://www.opensource.org/licenses/mit-license.php]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				}
			},
			touchHandler = function (e) {
				var $this = $(this),
					o = getOptions($this),
					$ul = $this.siblings(e.data.popUpSelector);]]></search>
			<add><![CDATA[				}
			},
			touchHandler = function (e) {
				// iPad ios 13.1 top menu item link problem
				if (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1) {
					return this;
				}

				var $this = $(this),
					o = getOptions($this),
					$ul = $this.siblings(e.data.popUpSelector);]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					$this.off('.superfish').off('.hoverIntent');
					// clear animation's inline display style
					$hasPopUp.children(o.popUpSelector).attr('style', function (i, style) {
						return style.replace(/display[^;]+;?/g, '');
					});
					// reset 'current' path classes
					o.$path.removeClass(o.hoverClass + ' ' + c.bcClass).addClass(o.pathClass);]]></search>
			<add><![CDATA[					$this.off('.superfish').off('.hoverIntent');
					// clear animation's inline display style
					$hasPopUp.children(o.popUpSelector).attr('style', function (i, style) {
						if (typeof style !== 'undefined') {
							return style.replace(/display[^;]+;?/g, '');
						}
					});
					// reset 'current' path classes
					o.$path.removeClass(o.hoverClass + ' ' + c.bcClass).addClass(o.pathClass);]]></add>
		</operation>
	</file>
	
	<!-- 1.1.7 updates for script_elk.js -->		
	<file name="THEMEDIR/scripts/script_elk.js">
		<operation>
			<search position="replace"><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1
 */

/**]]></search>
			<add><![CDATA[ * @copyright ElkArte Forum contributors
 * @license   BSD http://opensource.org/licenses/BSD-3-Clause
 *
 * @version 1.1.7
 */

/**]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[				return;

			$.ajax({
				url: elk_scripturl + "?action=mentions;sa=fetch;api=json;lastsent=" + lastTime
			})
			.done(function(request) {]]></search>
			<add><![CDATA[				return;

			$.ajax({
				cache: false,
				dataType: 'json',
				timeout: 1500,
				url: elk_scripturl + "?action=mentions;sa=fetch;api=json;lastsent=" + lastTime
			})
			.done(function(request) {]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[					send(request);
					lastTime = request.timelast;
				}

				setTimeout(function() {
					fetch();
				}, opt.delay);]]></search>
			<add><![CDATA[					send(request);
					lastTime = request.timelast;
				}
			})
			.always(function() {
				setTimeout(function() {
					fetch();
				}, opt.delay);]]></add>
		</operation>
	</file>
</modification>